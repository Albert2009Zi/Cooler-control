

HI-TECH Software PIC PRO Macro Assembler V9.71a build 6446 
                                                                                               Thu Jun 21 00:59:43 2012

HI-TECH Software Omniscient Code Generator (PRO mode) build 6446
     1                           	processor	12F1840
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	config,global,class=CONFIG,delta=2
     5                           	psect	idloc,global,class=IDLOC,delta=2
     6                           	psect	idataCOMMON,global,class=CODE,delta=2
     7                           	psect	idataBANK1,global,class=CODE,delta=2
     8                           	psect	strings,global,class=STRING,delta=2
     9                           	psect	cinit,global,class=CODE,delta=2
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	text1555,local,class=CODE,delta=2
    20                           	psect	text1558,local,class=CODE,delta=2
    21                           	psect	text1561,local,class=CODE,delta=2
    22                           	psect	text1562,local,class=CODE,delta=2
    23                           	psect	text1571,local,class=CODE,delta=2
    24                           	psect	text1572,local,class=CODE,delta=2
    25                           	psect	text1573,local,class=CODE,delta=2
    26                           	psect	text1574,local,class=CODE,delta=2
    27                           	psect	text1579,local,class=CODE,delta=2
    28                           	psect	text1580,local,class=CODE,delta=2
    29                           	psect	text1583,local,class=CODE,delta=2
    30                           	psect	text1585,local,class=CODE,delta=2
    31                           	psect	text1586,local,class=CODE,delta=2
    32                           	psect	text1588,local,class=CODE,delta=2
    33                           	psect	text1591,local,class=CODE,delta=2
    34                           	psect	text1596,local,class=CODE,delta=2
    35                           	psect	text1597,local,class=CODE,delta=2
    36                           	psect	intentry,global,class=CODE,delta=2
    37                           	psect	pa_nodes,global,class=CODE,delta=2
    38                           	dabs	1,0x120,80
    39                           	dabs	1,0xE6,10
    40                           	dabs	1,0x7E,2
    41  000A                     	;#
    42                           
    43                           	psect	config
    44  8007  C9AC               	dw	51628	;#
    45  8008  BDFF               	dw	48639	;#
    46                           
    47                           	psect	idloc
    48  8000                     idloc_word:	
    49                           
    50                           ;#
    51  8000  0000               	dw	0	;#
    52  8001  0000               	dw	0	;#
    53  8002  0000               	dw	0	;#
    54  8003  0000               	dw	0	;_gBuffer
    55                           
    56                           	psect	idataCOMMON
    57  0000                     __pidataCOMMON:	
    58                           
    59                           	psect	idataBANK1
    60  0000                     __pidataBANK1:	
    61                           
    62                           	psect	strings
    63  0026                     __pstrings:	
    64  0026                     __stringtab:	
    65  0026  3400               	retlw	0
    66  0027                     hdrProcess@riff:	
    67  0027  3452               	retlw	82
    68  0028  3449               	retlw	73
    69  0029  3446               	retlw	70
    70  002A  3446               	retlw	70
    71  002B                     hdrProcess@wave:	
    72  002B  3457               	retlw	87
    73  002C  3441               	retlw	65
    74  002D  3456               	retlw	86
    75  002E  3445               	retlw	69
    76  000B                     _INTCON	set	11
    77  000B                     _INTCONbits	set	11
    78  001B                     _PR2	set	27
    79  001C                     _T2CON	set	28
    80  0015                     _TMR0	set	21
    81  0060                     _RA0	set	96
    82  0065                     _RA5	set	101
    83  009B                     _ADRES	set	155
    84  009D                     _ADCON0	set	157
    85  009D                     _ADCON0bits	set	157
    86  009E                     _ADCON1	set	158
    87  0095                     _OPTION_REG	set	149
    88  0099                     _OSCCON	set	153
    89  0098                     _OSCTUNE	set	152
    90  008C                     _TRISA	set	140
    91  008C                     _TRISAbits	set	140
    92  0097                     _WDTCON	set	151
    93  04B8                     _SWDTEN	set	1208
    94  011D                     _APFCON	set	285
    95  0117                     _FVRCON	set	279
    96  0861                     _LATA1	set	2145
    97  0864                     _LATA4	set	2148
    98  018C                     _ANSELA	set	396
    99  0191                     _EEADRL	set	401
   100  0195                     _EECON1	set	405
   101  0195                     _EECON1bits	set	405
   102  0196                     _EECON2	set	406
   103  0193                     _EEDATL	set	403
   104  0212                     _SSP1ADD	set	530
   105  0211                     _SSP1BUF	set	529
   106  0215                     _SSP1CON1	set	533
   107  0214                     _SSP1STAT	set	532
   108  0214                     _SSP1STATbits	set	532
   109  10AD                     _SSPEN	set	4269
   110  0293                     _CCP1CON	set	659
   111  0292                     _CCPR1H	set	658
   112  0291                     _CCPR1L	set	657
   113                           
   114                           	psect	cinit
   115  0409                     start_initialization:	
   116  2096                     	;BIGRAM
   117                           
   118                           ; Clear objects allocated to BIGRAM
   119  0409  3096               	movlw	150
   120  040A  0084               	movwf	4
   121  040B  3020               	movlw	32
   122  040C  0085               	movwf	5
   123  040D  305A               	movlw	90
   124  040E  00FE               	movwf	126
   125  040F  3000               	movlw	0
   126  0410  01FF               	clrf	127
   127  0411  3184  249D  3184   	fcall	clear_ram
   128                           
   129                           ; Clear objects allocated to COMMON
   130  0414  01FA               	clrf	__pbssCOMMON& (0+127)
   131                           
   132                           ; Clear objects allocated to BANK0
   133  0415  01E9               	clrf	__pbssBANK0& (0+127)
   134  0416  01EA               	clrf	(__pbssBANK0+1)& (0+127)
   135  0417  01EB               	clrf	(__pbssBANK0+2)& (0+127)
   136  0418  01EC               	clrf	(__pbssBANK0+3)& (0+127)
   137  0419  01ED               	clrf	(__pbssBANK0+4)& (0+127)
   138                           
   139                           ; Clear objects allocated to BANK1
   140  041A  30C8               	movlw	low __pbssBANK1
   141  041B  0084               	movwf	4
   142  041C  3000               	movlw	high __pbssBANK1
   143  041D  0085               	movwf	5
   144  041E  300F               	movlw	15
   145  041F  00FE               	movwf	126
   146  0420  3000               	movlw	0
   147  0421  01FF               	clrf	127
   148  0422  3184  249D         	fcall	clear_ram
   149                           
   150                           ;initializer for _gWrite
   151  0424  3001               	movlw	1
   152  0425  00FB               	movwf	__pdataCOMMON& (0+127)
   153                           
   154                           ; Initialize objects allocated to BANK1
   155  0426  0021               	movlb	1	; select bank1
   156                           
   157                           ;initializer for ufatExtRead@curSec
   158  0427  30FF               	movlw	255
   159  0428  00D7               	movwf	__pdataBANK1& (0+127)
   160  0429  00D8               	movwf	(__pdataBANK1+1)& (0+127)
   161  042A  00D9               	movwf	(__pdataBANK1+2)& (0+127)
   162  042B  00DA               	movwf	(__pdataBANK1+3)& (0+127)
   163                           
   164                           ;initializer for _curClus
   165  042C  00DB               	movwf	(__pdataBANK1+4)& (0+127)
   166  042D  00DC               	movwf	(__pdataBANK1+5)& (0+127)
   167  042E                     end_of_initialization:	
   168                           ;End of C runtime variable initialization code
   169                           
   170  042E  0020               	movlb	0
   171  042F  3188  2872         	ljmp	_main	;jump to C main() function
   172                           
   173                           	psect	bssCOMMON
   174  007A                     __pbssCOMMON:	
   175  007A                     _tmrReload:	
   176  007A                     	ds	1
   177                           
   178                           	psect	dataCOMMON
   179  007B                     __pdataCOMMON:	
   180  007B                     _gWrite:	
   181  007B                     	ds	1
   182                           
   183                           	psect	bssBANK0
   184  0069                     __pbssBANK0:	
   185  0069                     _diskOffset:	
   186  0069                     	ds	4
   187  006D                     _gRead:	
   188  006D                     	ds	1
   189                           
   190                           	psect	bssBANK1
   191  00C8                     __pbssBANK1:	
   192  00C8                     _dataSec:	
   193  00C8                     	ds	2
   194  00CA                     _fatSec:	
   195  00CA                     	ds	2
   196  00CC                     _rootDirEntries:	
   197  00CC                     	ds	2
   198  00CE                     _rootSec:	
   199  00CE                     	ds	2
   200  00D0                     _sectorsPerFat:	
   201  00D0                     	ds	2
   202  00D2                     ufatExtRead@curPos:	
   203  00D2                     	ds	2
   204  00D4                     _byteStride:	
   205  00D4                     	ds	1
   206  00D5                     _secPerClus:	
   207  00D5                     	ds	1
   208  00D6                     log@addr:	
   209  00D6                     	ds	1
   210                           
   211                           	psect	dataBANK1
   212  00D7                     __pdataBANK1:	
   213  00D7                     ufatExtRead@curSec:	
   214  00D7                     	ds	4
   215  00DB                     _curClus:	
   216  00DB                     	ds	2
   217                           
   218                           	psect	clrtext
   219  049D                     clear_ram:	
   220                           ;	Called with FSR0 containing the base address, and
   221                           ;	btemp/btemp+1 has the size to clear
   222                           
   223  049D  0064               	clrwdt	;clear the watchdog before getting into this loop
   224  049E                     clrloop:	
   225  049E  0180               	clrf	0	;clear RAM location pointed to by FSR
   226  049F  3101               	addfsr 0,1
   227  04A0  3001               	movlw	1
   228  04A1  02FE               	subwf	126,f
   229  04A2  3000               	movlw	0
   230  04A3  3BFF               	subwfb	127,f
   231  04A4  087F               	movf	127,w
   232  04A5  047E               	iorwf	126,w
   233  04A6  1903               	btfsc	3,2
   234  04A7  3400               	retlw	0	;all done for this memory range, return
   235  04A8  2C9E               	goto	clrloop	;have we reached the end yet?
   236                           
   237                           	psect	cstackBANK1
   238  00A0                     __pcstackBANK1:	
   239  00A0                     ??_main:	
   240                           
   241                           ; 0 bytes @ 0x0
   242  00A0                     	ds	4
   243  00A4                     main@name:	
   244                           
   245                           ; 11 bytes @ 0x4
   246  00A4                     	ds	11
   247  00AF                     _main$2046:	
   248                           
   249                           ; 4 bytes @ 0xF
   250  00AF                     	ds	4
   251  00B3                     main@numFiles:	
   252                           
   253                           ; 2 bytes @ 0x13
   254  00B3                     	ds	2
   255  00B5                     main@sec:	
   256                           
   257                           ; 4 bytes @ 0x15
   258  00B5                     	ds	4
   259  00B9                     main@j:	
   260                           
   261                           ; 1 bytes @ 0x19
   262  00B9                     	ds	1
   263  00BA                     main@i:	
   264                           
   265                           ; 2 bytes @ 0x1A
   266  00BA                     	ds	2
   267  00BC                     main@sv:	
   268                           
   269                           ; 2 bytes @ 0x1C
   270  00BC                     	ds	2
   271  00BE                     main@n:	
   272                           
   273                           ; 2 bytes @ 0x1E
   274  00BE                     	ds	2
   275  00C0                     main@id:	
   276                           
   277                           ; 2 bytes @ 0x20
   278  00C0                     	ds	2
   279  00C2                     main@ret:	
   280                           
   281                           ; 1 bytes @ 0x22
   282  00C2                     	ds	1
   283  00C3                     main@flags:	
   284                           
   285                           ; 1 bytes @ 0x23
   286  00C3                     	ds	1
   287  00C4                     main@sz:	
   288                           
   289                           ; 4 bytes @ 0x24
   290  00C4                     	ds	4
   291                           
   292                           	psect	cstackCOMMON
   293  0070                     __pcstackCOMMON:	
   294  0070                     ?_sdSecReadStop:	
   295  0070                     ?_sdNextSec:	
   296                           ; 0 bytes @ 0x0
   297                           
   298  0070                     ?_ufatInit:	
   299                           ; 0 bytes @ 0x0
   300                           
   301  0070                     ?_log:	
   302                           ; 0 bytes @ 0x0
   303                           
   304  0070                     ?_fatal:	
   305                           ; 0 bytes @ 0x0
   306                           
   307  0070                     ?_audioOn:	
   308                           ; 0 bytes @ 0x0
   309                           
   310  0070                     ?_audioOff:	
   311                           ; 0 bytes @ 0x0
   312                           
   313  0070                     ?_ufatExtReadTerminate:	
   314                           ; 0 bytes @ 0x0
   315                           
   316  0070                     ?_play:	
   317                           ; 0 bytes @ 0x0
   318                           
   319  0070                     ?_main:	
   320                           ; 0 bytes @ 0x0
   321                           
   322  0070                     ?_isr:	
   323                           ; 0 bytes @ 0x0
   324                           
   325  0070                     ??_isr:	
   326                           ; 0 bytes @ 0x0
   327                           
   328  0070                     ?_sdClockSpeed:	
   329                           ; 0 bytes @ 0x0
   330                           
   331  0070                     ?_sdSpiInit:	
   332                           ; 0 bytes @ 0x0
   333                           
   334  0070                     ?_sdSpiResync:	
   335                           ; 0 bytes @ 0x0
   336                           
   337  0070                     ?_sdSpiByte:	
   338                           ; 0 bytes @ 0x0
   339                           
   340  0070                     ?_sdInit:	
   341                           ; 1 bytes @ 0x0
   342                           
   343  0070                     ?_ufatMount:	
   344                           ; 1 bytes @ 0x0
   345                           
   346  0070                     ?_eeRead:	
   347                           ; 1 bytes @ 0x0
   348                           
   349  0070                     ?_byte:	
   350                           ; 1 bytes @ 0x0
   351                           
   352  0070                     ?_hdrProcess:	
   353                           ; 1 bytes @ 0x0
   354                           
   355  0070                     ?_sdPrvReadResp:	
   356                           ; 1 bytes @ 0x0
   357                           
   358  0070                     ?_sdPrvCardInit:	
   359                           ; 1 bytes @ 0x0
   360                           
   361  0070                     ?_ufatParsePartitionTable:	
   362                           ; 1 bytes @ 0x0
   363                           
   364  0070                     isr@v1:	
   365                           ; 1 bytes @ 0x0
   366                           
   367                           
   368                           ; 1 bytes @ 0x0
   369  0070                     	ds	1
   370  0071                     isr@v:	
   371                           
   372                           ; 1 bytes @ 0x1
   373  0071                     	ds	1
   374  0072                     ??_sdSpiByte:	
   375  0072                     ??_ufatInit:	
   376                           ; 0 bytes @ 0x2
   377                           
   378  0072                     ??_eeRead:	
   379                           ; 0 bytes @ 0x2
   380                           
   381  0072                     ?_eeWrite:	
   382                           ; 0 bytes @ 0x2
   383                           
   384  0072                     ??_fatal:	
   385                           ; 0 bytes @ 0x2
   386                           
   387  0072                     ??_audioOn:	
   388                           ; 0 bytes @ 0x2
   389                           
   390  0072                     ??_audioOff:	
   391                           ; 0 bytes @ 0x2
   392                           
   393  0072                     ?_sleep:	
   394                           ; 0 bytes @ 0x2
   395                           
   396  0072                     ??_sdClockSpeed:	
   397                           ; 0 bytes @ 0x2
   398                           
   399  0072                     ??_sdSpiInit:	
   400                           ; 0 bytes @ 0x2
   401                           
   402  0072                     ??_sdSpiResync:	
   403                           ; 0 bytes @ 0x2
   404                           
   405  0072                     ?_ufatOpen:	
   406                           ; 0 bytes @ 0x2
   407                           
   408  0072                     ?_sdCrc7:	
   409                           ; 1 bytes @ 0x2
   410                           
   411  0072                     ?___bmul:	
   412                           ; 1 bytes @ 0x2
   413                           
   414  0072                     ?_ufatGetU16:	
   415                           ; 1 bytes @ 0x2
   416                           
   417  0072                     ?___wmul:	
   418                           ; 2 bytes @ 0x2
   419                           
   420  0072                     ?_ufatGetU32:	
   421                           ; 2 bytes @ 0x2
   422                           
   423  0072                     ?___lmul:	
   424                           ; 4 bytes @ 0x2
   425                           
   426  0072                     ?___lldiv:	
   427                           ; 4 bytes @ 0x2
   428                           
   429  0072                     ?___aldiv:	
   430                           ; 4 bytes @ 0x2
   431                           
   432  0072                     eeRead@addr:	
   433                           ; 4 bytes @ 0x2
   434                           
   435  0072                     eeWrite@data:	
   436                           ; 1 bytes @ 0x2
   437                           
   438  0072                     sdClockSpeed@fast:	
   439                           ; 1 bytes @ 0x2
   440                           
   441  0072                     sdSpiByte@byte:	
   442                           ; 1 bytes @ 0x2
   443                           
   444  0072                     sdCrc7@cnt:	
   445                           ; 1 bytes @ 0x2
   446                           
   447  0072                     ufatGetU16@idx:	
   448                           ; 1 bytes @ 0x2
   449                           
   450  0072                     ufatGetU32@idx:	
   451                           ; 1 bytes @ 0x2
   452                           
   453  0072                     ___bmul@multiplicand:	
   454                           ; 1 bytes @ 0x2
   455                           
   456  0072                     ufatOpen@id:	
   457                           ; 1 bytes @ 0x2
   458                           
   459  0072                     ___wmul@multiplier:	
   460                           ; 2 bytes @ 0x2
   461                           
   462  0072                     sleep@ms:	
   463                           ; 2 bytes @ 0x2
   464                           
   465  0072                     ___lmul@multiplier:	
   466                           ; 4 bytes @ 0x2
   467                           
   468  0072                     ___lldiv@divisor:	
   469                           ; 4 bytes @ 0x2
   470                           
   471  0072                     ___aldiv@divisor:	
   472                           ; 4 bytes @ 0x2
   473                           
   474                           
   475                           ; 4 bytes @ 0x2
   476  0072                     	ds	1
   477  0073                     ??_sdNextSec:	
   478  0073                     ??_eeWrite:	
   479                           ; 0 bytes @ 0x3
   480                           
   481  0073                     ??_byte:	
   482                           ; 0 bytes @ 0x3
   483                           
   484  0073                     ??_sdPrvReadResp:	
   485                           ; 0 bytes @ 0x3
   486                           
   487  0073                     ??___bmul:	
   488                           ; 0 bytes @ 0x3
   489                           
   490  0073                     ?_spiCmp:	
   491                           ; 0 bytes @ 0x3
   492                           
   493  0073                     eeWrite@addr:	
   494                           ; 1 bytes @ 0x3
   495                           
   496  0073                     spiCmp@len:	
   497                           ; 1 bytes @ 0x3
   498                           
   499  0073                     sdCrc7@crc:	
   500                           ; 1 bytes @ 0x3
   501                           
   502  0073                     sdPrvReadResp@i:	
   503                           ; 1 bytes @ 0x3
   504                           
   505  0073                     sdNextSec@v:	
   506                           ; 1 bytes @ 0x3
   507                           
   508  0073                     ___bmul@product:	
   509                           ; 1 bytes @ 0x3
   510                           
   511  0073                     _sdClockSpeed$3322:	
   512                           ; 1 bytes @ 0x3
   513                           
   514                           
   515                           ; 2 bytes @ 0x3
   516  0073                     	ds	1
   517  0074                     ??_ufatOpen:	
   518  0074                     ??_log:	
   519                           ; 0 bytes @ 0x4
   520                           
   521  0074                     ??_spiCmp:	
   522                           ; 0 bytes @ 0x4
   523                           
   524  0074                     ??_sdCrc7:	
   525                           ; 0 bytes @ 0x4
   526                           
   527  0074                     ??_ufatGetU16:	
   528                           ; 0 bytes @ 0x4
   529                           
   530  0074                     log@val:	
   531                           ; 0 bytes @ 0x4
   532                           
   533  0074                     sdPrvReadResp@v:	
   534                           ; 1 bytes @ 0x4
   535                           
   536  0074                     ufatGetU16@v:	
   537                           ; 1 bytes @ 0x4
   538                           
   539  0074                     ___bmul@multiplier:	
   540                           ; 1 bytes @ 0x4
   541                           
   542  0074                     ___wmul@multiplicand:	
   543                           ; 1 bytes @ 0x4
   544                           
   545                           
   546                           ; 2 bytes @ 0x4
   547  0074                     	ds	1
   548  0075                     ?_secListRead:	
   549  0075                     ?_secListWrite:	
   550                           ; 0 bytes @ 0x5
   551                           
   552  0075                     secListRead@start:	
   553                           ; 0 bytes @ 0x5
   554                           
   555  0075                     fatal@val:	
   556                           ; 1 bytes @ 0x5
   557                           
   558  0075                     audioOn@i:	
   559                           ; 1 bytes @ 0x5
   560                           
   561  0075                     spiCmp@with:	
   562                           ; 1 bytes @ 0x5
   563                           
   564  0075                     sdCrc7@chr:	
   565                           ; 1 bytes @ 0x5
   566                           
   567  0075                     secListWrite@start:	
   568                           ; 1 bytes @ 0x5
   569                           
   570                           
   571                           ; 3 bytes @ 0x5
   572  0075                     	ds	1
   573  0076                     ??_sleep:	
   574  0076                     ??___wmul:	
   575                           ; 0 bytes @ 0x6
   576                           
   577  0076                     secListRead@len:	
   578                           ; 0 bytes @ 0x6
   579                           
   580  0076                     fatal@k:	
   581                           ; 1 bytes @ 0x6
   582                           
   583  0076                     sdCrc7@Data:	
   584                           ; 1 bytes @ 0x6
   585                           
   586  0076                     ufatGetU32@v:	
   587                           ; 1 bytes @ 0x6
   588                           
   589  0076                     ___wmul@product:	
   590                           ; 1 bytes @ 0x6
   591                           
   592  0076                     ___lmul@multiplicand:	
   593                           ; 2 bytes @ 0x6
   594                           
   595  0076                     ___lldiv@dividend:	
   596                           ; 4 bytes @ 0x6
   597                           
   598  0076                     ___aldiv@dividend:	
   599                           ; 4 bytes @ 0x6
   600                           
   601                           
   602                           ; 4 bytes @ 0x6
   603  0076                     	ds	1
   604  0077                     fatal@i:	
   605  0077                     sdCrc7@i:	
   606                           ; 1 bytes @ 0x7
   607                           
   608                           
   609                           ; 1 bytes @ 0x7
   610  0077                     	ds	1
   611  0078                     fatal@j:	
   612  0078                     sdCrc7@a:	
   613                           ; 1 bytes @ 0x8
   614                           
   615  0078                     secListWrite@len:	
   616                           ; 1 bytes @ 0x8
   617                           
   618                           
   619                           ; 2 bytes @ 0x8
   620  0078                     	ds	1
   621  0079                     ??_sdPrvSendCmd:	
   622                           
   623                           ; 0 bytes @ 0x9
   624  0079                     	ds	1
   625  007A                     ??_sdSecReadStop:	
   626  007A                     ??_sdReadStart:	
   627                           ; 0 bytes @ 0xA
   628                           
   629  007A                     ??_sdInit:	
   630                           ; 0 bytes @ 0xA
   631                           
   632  007A                     ??_ufatGetNthFile:	
   633                           ; 0 bytes @ 0xA
   634                           
   635  007A                     ??_secListWrite:	
   636                           ; 0 bytes @ 0xA
   637                           
   638  007A                     ??_ufatExtRead:	
   639                           ; 0 bytes @ 0xA
   640                           
   641  007A                     ??_ufatExtReadTerminate:	
   642                           ; 0 bytes @ 0xA
   643                           
   644  007A                     ??_sdPrvSimpleCommand:	
   645                           ; 0 bytes @ 0xA
   646                           
   647  007A                     ??_sdPrvACMD:	
   648                           ; 0 bytes @ 0xA
   649                           
   650  007A                     ??_sdPrvCardInit:	
   651                           ; 0 bytes @ 0xA
   652                           
   653  007A                     ??_ufatGetNextClus:	
   654                           ; 0 bytes @ 0xA
   655                           
   656  007A                     ??___lwmod:	
   657                           ; 0 bytes @ 0xA
   658                           
   659  007A                     ??___lmul:	
   660                           ; 0 bytes @ 0xA
   661                           
   662  007A                     ??___lldiv:	
   663                           ; 0 bytes @ 0xA
   664                           
   665  007A                     ??___aldiv:	
   666                           ; 0 bytes @ 0xA
   667                           
   668                           
   669                           	psect	cstackBANK0
   670  0020                     __pcstackBANK0:	
   671                           ; 0 bytes @ 0xA
   672                           
   673  0020                     ??_secListRead:	
   674  0020                     ?_sdPrvSendCmd:	
   675                           ; 0 bytes @ 0x0
   676                           
   677  0020                     ??_ufatGetU32:	
   678                           ; 0 bytes @ 0x0
   679                           
   680  0020                     secListWrite@which:	
   681                           ; 0 bytes @ 0x0
   682                           
   683  0020                     sleep@oldClkCfg:	
   684                           ; 1 bytes @ 0x0
   685                           
   686  0020                     ___aldiv@counter:	
   687                           ; 1 bytes @ 0x0
   688                           
   689  0020                     sdPrvSendCmd@param:	
   690                           ; 1 bytes @ 0x0
   691                           
   692  0020                     ___lmul@product:	
   693                           ; 4 bytes @ 0x0
   694                           
   695  0020                     ___lldiv@quotient:	
   696                           ; 4 bytes @ 0x0
   697                           
   698                           
   699                           ; 4 bytes @ 0x0
   700  0020                     	ds	1
   701  0021                     secListWrite@i:	
   702  0021                     sleep@oldTris:	
   703                           ; 1 bytes @ 0x1
   704                           
   705  0021                     ___aldiv@sign:	
   706                           ; 1 bytes @ 0x1
   707                           
   708                           
   709                           ; 1 bytes @ 0x1
   710  0021                     	ds	1
   711  0022                     sleep@v:	
   712  0022                     ___aldiv@quotient:	
   713                           ; 4 bytes @ 0x2
   714                           
   715                           
   716                           ; 4 bytes @ 0x2
   717  0022                     	ds	2
   718  0024                     ?___lwmod:	
   719  0024                     ___lldiv@counter:	
   720                           ; 2 bytes @ 0x4
   721                           
   722  0024                     ___lwmod@divisor:	
   723                           ; 1 bytes @ 0x4
   724                           
   725  0024                     sdPrvSendCmd@send:	
   726                           ; 2 bytes @ 0x4
   727                           
   728                           
   729                           ; 6 bytes @ 0x4
   730  0024                     	ds	1
   731  0025                     ??_hdrProcess:	
   732                           
   733                           ; 0 bytes @ 0x5
   734  0025                     	ds	1
   735  0026                     ?_measureBattery:	
   736  0026                     sleep@i:	
   737                           ; 2 bytes @ 0x6
   738                           
   739  0026                     ___lwmod@dividend:	
   740                           ; 1 bytes @ 0x6
   741                           
   742  0026                     secListRead@t24:	
   743                           ; 2 bytes @ 0x6
   744                           
   745                           
   746                           ; 3 bytes @ 0x6
   747  0026                     	ds	2
   748  0028                     ??_measureBattery:	
   749  0028                     ___lwmod@counter:	
   750                           ; 0 bytes @ 0x8
   751                           
   752                           
   753                           ; 1 bytes @ 0x8
   754  0028                     	ds	1
   755  0029                     ?_rnd:	
   756  0029                     secListRead@t16:	
   757                           ; 2 bytes @ 0x9
   758                           
   759                           
   760                           ; 2 bytes @ 0x9
   761  0029                     	ds	1
   762  002A                     sdPrvSendCmd@cmd:	
   763                           
   764                           ; 1 bytes @ 0xA
   765  002A                     	ds	1
   766  002B                     ??_rnd:	
   767  002B                     ?_sdPrvSimpleCommand:	
   768                           ; 0 bytes @ 0xB
   769                           
   770  002B                     secListRead@which:	
   771                           ; 1 bytes @ 0xB
   772                           
   773  002B                     sdPrvSimpleCommand@param:	
   774                           ; 1 bytes @ 0xB
   775                           
   776                           
   777                           ; 4 bytes @ 0xB
   778  002B                     	ds	1
   779  002C                     secListRead@i:	
   780                           
   781                           ; 1 bytes @ 0xC
   782  002C                     	ds	1
   783  002D                     hdrProcess@hdr:	
   784                           
   785                           ; 4 bytes @ 0xD
   786  002D                     	ds	2
   787  002F                     measureBattery@i:	
   788  002F                     sdPrvSimpleCommand@cmdDone:	
   789                           ; 1 bytes @ 0xF
   790                           
   791  002F                     rnd@x:	
   792                           ; 1 bytes @ 0xF
   793                           
   794                           
   795                           ; 4 bytes @ 0xF
   796  002F                     	ds	1
   797  0030                     sdPrvSimpleCommand@cmd:	
   798  0030                     measureBattery@t:	
   799                           ; 1 bytes @ 0x10
   800                           
   801                           
   802                           ; 3 bytes @ 0x10
   803  0030                     	ds	1
   804  0031                     sdPrvSimpleCommand@ret:	
   805  0031                     _hdrProcess$2012:	
   806                           ; 1 bytes @ 0x11
   807                           
   808                           
   809                           ; 2 bytes @ 0x11
   810  0031                     	ds	1
   811  0032                     ?_sdReadStart:	
   812  0032                     ?_sdPrvACMD:	
   813                           ; 1 bytes @ 0x12
   814                           
   815  0032                     sdReadStart@sec:	
   816                           ; 1 bytes @ 0x12
   817                           
   818  0032                     sdPrvACMD@param:	
   819                           ; 3 bytes @ 0x12
   820                           
   821                           
   822                           ; 4 bytes @ 0x12
   823  0032                     	ds	1
   824  0033                     hdrProcess@csz:	
   825                           
   826                           ; 1 bytes @ 0x13
   827  0033                     	ds	1
   828  0034                     hdrProcess@i:	
   829                           
   830                           ; 1 bytes @ 0x14
   831  0034                     	ds	1
   832  0035                     sdReadStart@v:	
   833  0035                     hdrProcess@t32:	
   834                           ; 1 bytes @ 0x15
   835                           
   836                           
   837                           ; 4 bytes @ 0x15
   838  0035                     	ds	1
   839  0036                     ?_ufatExtRead:	
   840  0036                     sdPrvACMD@cmd:	
   841                           ; 1 bytes @ 0x16
   842                           
   843  0036                     ufatExtRead@sector:	
   844                           ; 1 bytes @ 0x16
   845                           
   846                           
   847                           ; 4 bytes @ 0x16
   848  0036                     	ds	1
   849  0037                     sdPrvACMD@ret:	
   850                           
   851                           ; 1 bytes @ 0x17
   852  0037                     	ds	1
   853  0038                     sdPrvCardInit@sd:	
   854                           
   855                           ; 1 bytes @ 0x18
   856  0038                     	ds	1
   857  0039                     hdrProcess@j:	
   858  0039                     sdPrvCardInit@time:	
   859                           ; 1 bytes @ 0x19
   860                           
   861                           
   862                           ; 2 bytes @ 0x19
   863  0039                     	ds	1
   864  003A                     ??_play:	
   865  003A                     ufatExtRead@offset:	
   866                           ; 0 bytes @ 0x1A
   867                           
   868                           
   869                           ; 2 bytes @ 0x1A
   870  003A                     	ds	1
   871  003B                     _sdPrvCardInit$3364:	
   872                           
   873                           ; 2 bytes @ 0x1B
   874  003B                     	ds	1
   875  003C                     ufatExtRead@len:	
   876                           
   877                           ; 1 bytes @ 0x1C
   878  003C                     	ds	1
   879  003D                     ufatExtRead@buf:	
   880  003D                     sdPrvCardInit@first:	
   881                           ; 1 bytes @ 0x1D
   882                           
   883                           
   884                           ; 1 bytes @ 0x1D
   885  003D                     	ds	1
   886  003E                     ??_ufatParsePartitionTable:	
   887  003E                     ?_ufatGetNthFile:	
   888                           ; 0 bytes @ 0x1E
   889                           
   890  003E                     ?_ufatGetNextClus:	
   891                           ; 1 bytes @ 0x1E
   892                           
   893  003E                     play@ret:	
   894                           ; 2 bytes @ 0x1E
   895                           
   896  003E                     ufatGetNthFile@n:	
   897                           ; 1 bytes @ 0x1E
   898                           
   899  003E                     ufatGetNextClus@clus:	
   900                           ; 2 bytes @ 0x1E
   901                           
   902  003E                     sdPrvCardInit@param:	
   903                           ; 2 bytes @ 0x1E
   904                           
   905                           
   906                           ; 4 bytes @ 0x1E
   907  003E                     	ds	1
   908  003F                     play@start:	
   909                           
   910                           ; 1 bytes @ 0x1F
   911  003F                     	ds	1
   912  0040                     play@secListIdx:	
   913  0040                     ufatGetNthFile@name:	
   914                           ; 1 bytes @ 0x20
   915                           
   916  0040                     ufatGetNextClus@buf:	
   917                           ; 1 bytes @ 0x20
   918                           
   919                           
   920                           ; 2 bytes @ 0x20
   921  0040                     	ds	1
   922  0041                     ufatGetNthFile@sz:	
   923  0041                     play@sec:	
   924                           ; 1 bytes @ 0x21
   925                           
   926                           
   927                           ; 3 bytes @ 0x21
   928  0041                     	ds	1
   929  0042                     sdPrvCardInit@resp:	
   930  0042                     ufatGetNthFile@flags:	
   931                           ; 1 bytes @ 0x22
   932                           
   933  0042                     ufatGetNextClus@sec:	
   934                           ; 1 bytes @ 0x22
   935                           
   936  0042                     ufatParsePartitionTable@record:	
   937                           ; 4 bytes @ 0x22
   938                           
   939                           
   940                           ; 16 bytes @ 0x22
   941  0042                     	ds	1
   942  0043                     sdInit@tries:	
   943  0043                     ufatGetNthFile@id:	
   944                           ; 1 bytes @ 0x23
   945                           
   946                           
   947                           ; 1 bytes @ 0x23
   948  0043                     	ds	1
   949  0044                     play@t:	
   950  0044                     sdInit@SD:	
   951                           ; 1 bytes @ 0x24
   952                           
   953  0044                     ufatGetNthFile@i:	
   954                           ; 1 bytes @ 0x24
   955                           
   956                           
   957                           ; 2 bytes @ 0x24
   958  0044                     	ds	1
   959  0045                     play@j:	
   960  0045                     sdInit@v:	
   961                           ; 1 bytes @ 0x25
   962                           
   963                           
   964                           ; 1 bytes @ 0x25
   965  0045                     	ds	1
   966  0046                     play@i:	
   967  0046                     _ufatGetNthFile$3417:	
   968                           ; 1 bytes @ 0x26
   969                           
   970  0046                     ufatGetNextClus@offset:	
   971                           ; 2 bytes @ 0x26
   972                           
   973                           
   974                           ; 2 bytes @ 0x26
   975  0046                     	ds	1
   976  0047                     play@firstSec:	
   977                           
   978                           ; 3 bytes @ 0x27
   979  0047                     	ds	1
   980  0048                     ?_ufatGetNextSectorRange:	
   981  0048                     ufatGetNextSectorRange@len:	
   982                           ; 1 bytes @ 0x28
   983                           
   984  0048                     ufatGetNthFile@buf:	
   985                           ; 1 bytes @ 0x28
   986                           
   987                           
   988                           ; 4 bytes @ 0x28
   989  0048                     	ds	1
   990  0049                     ??_ufatGetNextSectorRange:	
   991                           
   992                           ; 0 bytes @ 0x29
   993  0049                     	ds	1
   994  004A                     play@numSec:	
   995                           
   996                           ; 2 bytes @ 0x2A
   997  004A                     	ds	1
   998  004B                     ufatGetNextSectorRange@first:	
   999                           
  1000                           ; 1 bytes @ 0x2B
  1001  004B                     	ds	1
  1002  004C                     ufatGetNextSectorRange@prev:	
  1003  004C                     ufatGetNthFile@sec:	
  1004                           ; 2 bytes @ 0x2C
  1005                           
  1006                           
  1007                           ; 4 bytes @ 0x2C
  1008  004C                     	ds	2
  1009  004E                     ufatGetNextSectorRange@next:	
  1010                           
  1011                           ; 2 bytes @ 0x2E
  1012  004E                     	ds	2
  1013  0050                     ufatGetNthFile@offset:	
  1014  0050                     ufatGetNextSectorRange@t:	
  1015                           ; 2 bytes @ 0x30
  1016                           
  1017                           
  1018                           ; 4 bytes @ 0x30
  1019  0050                     	ds	2
  1020  0052                     ufatParsePartitionTable@offset:	
  1021                           
  1022                           ; 2 bytes @ 0x32
  1023  0052                     	ds	2
  1024  0054                     ??_ufatMount:	
  1025                           
  1026                           ; 0 bytes @ 0x34
  1027  0054                     	ds	8
  1028  005C                     ufatMount@buf:	
  1029                           
  1030                           ; 13 bytes @ 0x3C
  1031  005C                     	ds	13
  1032                           
  1033                           	psect	text1555
  1034  002F                     __ptext1555:	
  1035 ;; =============== function _main ends ============
  1036                           
  1037                           
  1038 ;; *************** function _ufatGetNextSectorRange *****************
  1039 ;; Defined at:
  1040 ;;		line 161 in file "C:\Program Files\Microchip\Project\SingleChipPlayer\ufat\ufat.c"
  1041 ;; Parameters:    Size  Location     Type
  1042 ;;  first           1    wreg     PTR unsigned long 
  1043 ;;		 -> main@sec(4), 
  1044 ;;  len             1   40[BANK0 ] PTR unsigned long 
  1045 ;;		 -> main@sz(4), 
  1046 ;; Auto vars:     Size  Location     Type
  1047 ;;  first           1   43[BANK0 ] PTR unsigned long 
  1048 ;;		 -> main@sec(4), 
  1049 ;;  t               4   48[BANK0 ] unsigned long 
  1050 ;;  next            2   46[BANK0 ] unsigned short 
  1051 ;;  prev            2   44[BANK0 ] unsigned short 
  1052 ;; Return value:  Size  Location     Type
  1053 ;;                  1    wreg      unsigned char 
  1054 ;; Registers used:
  1055 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1056 ;; Tracked objects:
  1057 ;;		On entry : 1F/0
  1058 ;;		On exit  : 1F/1
  1059 ;;		Unchanged: FFFE0/0
  1060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1061 ;;      Params:         0       1       0       0
  1062 ;;      Locals:         0       9       0       0
  1063 ;;      Temps:          0       2       0       0
  1064 ;;      Totals:         0      12       0       0
  1065 ;;Total ram usage:       12 bytes
  1066 ;; Hardware stack levels used:    1
  1067 ;; Hardware stack levels required when called:    7
  1068 ;; This function calls:
  1069 ;;		_ufatGetNextClus
  1070 ;;		___lmul
  1071 ;; This function is called by:
  1072 ;;		_main
  1073 ;; This function uses a non-reentrant model
  1074 ;;
  1075  002F                     _ufatGetNextSectorRange:	
  1076                           
  1077                           ; Regs used in _ufatGetNextSectorRange: [wreg-status,0+pclath+cstack]
  1078                           ;ufatGetNextSectorRange@first stored from wreg
  1079  002F  00CB               	movwf	ufatGetNextSectorRange@first
  1080                           
  1081                           ;ufat.c: 163: u16 next = curClus, prev;
  1082  0030  0021               	movlb	1	; select bank1
  1083  0031  085C               	movf	(_curClus+1)^(0+128),w
  1084  0032  0020               	movlb	0	; select bank0
  1085  0033  00CF               	movwf	ufatGetNextSectorRange@next+1
  1086  0034  0021               	movlb	1	; select bank1
  1087  0035  085B               	movf	_curClus^(0+128),w
  1088  0036  0020               	movlb	0	; select bank0
  1089  0037  00CE               	movwf	ufatGetNextSectorRange@next
  1090                           
  1091                           ;ufat.c: 164: u32 t;
  1092                           ;ufat.c: 167: if(curClus == 0xffff) return 0;
  1093  0038  0021               	movlb	1	; select bank1
  1094  0039  0A5B               	incf	_curClus^(0+128),w
  1095  003A  1903               	skipnz
  1096  003B  0A5C               	incf	(_curClus+1)^(0+128),w
  1097  003C  1903               	btfsc	3,2
  1098  003D  3400               	retlw	0
  1099  003E  2844               	goto	l6697
  1100  003F                     l6703:	
  1101  003F  0A4E               	incf	ufatGetNextSectorRange@next,w
  1102  0040  1903               	skipnz
  1103  0041  0A4F               	incf	ufatGetNextSectorRange@next+1,w
  1104  0042  1903               	btfsc	3,2
  1105  0043  2860               	goto	l6705
  1106  0044                     l6697:	
  1107                           
  1108                           ;ufat.c: 171: prev = next;
  1109  0044  0020               	movlb	0	; select bank0
  1110  0045  084F               	movf	ufatGetNextSectorRange@next+1,w
  1111  0046  00CD               	movwf	ufatGetNextSectorRange@prev+1
  1112  0047  084E               	movf	ufatGetNextSectorRange@next,w
  1113  0048  00CC               	movwf	ufatGetNextSectorRange@prev
  1114                           
  1115                           ;ufat.c: 172: next = ufatGetNextClus(prev);
  1116  0049  084D               	movf	ufatGetNextSectorRange@prev+1,w
  1117  004A  00BF               	movwf	?_ufatGetNextClus+1
  1118  004B  084C               	movf	ufatGetNextSectorRange@prev,w
  1119  004C  00BE               	movwf	?_ufatGetNextClus
  1120  004D  20C9  3180         	fcall	_ufatGetNextClus
  1121  004F  083F               	movf	?_ufatGetNextClus+1,w
  1122  0050  00CF               	movwf	ufatGetNextSectorRange@next+1
  1123  0051  083E               	movf	?_ufatGetNextClus,w
  1124  0052  00CE               	movwf	ufatGetNextSectorRange@next
  1125                           
  1126                           ;ufat.c: 173: }while(next == prev + 1 && next != 0xffff);
  1127  0053  084C               	movf	ufatGetNextSectorRange@prev,w
  1128  0054  3E01               	addlw	1
  1129  0055  00C9               	movwf	??_ufatGetNextSectorRange
  1130  0056  3000               	movlw	0
  1131  0057  3D4D               	addwfc	ufatGetNextSectorRange@prev+1,w
  1132  0058  00CA               	movwf	??_ufatGetNextSectorRange+1
  1133  0059  064F               	xorwf	ufatGetNextSectorRange@next+1,w
  1134  005A  1D03               	skipz
  1135  005B  285E               	goto	u4805
  1136  005C  084E               	movf	ufatGetNextSectorRange@next,w
  1137  005D  0649               	xorwf	??_ufatGetNextSectorRange,w
  1138  005E                     u4805:	
  1139  005E  1903               	btfsc	3,2
  1140  005F  283F               	goto	l6703
  1141  0060                     l6705:	
  1142                           
  1143                           ;ufat.c: 178: t = prev + 1 - curClus;
  1144  0060  0021               	movlb	1	; select bank1
  1145  0061  085B               	movf	_curClus^(0+128),w
  1146  0062  0020               	movlb	0	; select bank0
  1147  0063  024C               	subwf	ufatGetNextSectorRange@prev,w
  1148  0064  00C9               	movwf	??_ufatGetNextSectorRange
  1149  0065  0021               	movlb	1	; select bank1
  1150  0066  085C               	movf	(_curClus+1)^(0+128),w
  1151  0067  0020               	movlb	0	; select bank0
  1152  0068  3B4D               	subwfb	ufatGetNextSectorRange@prev+1,w
  1153  0069  00CA               	movwf	??_ufatGetNextSectorRange+1
  1154  006A  0849               	movf	??_ufatGetNextSectorRange,w
  1155  006B  3E01               	addlw	1
  1156  006C  00D0               	movwf	ufatGetNextSectorRange@t
  1157  006D  3000               	movlw	0
  1158  006E  3D4A               	addwfc	??_ufatGetNextSectorRange+1,w
  1159                           
  1160                           ;ufat.c: 179: t *= secPerClus;
  1161  006F  211A  3180         	fcall	PL6	;call to abstracted procedure
  1162  0071  20A4  3180         	fcall	___lmul
  1163  0073  2138  3180         	fcall	PL10	;call to abstracted procedure
  1164                           
  1165                           ;ufat.c: 180: *len = t;
  1166  0075  0848               	movf	ufatGetNextSectorRange@len,w
  1167  0076  212D  3180         	fcall	PL9	;call to abstracted procedure
  1168                           
  1169                           ;ufat.c: 182: t = (curClus - 2);
  1170  0078  0021               	movlb	1	; select bank1
  1171  0079  085B               	movf	_curClus^(0+128),w
  1172  007A  3EFE               	addlw	254
  1173  007B  0020               	movlb	0	; select bank0
  1174  007C  00D0               	movwf	ufatGetNextSectorRange@t
  1175  007D  30FF               	movlw	255
  1176  007E  0021               	movlb	1	; select bank1
  1177  007F  3D5C               	addwfc	(_curClus+1)^(0+128),w
  1178  0080  0020               	movlb	0	; select bank0
  1179                           
  1180                           ;ufat.c: 183: t *= secPerClus;
  1181  0081  211A  3180         	fcall	PL6	;call to abstracted procedure
  1182  0083  20A4  3180         	fcall	___lmul
  1183  0085  2138  3180         	fcall	PL10	;call to abstracted procedure
  1184                           
  1185                           ;ufat.c: 184: t += dataSec;
  1186  0087  0021               	movlb	1	; select bank1
  1187  0088  0848               	movf	_dataSec^(0+128),w
  1188  0089  0020               	movlb	0	; select bank0
  1189  008A  07D0               	addwf	ufatGetNextSectorRange@t,f
  1190  008B  0021               	movlb	1	; select bank1
  1191  008C  0849               	movf	(_dataSec+1)^(0+128),w
  1192  008D  0020               	movlb	0	; select bank0
  1193  008E  3DD1               	addwfc	ufatGetNextSectorRange@t+1,f
  1194  008F  3000               	movlw	0
  1195  0090  3DD2               	addwfc	ufatGetNextSectorRange@t+2,f
  1196  0091  3DD3               	addwfc	ufatGetNextSectorRange@t+3,f
  1197                           
  1198                           ;ufat.c: 185: t += diskOffset;
  1199  0092  0869               	movf	_diskOffset,w
  1200  0093  07D0               	addwf	ufatGetNextSectorRange@t,f
  1201  0094  086A               	movf	_diskOffset+1,w
  1202  0095  3DD1               	addwfc	ufatGetNextSectorRange@t+1,f
  1203  0096  086B               	movf	_diskOffset+2,w
  1204  0097  3DD2               	addwfc	ufatGetNextSectorRange@t+2,f
  1205  0098  086C               	movf	_diskOffset+3,w
  1206  0099  3DD3               	addwfc	ufatGetNextSectorRange@t+3,f
  1207                           
  1208                           ;ufat.c: 186: *first = t;
  1209  009A  084B               	movf	ufatGetNextSectorRange@first,w
  1210  009B  212D               	fcall	PL9	;call to abstracted procedure
  1211                           
  1212                           ;ufat.c: 188: curClus = next;
  1213  009C  084F               	movf	ufatGetNextSectorRange@next+1,w
  1214  009D  0021               	movlb	1	; select bank1
  1215  009E  00DC               	movwf	(_curClus+1)^(0+128)
  1216  009F  0020               	movlb	0	; select bank0
  1217  00A0  084E               	movf	ufatGetNextSectorRange@next,w
  1218  00A1  0021               	movlb	1	; select bank1
  1219  00A2  00DB               	movwf	_curClus^(0+128)
  1220                           
  1221                           ;ufat.c: 190: return 1;
  1222  00A3  3401               	retlw	1
  1223  00A4                     __end_of_ufatGetNextSectorRange:	
  1224  00A4                     __ptext1584:	
  1225 ;; =============== function ___lldiv ends ============
  1226                           
  1227                           
  1228 ;; *************** function ___lmul *****************
  1229 ;; Defined at:
  1230 ;;		line 3 in file "C:\Program Files\HI-TECH Software\PICC\9.71a\sources\lmul.c"
  1231 ;; Parameters:    Size  Location     Type
  1232 ;;  multiplier      4    2[COMMON] unsigned long 
  1233 ;;  multiplicand    4    6[COMMON] unsigned long 
  1234 ;; Auto vars:     Size  Location     Type
  1235 ;;  product         4    0[BANK0 ] unsigned long 
  1236 ;; Return value:  Size  Location     Type
  1237 ;;                  4    2[COMMON] unsigned long 
  1238 ;; Registers used:
  1239 ;;		wreg, status,2, status,0
  1240 ;; Tracked objects:
  1241 ;;		On entry : 1F/0
  1242 ;;		On exit  : 1F/0
  1243 ;;		Unchanged: FFFE0/0
  1244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1245 ;;      Params:         8       0       0       0
  1246 ;;      Locals:         0       4       0       0
  1247 ;;      Temps:          0       0       0       0
  1248 ;;      Totals:         8       4       0       0
  1249 ;;Total ram usage:       12 bytes
  1250 ;; Hardware stack levels used:    1
  1251 ;; Hardware stack levels required when called:    1
  1252 ;; This function calls:
  1253 ;;		Nothing
  1254 ;; This function is called by:
  1255 ;;		_rnd
  1256 ;;		_ufatGetNextSectorRange
  1257 ;; This function uses a non-reentrant model
  1258 ;;
  1259  00A4                     ___lmul:	
  1260                           
  1261                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  1262  00A4  01A0               	clrf	___lmul@product
  1263  00A5  01A1               	clrf	___lmul@product+1
  1264  00A6  01A2               	clrf	___lmul@product+2
  1265  00A7  01A3               	clrf	___lmul@product+3
  1266  00A8                     l2602:	
  1267  00A8  1C72               	btfss	___lmul@multiplier,0
  1268  00A9  28B2               	goto	l4601
  1269  00AA  0876               	movf	___lmul@multiplicand,w
  1270  00AB  07A0               	addwf	___lmul@product,f
  1271  00AC  0877               	movf	___lmul@multiplicand+1,w
  1272  00AD  3DA1               	addwfc	___lmul@product+1,f
  1273  00AE  0878               	movf	___lmul@multiplicand+2,w
  1274  00AF  3DA2               	addwfc	___lmul@product+2,f
  1275  00B0  0879               	movf	___lmul@multiplicand+3,w
  1276  00B1  3DA3               	addwfc	___lmul@product+3,f
  1277  00B2                     l4601:	
  1278  00B2  35F6               	lslf	___lmul@multiplicand,f
  1279  00B3  0DF7               	rlf	___lmul@multiplicand+1,f
  1280  00B4  0DF8               	rlf	___lmul@multiplicand+2,f
  1281  00B5  0DF9               	rlf	___lmul@multiplicand+3,f
  1282  00B6  36F5               	lsrf	___lmul@multiplier+3,f
  1283  00B7  0CF4               	rrf	___lmul@multiplier+2,f
  1284  00B8  0CF3               	rrf	___lmul@multiplier+1,f
  1285  00B9  0CF2               	rrf	___lmul@multiplier,f
  1286  00BA  0875               	movf	___lmul@multiplier+3,w
  1287  00BB  0474               	iorwf	___lmul@multiplier+2,w
  1288  00BC  0473               	iorwf	___lmul@multiplier+1,w
  1289  00BD  0472               	iorwf	___lmul@multiplier,w
  1290  00BE  1D03               	skipz
  1291  00BF  28A8               	goto	l2602
  1292  00C0  0823               	movf	___lmul@product+3,w
  1293  00C1  00F5               	movwf	?___lmul+3
  1294  00C2  0822               	movf	___lmul@product+2,w
  1295  00C3  00F4               	movwf	?___lmul+2
  1296  00C4  0821               	movf	___lmul@product+1,w
  1297  00C5  00F3               	movwf	?___lmul+1
  1298  00C6  0820               	movf	___lmul@product,w
  1299  00C7  00F2               	movwf	?___lmul
  1300  00C8  0008               	return
  1301  00C9                     __end_of___lmul:	
  1302  00C9                     __ptext1557:	
  1303 ;; =============== function _ufatMount ends ============
  1304                           
  1305                           
  1306 ;; *************** function _ufatGetNextClus *****************
  1307 ;; Defined at:
  1308 ;;		line 145 in file "C:\Program Files\Microchip\Project\SingleChipPlayer\ufat\ufat.c"
  1309 ;; Parameters:    Size  Location     Type
  1310 ;;  clus            2   30[BANK0 ] unsigned short 
  1311 ;; Auto vars:     Size  Location     Type
  1312 ;;  sec             4   34[BANK0 ] unsigned long 
  1313 ;;  buf             2   32[BANK0 ] unsigned char [2]
  1314 ;;  offset          2   38[BANK0 ] unsigned short 
  1315 ;; Return value:  Size  Location     Type
  1316 ;;                  2   30[BANK0 ] unsigned short 
  1317 ;; Registers used:
  1318 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1319 ;; Tracked objects:
  1320 ;;		On entry : 1F/0
  1321 ;;		On exit  : 1F/0
  1322 ;;		Unchanged: FFFE0/0
  1323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1324 ;;      Params:         0       2       0       0
  1325 ;;      Locals:         0       8       0       0
  1326 ;;      Temps:          0       0       0       0
  1327 ;;      Totals:         0      10       0       0
  1328 ;;Total ram usage:       10 bytes
  1329 ;; Hardware stack levels used:    1
  1330 ;; Hardware stack levels required when called:    6
  1331 ;; This function calls:
  1332 ;;		_ufatExtRead
  1333 ;;		_ufatGetU16
  1334 ;; This function is called by:
  1335 ;;		_ufatGetNextSectorRange
  1336 ;; This function uses a non-reentrant model
  1337 ;;
  1338  00C9                     _ufatGetNextClus:	
  1339                           
  1340                           ;ufat.c: 147: char buf[2];
  1341                           ;ufat.c: 148: u32 sec = diskOffset + fatSec;
  1342                           
  1343                           ; Regs used in _ufatGetNextClus: [wreg-status,0+pclath+cstack]
  1344  00C9  0021               	movlb	1	; select bank1
  1345  00CA  084A               	movf	_fatSec^(0+128),w
  1346  00CB  0020               	movlb	0	; select bank0
  1347  00CC  00C2               	movwf	ufatGetNextClus@sec
  1348  00CD  0021               	movlb	1	; select bank1
  1349  00CE  084B               	movf	(_fatSec+1)^(0+128),w
  1350  00CF  0020               	movlb	0	; select bank0
  1351  00D0  00C3               	movwf	ufatGetNextClus@sec+1
  1352  00D1  01C4               	clrf	ufatGetNextClus@sec+2
  1353  00D2  01C5               	clrf	ufatGetNextClus@sec+3
  1354  00D3  0869               	movf	_diskOffset,w
  1355  00D4  07C2               	addwf	ufatGetNextClus@sec,f
  1356  00D5  086A               	movf	_diskOffset+1,w
  1357  00D6  3DC3               	addwfc	ufatGetNextClus@sec+1,f
  1358  00D7  086B               	movf	_diskOffset+2,w
  1359  00D8  3DC4               	addwfc	ufatGetNextClus@sec+2,f
  1360  00D9  086C               	movf	_diskOffset+3,w
  1361  00DA  3DC5               	addwfc	ufatGetNextClus@sec+3,f
  1362                           
  1363                           ;ufat.c: 149: u16 offset;
  1364                           ;ufat.c: 151: sec += clus / (512 / 2);
  1365  00DB  083F               	movf	ufatGetNextClus@clus+1,w
  1366  00DC  07C2               	addwf	ufatGetNextClus@sec,f
  1367  00DD  3001               	movlw	1
  1368  00DE  1803               	skipnc
  1369  00DF  07C3               	addwf	ufatGetNextClus@sec+1,f
  1370  00E0  1803               	skipnc
  1371  00E1  07C4               	addwf	ufatGetNextClus@sec+2,f
  1372  00E2  1803               	skipnc
  1373  00E3  07C5               	addwf	ufatGetNextClus@sec+3,f
  1374                           
  1375                           ;ufat.c: 152: offset = (clus % (512 / 2)) * 2;
  1376  00E4  083F               	movf	ufatGetNextClus@clus+1,w
  1377  00E5  00C7               	movwf	ufatGetNextClus@offset+1
  1378  00E6  083E               	movf	ufatGetNextClus@clus,w
  1379  00E7  00C6               	movwf	ufatGetNextClus@offset
  1380  00E8  30FF               	movlw	255
  1381  00E9  05C6               	andwf	ufatGetNextClus@offset,f
  1382  00EA  01C7               	clrf	ufatGetNextClus@offset+1
  1383  00EB  35C6               	lslf	ufatGetNextClus@offset,f
  1384  00EC  0DC7               	rlf	ufatGetNextClus@offset+1,f
  1385                           
  1386                           ;ufat.c: 154: if(!ufatExtRead(sec, offset, 2, buf)) return 0xffff;
  1387  00ED  0845               	movf	ufatGetNextClus@sec+3,w
  1388  00EE  00B9               	movwf	?_ufatExtRead+3
  1389  00EF  0844               	movf	ufatGetNextClus@sec+2,w
  1390  00F0  00B8               	movwf	?_ufatExtRead+2
  1391  00F1  0843               	movf	ufatGetNextClus@sec+1,w
  1392  00F2  00B7               	movwf	?_ufatExtRead+1
  1393  00F3  0842               	movf	ufatGetNextClus@sec,w
  1394  00F4  00B6               	movwf	?_ufatExtRead
  1395  00F5  0847               	movf	ufatGetNextClus@offset+1,w
  1396  00F6  00BB               	movwf	?_ufatExtRead+5
  1397  00F7  0846               	movf	ufatGetNextClus@offset,w
  1398  00F8  00BA               	movwf	?_ufatExtRead+4
  1399  00F9  3002               	movlw	2
  1400  00FA  00BC               	movwf	?_ufatExtRead+6
  1401  00FB  3040               	movlw	ufatGetNextClus@buf& (0+255)
  1402  00FC  00BD               	movwf	?_ufatExtRead+7
  1403  00FD  318C  2436  3180   	fcall	_ufatExtRead
  1404  0100  3800               	iorlw	0
  1405  0101  1D03               	skipz
  1406  0102  2908               	goto	l6633
  1407  0103                     l6629:	
  1408  0103  30FF               	movlw	255
  1409  0104  0020               	movlb	0	; select bank0
  1410  0105  00BE               	movwf	?_ufatGetNextClus
  1411  0106  00BF               	movwf	?_ufatGetNextClus+1
  1412  0107  0008               	return
  1413  0108                     l6633:	
  1414                           
  1415                           ;ufat.c: 156: clus = ufatGetU16(buf, 0);
  1416  0108  01F2               	clrf	?_ufatGetU16
  1417  0109  3040               	movlw	ufatGetNextClus@buf& (0+255)
  1418  010A  318F  2778  3180   	fcall	_ufatGetU16
  1419  010D  0873               	movf	?_ufatGetU16+1,w
  1420  010E  0020               	movlb	0	; select bank0
  1421  010F  00BF               	movwf	ufatGetNextClus@clus+1
  1422  0110  0872               	movf	?_ufatGetU16,w
  1423  0111  00BE               	movwf	ufatGetNextClus@clus
  1424                           
  1425                           ;ufat.c: 157: if(clus >= 0xfff8) return 0xffff;
  1426  0112  30FF               	movlw	255
  1427  0113  023F               	subwf	ufatGetNextClus@clus+1,w
  1428  0114  30F8               	movlw	248
  1429  0115  1903               	skipnz
  1430  0116  023E               	subwf	ufatGetNextClus@clus,w
  1431  0117  1C03               	skipc
  1432                           
  1433                           ;ufat.c: 159: return clus;
  1434  0118  0008               	return
  1435  0119  2903               	goto	l6629
  1436  011A                     __end_of_ufatGetNextClus:	
  1437  011A                     PL6:	
  1438  011A  00D1               	movwf	ufatGetNextSectorRange@t+1
  1439  011B  01D2               	clrf	ufatGetNextSectorRange@t+2
  1440  011C  01D3               	clrf	ufatGetNextSectorRange@t+3
  1441  011D  0021               	movlb	1	; select bank1
  1442  011E  0855               	movf	_secPerClus^(0+128),w
  1443  011F  00F2               	movwf	?___lmul
  1444  0120  01F3               	clrf	?___lmul+1
  1445  0121  01F4               	clrf	?___lmul+2
  1446  0122  01F5               	clrf	?___lmul+3
  1447  0123  0020               	movlb	0	; select bank0
  1448  0124  0853               	movf	ufatGetNextSectorRange@t+3,w
  1449  0125  00F9               	movwf	?___lmul+7
  1450  0126  0852               	movf	ufatGetNextSectorRange@t+2,w
  1451  0127  00F8               	movwf	?___lmul+6
  1452  0128  0851               	movf	ufatGetNextSectorRange@t+1,w
  1453  0129  00F7               	movwf	?___lmul+5
  1454  012A  0850               	movf	ufatGetNextSectorRange@t,w
  1455  012B  00F6               	movwf	?___lmul+4
  1456  012C  0008               	return
  1457  012D                     PL9:	
  1458  012D  0086               	movwf	6
  1459  012E  0187               	clrf	7
  1460  012F  0850               	movf	ufatGetNextSectorRange@t,w
  1461  0130  3FC0               	movwi [0]fsr1
  1462  0131  0851               	movf	ufatGetNextSectorRange@t+1,w
  1463  0132  3FC1               	movwi [1]fsr1
  1464  0133  0852               	movf	ufatGetNextSectorRange@t+2,w
  1465  0134  3FC2               	movwi [2]fsr1
  1466  0135  0853               	movf	ufatGetNextSectorRange@t+3,w
  1467  0136  3FC3               	movwi [3]fsr1
  1468  0137  0008               	return
  1469  0138                     PL10:	
  1470  0138  0875               	movf	?___lmul+3,w
  1471  0139  00D3               	movwf	ufatGetNextSectorRange@t+3
  1472  013A  0874               	movf	?___lmul+2,w
  1473  013B  00D2               	movwf	ufatGetNextSectorRange@t+2
  1474  013C  0873               	movf	?___lmul+1,w
  1475  013D  00D1               	movwf	ufatGetNextSectorRange@t+1
  1476  013E  0872               	movf	?___lmul,w
  1477  013F  00D0               	movwf	ufatGetNextSectorRange@t
  1478  0140  0008               	return
  1479                           
  1480                           	psect	text1558
  1481  0218                     __ptext1558:	
  1482 ;; =============== function _ufatGetNextClus ends ============
  1483                           
  1484                           
  1485 ;; *************** function _ufatParsePartitionTable *****************
  1486 ;; Defined at:
  1487 ;;		line 24 in file "C:\Program Files\Microchip\Project\SingleChipPlayer\ufat\ufat.c"
  1488 ;; Parameters:    Size  Location     Type
  1489 ;;		None
  1490 ;; Auto vars:     Size  Location     Type
  1491 ;;  record         16   34[BANK0 ] unsigned char [16]
  1492 ;;  offset          2   50[BANK0 ] unsigned short 
  1493 ;; Return value:  Size  Location     Type
  1494 ;;                  1    wreg      unsigned char 
  1495 ;; Registers used:
  1496 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, pclath, cstack
  1497 ;; Tracked objects:
  1498 ;;		On entry : 1F/0
  1499 ;;		On exit  : 0/0
  1500 ;;		Unchanged: 0/0
  1501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1502 ;;      Params:         0       0       0       0
  1503 ;;      Locals:         0      18       0       0
  1504 ;;      Temps:          0       4       0       0
  1505 ;;      Totals:         0      22       0       0
  1506 ;;Total ram usage:       22 bytes
  1507 ;; Hardware stack levels used:    1
  1508 ;; Hardware stack levels required when called:    6
  1509 ;; This function calls:
  1510 ;;		_ufatExtRead
  1511 ;;		_ufatMount
  1512 ;; This function is called by:
  1513 ;;		_ufatMount
  1514 ;; This function uses a non-reentrant model
  1515 ;;
  1516  0218                     _ufatParsePartitionTable:	
  1517  0218                     l6579:	
  1518                           ; Regs used in _ufatParsePartitionTable: [allreg]
  1519                           
  1520                           
  1521                           ;ufat.c: 26: char record[16];
  1522                           ;ufat.c: 27: u16 offset;
  1523                           ;ufat.c: 29: if(diskOffset) return 0;
  1524  0218  086C               	movf	_diskOffset+3,w
  1525  0219  046B               	iorwf	_diskOffset+2,w
  1526  021A  046A               	iorwf	_diskOffset+1,w
  1527  021B  0469               	iorwf	_diskOffset,w
  1528  021C  1D03               	btfss	3,2
  1529  021D  3400               	retlw	0
  1530                           
  1531                           ;ufat.c: 31: for(offset = 0x1BE; offset < 0x1FE; offset += 16){
  1532  021E  30BE               	movlw	190
  1533  021F  00D2               	movwf	ufatParsePartitionTable@offset
  1534  0220  3001               	movlw	1
  1535  0221  00D3               	movwf	ufatParsePartitionTable@offset+1
  1536  0222                     l6589:	
  1537                           
  1538                           ;ufat.c: 33: if(!ufatExtRead(0, offset, 16, record)) return 0;
  1539  0222  01B6               	clrf	?_ufatExtRead
  1540  0223  01B7               	clrf	?_ufatExtRead+1
  1541  0224  01B8               	clrf	?_ufatExtRead+2
  1542  0225  01B9               	clrf	?_ufatExtRead+3
  1543  0226  0853               	movf	ufatParsePartitionTable@offset+1,w
  1544  0227  00BB               	movwf	?_ufatExtRead+5
  1545  0228  0852               	movf	ufatParsePartitionTable@offset,w
  1546  0229  00BA               	movwf	?_ufatExtRead+4
  1547  022A  3010               	movlw	16
  1548  022B  00BC               	movwf	?_ufatExtRead+6
  1549  022C  3042               	movlw	ufatParsePartitionTable@record& (0+255)
  1550  022D  00BD               	movwf	?_ufatExtRead+7
  1551  022E  318C  2436  3182   	fcall	_ufatExtRead
  1552  0231  3800               	iorlw	0
  1553  0232  1903               	btfsc	3,2
  1554  0233  3400               	retlw	0
  1555                           
  1556                           ;ufat.c: 34: if(record[4] != 1 && record[4] != 4 && record[4] != 6 && record[4] != 0x0B 
      +                          && record[4] != 0x0C && record[4] != 0x0E) continue;
  1557  0234  0020               	movlb	0	; select bank0
  1558  0235  0346               	decf	ufatParsePartitionTable@record+4,w
  1559  0236  1903               	skipnz
  1560  0237  2A4C               	goto	l6609
  1561  0238  0846               	movf	ufatParsePartitionTable@record+4,w
  1562  0239  3A04               	xorlw	4
  1563  023A  1903               	skipnz
  1564  023B  2A4C               	goto	l6609
  1565  023C  0846               	movf	ufatParsePartitionTable@record+4,w
  1566  023D  3A06               	xorlw	6
  1567  023E  1903               	skipnz
  1568  023F  2A4C               	goto	l6609
  1569  0240  0846               	movf	ufatParsePartitionTable@record+4,w
  1570  0241  3A0B               	xorlw	11
  1571  0242  1903               	skipnz
  1572  0243  2A4C               	goto	l6609
  1573  0244  0846               	movf	ufatParsePartitionTable@record+4,w
  1574  0245  3A0C               	xorlw	12
  1575  0246  1903               	skipnz
  1576  0247  2A4C               	goto	l6609
  1577  0248  0846               	movf	ufatParsePartitionTable@record+4,w
  1578  0249  3A0E               	xorlw	14
  1579  024A  1D03               	btfss	3,2
  1580  024B  2A6D               	goto	l6617
  1581  024C                     l6609:	
  1582                           
  1583                           ;ufat.c: 37: diskOffset = record[11];
  1584  024C  084D               	movf	ufatParsePartitionTable@record+11,w
  1585  024D  00E9               	movwf	_diskOffset
  1586  024E  01EA               	clrf	_diskOffset+1
  1587  024F  01EB               	clrf	_diskOffset+2
  1588  0250  01EC               	clrf	_diskOffset+3
  1589                           
  1590                           ;ufat.c: 38: diskOffset = (diskOffset << 8) | record[10];
  1591  0251  227A  3182         	fcall	PL3	;call to abstracted procedure
  1592  0253  084C               	movf	ufatParsePartitionTable@record+10,w
  1593  0254  043E               	iorwf	??_ufatParsePartitionTable,w
  1594                           
  1595                           ;ufat.c: 39: diskOffset = (diskOffset << 8) | record[9];
  1596  0255  2289  3182         	fcall	PL5	;call to abstracted procedure
  1597  0257  227A  3182         	fcall	PL3	;call to abstracted procedure
  1598  0259  084B               	movf	ufatParsePartitionTable@record+9,w
  1599  025A  043E               	iorwf	??_ufatParsePartitionTable,w
  1600                           
  1601                           ;ufat.c: 40: diskOffset = (diskOffset << 8) | record[8];
  1602  025B  2289  3182         	fcall	PL5	;call to abstracted procedure
  1603  025D  227A               	fcall	PL3	;call to abstracted procedure
  1604  025E  084A               	movf	ufatParsePartitionTable@record+8,w
  1605  025F  043E               	iorwf	??_ufatParsePartitionTable,w
  1606  0260  00E9               	movwf	_diskOffset
  1607  0261  083F               	movf	??_ufatParsePartitionTable+1,w
  1608  0262  00EA               	movwf	_diskOffset+1
  1609  0263  0840               	movf	??_ufatParsePartitionTable+2,w
  1610  0264  00EB               	movwf	_diskOffset+2
  1611  0265  0841               	movf	??_ufatParsePartitionTable+3,w
  1612  0266  00EC               	movwf	_diskOffset+3
  1613                           
  1614                           ;ufat.c: 41: if(ufatMount()) return 1;
  1615  0267  318E  26DB  3182   	fcall	_ufatMount
  1616  026A  3A00               	xorlw	0
  1617  026B  1D03               	btfss	3,2
  1618  026C  3401               	retlw	1
  1619  026D                     l6617:	
  1620  026D  3010               	movlw	16
  1621  026E  0020               	movlb	0	; select bank0
  1622  026F  07D2               	addwf	ufatParsePartitionTable@offset,f
  1623  0270  1803               	skipnc
  1624  0271  0AD3               	incf	ufatParsePartitionTable@offset+1,f
  1625  0272  3001               	movlw	1
  1626  0273  0253               	subwf	ufatParsePartitionTable@offset+1,w
  1627  0274  30FE               	movlw	254
  1628  0275  1903               	skipnz
  1629  0276  0252               	subwf	ufatParsePartitionTable@offset,w
  1630  0277  1803               	btfsc	3,0
  1631  0278  3400               	retlw	0
  1632  0279  2A22               	goto	l6589
  1633  027A                     __end_of_ufatParsePartitionTable:	
  1634  027A                     PL3:	
  1635  027A  00BE               	movwf	??_ufatParsePartitionTable
  1636  027B  086A               	movf	_diskOffset+1,w
  1637  027C  00BF               	movwf	??_ufatParsePartitionTable+1
  1638  027D  086B               	movf	_diskOffset+2,w
  1639  027E  00C0               	movwf	??_ufatParsePartitionTable+2
  1640  027F  086C               	movf	_diskOffset+3,w
  1641  0280  00C1               	movwf	??_ufatParsePartitionTable+3
  1642  0281  0840               	movf	??_ufatParsePartitionTable+2,w
  1643  0282  00C1               	movwf	??_ufatParsePartitionTable+3
  1644  0283  083F               	movf	??_ufatParsePartitionTable+1,w
  1645  0284  00C0               	movwf	??_ufatParsePartitionTable+2
  1646  0285  083E               	movf	??_ufatParsePartitionTable,w
  1647  0286  00BF               	movwf	??_ufatParsePartitionTable+1
  1648  0287  01BE               	clrf	??_ufatParsePartitionTable
  1649  0288  0008               	return
  1650  0289                     PL5:	
  1651  0289  00E9               	movwf	_diskOffset
  1652  028A  083F               	movf	??_ufatParsePartitionTable+1,w
  1653  028B  00EA               	movwf	_diskOffset+1
  1654  028C  0840               	movf	??_ufatParsePartitionTable+2,w
  1655  028D  00EB               	movwf	_diskOffset+2
  1656  028E  0841               	movf	??_ufatParsePartitionTable+3,w
  1657  028F  00EC               	movwf	_diskOffset+3
  1658  0290  0869               	movf	_diskOffset,w
  1659  0291  0008               	return
  1660                           
  1661                           	psect	text1561
  1662  04A9                     __ptext1561:	
  1663 ;; =============== function _sdInit ends ============
  1664                           
  1665                           
  1666 ;; *************** function _ufatExtReadTerminate *****************
  1667 ;; Defined at:
  1668 ;;		line 232 in file "C:\Program Files\Microchip\Project\SingleChipPlayer\main.c"
  1669 ;; Parameters:    Size  Location     Type
  1670 ;;		None
  1671 ;; Auto vars:     Size  Location     Type
  1672 ;;		None
  1673 ;; Return value:  Size  Location     Type
  1674 ;;		None               void
  1675 ;; Registers used:
  1676 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1677 ;; Tracked objects:
  1678 ;;		On entry : 1F/0
  1679 ;;		On exit  : 1E/0
  1680 ;;		Unchanged: FFFE0/0
  1681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1682 ;;      Params:         0       0       0       0
  1683 ;;      Locals:         0       0       0       0
  1684 ;;      Temps:          0       0       0       0
  1685 ;;      Totals:         0       0       0       0
  1686 ;;Total ram usage:        0 bytes
  1687 ;; Hardware stack levels used:    1
  1688 ;; Hardware stack levels required when called:    6
  1689 ;; This function calls:
  1690 ;;		_ufatExtRead
  1691 ;; This function is called by:
  1692 ;;		_main
  1693 ;; This function uses a non-reentrant model
  1694 ;;
  1695  04A9                     _ufatExtReadTerminate:	
  1696                           
  1697                           ;main.c: 235: ufatExtRead(0, 512, 0, ((void*)0));
  1698                           
  1699                           ; Regs used in _ufatExtReadTerminate: [wreg+fsr1l-status,0+pclath+cstack]
  1700  04A9  01B6               	clrf	?_ufatExtRead
  1701  04AA  01B7               	clrf	?_ufatExtRead+1
  1702  04AB  01B8               	clrf	?_ufatExtRead+2
  1703  04AC  01B9               	clrf	?_ufatExtRead+3
  1704  04AD  01BA               	clrf	?_ufatExtRead+4
  1705  04AE  3002               	movlw	2
  1706  04AF  00BB               	movwf	?_ufatExtRead+5
  1707  04B0  01BC               	clrf	?_ufatExtRead+6
  1708  04B1  01BD               	clrf	?_ufatExtRead+7
  1709  04B2  318C  2C36         	ljmp	l6255
  1710  04B4                     __end_of_ufatExtReadTerminate:	
  1711                           
  1712                           	psect	text1562
  1713  0292                     __ptext1562:	
  1714 ;; =============== function _ufatExtReadTerminate ends ============
  1715                           
  1716                           
  1717 ;; *************** function _sdPrvCardInit *****************
  1718 ;; Defined at:
  1719 ;;		line 130 in file "C:\Program Files\Microchip\Project\SingleChipPlayer\SD.c"
  1720 ;; Parameters:    Size  Location     Type
  1721 ;;  sd              1    wreg     unsigned char 
  1722 ;; Auto vars:     Size  Location     Type
  1723 ;;  sd              1   24[BANK0 ] unsigned char 
  1724 ;;  param           4   30[BANK0 ] unsigned long 
  1725 ;;  time            2   25[BANK0 ] unsigned short 
  1726 ;;  resp            1   34[BANK0 ] unsigned char 
  1727 ;;  first           1   29[BANK0 ] unsigned char 
  1728 ;; Return value:  Size  Location     Type
  1729 ;;                  1    wreg      unsigned char 
  1730 ;; Registers used:
  1731 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1732 ;; Tracked objects:
  1733 ;;		On entry : 1F/0
  1734 ;;		On exit  : 1F/0
  1735 ;;		Unchanged: FFFE0/0
  1736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1737 ;;      Params:         0       0       0       0
  1738 ;;      Locals:         0      11       0       0
  1739 ;;      Temps:          0       0       0       0
  1740 ;;      Totals:         0      11       0       0
  1741 ;;Total ram usage:       11 bytes
  1742 ;; Hardware stack levels used:    1
  1743 ;; Hardware stack levels required when called:    5
  1744 ;; This function calls:
  1745 ;;		_sdPrvSimpleCommand
  1746 ;;		_sdPrvACMD
  1747 ;; This function is called by:
  1748 ;;		_sdInit
  1749 ;; This function uses a non-reentrant model
  1750 ;;
  1751  0292                     _sdPrvCardInit:	
  1752                           
  1753                           ; Regs used in _sdPrvCardInit: [wreg+fsr1l-status,0+pclath+cstack]
  1754                           ;sdPrvCardInit@sd stored from wreg
  1755  0292  00B8               	movwf	sdPrvCardInit@sd
  1756                           
  1757                           ;SD.c: 132: UInt16 time = 0;
  1758  0293  01B9               	clrf	sdPrvCardInit@time
  1759  0294  01BA               	clrf	sdPrvCardInit@time+1
  1760                           
  1761                           ;SD.c: 133: UInt8 resp;
  1762                           ;SD.c: 134: Boolean first = 1;
  1763  0295  01BD               	clrf	sdPrvCardInit@first
  1764  0296  0ABD               	incf	sdPrvCardInit@first,f
  1765                           
  1766                           ;SD.c: 135: UInt32 param;
  1767                           ;SD.c: 137: param = 0;
  1768  0297  01BE               	clrf	sdPrvCardInit@param
  1769  0298  01BF               	clrf	sdPrvCardInit@param+1
  1770  0299  01C0               	clrf	sdPrvCardInit@param+2
  1771  029A  01C1               	clrf	sdPrvCardInit@param+3
  1772  029B                     l6421:	
  1773                           ;SD.c: 139: while(time++ < 5000UL){
  1774                           
  1775  029B  0AB9               	incf	sdPrvCardInit@time,f
  1776  029C  1903               	skipnz
  1777  029D  0ABA               	incf	sdPrvCardInit@time+1,f
  1778  029E  3013               	movlw	19
  1779  029F  023A               	subwf	sdPrvCardInit@time+1,w
  1780  02A0  3089               	movlw	137
  1781  02A1  1903               	skipnz
  1782  02A2  0239               	subwf	sdPrvCardInit@time,w
  1783  02A3  1803               	btfsc	3,0
  1784  02A4  3400               	retlw	0
  1785                           
  1786                           ;SD.c: 141: resp = sd ? sdPrvACMD(41, param) : sdPrvSimpleCommand(1, param, 1);
  1787  02A5  0841               	movf	sdPrvCardInit@param+3,w
  1788  02A6  00AE               	movwf	?_sdPrvSimpleCommand+3
  1789  02A7  0840               	movf	sdPrvCardInit@param+2,w
  1790  02A8  00AD               	movwf	?_sdPrvSimpleCommand+2
  1791  02A9  083F               	movf	sdPrvCardInit@param+1,w
  1792  02AA  00AC               	movwf	?_sdPrvSimpleCommand+1
  1793  02AB  083E               	movf	sdPrvCardInit@param,w
  1794  02AC  00AB               	movwf	?_sdPrvSimpleCommand
  1795  02AD  01AF               	clrf	?_sdPrvSimpleCommand+4
  1796  02AE  0AAF               	incf	?_sdPrvSimpleCommand+4,f
  1797  02AF  3001               	movlw	1
  1798  02B0  318E  2681  3182   	fcall	_sdPrvSimpleCommand
  1799  02B3  00BB               	movwf	_sdPrvCardInit$3364
  1800  02B4  01BC               	clrf	_sdPrvCardInit$3364+1
  1801  02B5  0838               	movf	sdPrvCardInit@sd,w
  1802  02B6  1903               	btfsc	3,2
  1803  02B7  2AC5               	goto	l6405
  1804  02B8  0841               	movf	sdPrvCardInit@param+3,w
  1805  02B9  00B5               	movwf	?_sdPrvACMD+3
  1806  02BA  0840               	movf	sdPrvCardInit@param+2,w
  1807  02BB  00B4               	movwf	?_sdPrvACMD+2
  1808  02BC  083F               	movf	sdPrvCardInit@param+1,w
  1809  02BD  00B3               	movwf	?_sdPrvACMD+1
  1810  02BE  083E               	movf	sdPrvCardInit@param,w
  1811  02BF  00B2               	movwf	?_sdPrvACMD
  1812  02C0  3029               	movlw	41
  1813  02C1  22D2  3182         	fcall	_sdPrvACMD
  1814  02C3  00BB               	movwf	_sdPrvCardInit$3364
  1815  02C4  01BC               	clrf	_sdPrvCardInit$3364+1
  1816  02C5                     l6405:	
  1817  02C5  083B               	movf	_sdPrvCardInit$3364,w
  1818  02C6  00C2               	movwf	sdPrvCardInit@resp
  1819                           
  1820                           ;SD.c: 143: if(resp & 0x80) break;
  1821  02C7  1BC2               	btfsc	sdPrvCardInit@resp,7
  1822  02C8  3400               	retlw	0
  1823                           
  1824                           ;SD.c: 145: if(first){
  1825  02C9  083D               	movf	sdPrvCardInit@first,w
  1826  02CA  1903               	btfsc	3,2
  1827  02CB  2ACF               	goto	l2398
  1828                           
  1829                           ;SD.c: 147: param |= 0x00200000UL;
  1830  02CC  16C0               	bsf	sdPrvCardInit@param+2,5
  1831                           
  1832                           ;SD.c: 148: first = 0;
  1833  02CD  01BD               	clrf	sdPrvCardInit@first
  1834                           
  1835                           ;SD.c: 149: }
  1836  02CE  2A9B               	goto	l6421
  1837  02CF                     l2398:	
  1838                           
  1839                           ;SD.c: 150: else{
  1840                           ;SD.c: 152: if(!(resp & 0x01)) return 1;
  1841  02CF  1C42               	btfss	sdPrvCardInit@resp,0
  1842  02D0  3401               	retlw	1
  1843  02D1  2A9B               	goto	l6421
  1844  02D2                     __end_of_sdPrvCardInit:	
  1845                           ;SD.c: 153: }
  1846                           ;SD.c: 154: }
  1847                           ;SD.c: 156: return 0;
  1848                           
  1849  02D2                     __ptext1565:	
  1850 ;; =============== function _ufatExtRead ends ============
  1851                           
  1852                           
  1853 ;; *************** function _sdPrvACMD *****************
  1854 ;; Defined at:
  1855 ;;		line 119 in file "C:\Program Files\Microchip\Project\SingleChipPlayer\SD.c"
  1856 ;; Parameters:    Size  Location     Type
  1857 ;;  cmd             1    wreg     unsigned char 
  1858 ;;  param           4   18[BANK0 ] unsigned long 
  1859 ;; Auto vars:     Size  Location     Type
  1860 ;;  cmd             1   22[BANK0 ] unsigned char 
  1861 ;;  ret             1   23[BANK0 ] unsigned char 
  1862 ;; Return value:  Size  Location     Type
  1863 ;;                  1    wreg      unsigned char 
  1864 ;; Registers used:
  1865 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1866 ;; Tracked objects:
  1867 ;;		On entry : 1F/0
  1868 ;;		On exit  : 1F/0
  1869 ;;		Unchanged: FFFE0/0
  1870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1871 ;;      Params:         0       4       0       0
  1872 ;;      Locals:         0       2       0       0
  1873 ;;      Temps:          0       0       0       0
  1874 ;;      Totals:         0       6       0       0
  1875 ;;Total ram usage:        6 bytes
  1876 ;; Hardware stack levels used:    1
  1877 ;; Hardware stack levels required when called:    4
  1878 ;; This function calls:
  1879 ;;		_sdPrvSimpleCommand
  1880 ;; This function is called by:
  1881 ;;		_sdPrvCardInit
  1882 ;; This function uses a non-reentrant model
  1883 ;;
  1884  02D2                     _sdPrvACMD:	
  1885                           
  1886                           ; Regs used in _sdPrvACMD: [wreg+fsr1l-status,0+pclath+cstack]
  1887                           ;sdPrvACMD@cmd stored from wreg
  1888  02D2  00B6               	movwf	sdPrvACMD@cmd
  1889                           
  1890                           ;SD.c: 121: UInt8 ret;
  1891                           ;SD.c: 123: ret = sdPrvSimpleCommand(55, 0, 1);
  1892  02D3  01AB               	clrf	?_sdPrvSimpleCommand
  1893  02D4  01AC               	clrf	?_sdPrvSimpleCommand+1
  1894  02D5  01AD               	clrf	?_sdPrvSimpleCommand+2
  1895  02D6  01AE               	clrf	?_sdPrvSimpleCommand+3
  1896  02D7  01AF               	clrf	?_sdPrvSimpleCommand+4
  1897  02D8  0AAF               	incf	?_sdPrvSimpleCommand+4,f
  1898  02D9  3037               	movlw	55
  1899  02DA  318E  2681  3182   	fcall	_sdPrvSimpleCommand
  1900  02DD  00B7               	movwf	sdPrvACMD@ret
  1901                           
  1902                           ;SD.c: 124: if(ret & 0x80) return ret;
  1903  02DE  1FB7               	btfss	sdPrvACMD@ret,7
  1904  02DF  2AE2               	goto	l2387
  1905  02E0                     l6243:	
  1906  02E0  0837               	movf	sdPrvACMD@ret,w
  1907  02E1  0008               	return
  1908  02E2                     l2387:	
  1909                           
  1910                           ;SD.c: 125: if(ret & 0x04) return ret;
  1911  02E2  1937               	btfsc	sdPrvACMD@ret,2
  1912  02E3  2AE0               	goto	l6243
  1913                           
  1914                           ;SD.c: 127: return sdPrvSimpleCommand(cmd, param, 1);
  1915  02E4  0835               	movf	sdPrvACMD@param+3,w
  1916  02E5  00AE               	movwf	?_sdPrvSimpleCommand+3
  1917  02E6  0834               	movf	sdPrvACMD@param+2,w
  1918  02E7  00AD               	movwf	?_sdPrvSimpleCommand+2
  1919  02E8  0833               	movf	sdPrvACMD@param+1,w
  1920  02E9  00AC               	movwf	?_sdPrvSimpleCommand+1
  1921  02EA  0832               	movf	sdPrvACMD@param,w
  1922  02EB  00AB               	movwf	?_sdPrvSimpleCommand
  1923  02EC  01AF               	clrf	?_sdPrvSimpleCommand+4
  1924  02ED  0AAF               	incf	?_sdPrvSimpleCommand+4,f
  1925  02EE  0836               	movf	sdPrvACMD@cmd,w
  1926  02EF  318E  2E81         	ljmp	_sdPrvSimpleCommand
  1927  02F1                     __end_of_sdPrvACMD:	
  1928                           
  1929                           	psect	text1571
  1930  047E                     __ptext1571:	
  1931 ;; =============== function _spiCmp ends ============
  1932                           
  1933                           
  1934 ;; *************** function _sdPrvReadResp *****************
  1935 ;; Defined at:
  1936 ;;		line 93 in file "C:\Program Files\Microchip\Project\SingleChipPlayer\SD.c"
  1937 ;; Parameters:    Size  Location     Type
  1938 ;;		None
  1939 ;; Auto vars:     Size  Location     Type
  1940 ;;  v               1    4[COMMON] unsigned char 
  1941 ;;  i               1    3[COMMON] unsigned char 
  1942 ;; Return value:  Size  Location     Type
  1943 ;;                  1    wreg      unsigned char 
  1944 ;; Registers used:
  1945 ;;		wreg, status,2, status,0, pclath, cstack
  1946 ;; Tracked objects:
  1947 ;;		On entry : 1F/0
  1948 ;;		On exit  : 1F/4
  1949 ;;		Unchanged: FFFE0/0
  1950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1951 ;;      Params:         0       0       0       0
  1952 ;;      Locals:         2       0       0       0
  1953 ;;      Temps:          0       0       0       0
  1954 ;;      Totals:         2       0       0       0
  1955 ;;Total ram usage:        2 bytes
  1956 ;; Hardware stack levels used:    1
  1957 ;; Hardware stack levels required when called:    2
  1958 ;; This function calls:
  1959 ;;		_sdSpiByte
  1960 ;; This function is called by:
  1961 ;;		_sdPrvSimpleCommand
  1962 ;; This function uses a non-reentrant model
  1963 ;;
  1964  047E                     _sdPrvReadResp:	
  1965                           
  1966                           ;SD.c: 95: UInt8 v, i = 0;
  1967                           
  1968                           ; Regs used in _sdPrvReadResp: [wreg+status,2+status,0+pclath+cstack]
  1969  047E  01F3               	clrf	sdPrvReadResp@i
  1970  047F  2C84               	goto	l5995
  1971  0480                     l5999:	
  1972  0480  0874               	movf	sdPrvReadResp@v,w
  1973  0481  3AFF               	xorlw	255
  1974  0482  1D03               	btfss	3,2
  1975  0483  2C8E               	goto	l6001
  1976  0484                     l5995:	
  1977                           
  1978                           ;SD.c: 99: v = sdSpiByte(0xFF);
  1979  0484  30FF               	movlw	255
  1980  0485  318E  2615  3184   	fcall	_sdSpiByte
  1981  0488  00F4               	movwf	sdPrvReadResp@v
  1982                           
  1983                           ;SD.c: 101: }while(i++ < 128 && (v == 0xFF));
  1984  0489  3081               	movlw	129
  1985  048A  0AF3               	incf	sdPrvReadResp@i,f
  1986  048B  0273               	subwf	sdPrvReadResp@i,w
  1987  048C  1C03               	btfss	3,0
  1988  048D  2C80               	goto	l5999
  1989  048E                     l6001:	
  1990                           
  1991                           ;SD.c: 103: return v;
  1992  048E  0874               	movf	sdPrvReadResp@v,w
  1993  048F  0008               	return
  1994  0490                     __end_of_sdPrvReadResp:	
  1995                           
  1996                           	psect	text1572
  1997  033C                     __ptext1572:	
  1998 ;; =============== function _sdPrvReadResp ends ============
  1999                           
  2000                           
  2001 ;; *************** function _sdPrvSendCmd *****************
  2002 ;; Defined at:
  2003 ;;		line 77 in file "C:\Program Files\Microchip\Project\SingleChipPlayer\SD.c"
  2004 ;; Parameters:    Size  Location     Type
  2005 ;;  cmd             1    wreg     unsigned char 
  2006 ;;  param           4    0[BANK0 ] unsigned long 
  2007 ;; Auto vars:     Size  Location     Type
  2008 ;;  cmd             1   10[BANK0 ] unsigned char 
  2009 ;;  send            6    4[BANK0 ] unsigned char [6]
  2010 ;; Return value:  Size  Location     Type
  2011 ;;		None               void
  2012 ;; Registers used:
  2013 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2014 ;; Tracked objects:
  2015 ;;		On entry : 1F/0
  2016 ;;		On exit  : 1F/0
  2017 ;;		Unchanged: FFFE0/0
  2018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2019 ;;      Params:         0       4       0       0
  2020 ;;      Locals:         0       7       0       0
  2021 ;;      Temps:          1       0       0       0
  2022 ;;      Totals:         1      11       0       0
  2023 ;;Total ram usage:       12 bytes
  2024 ;; Hardware stack levels used:    1
  2025 ;; Hardware stack levels required when called:    2
  2026 ;; This function calls:
  2027 ;;		_sdCrc7
  2028 ;;		_sdSpiByte
  2029 ;; This function is called by:
  2030 ;;		_sdPrvSimpleCommand
  2031 ;; This function uses a non-reentrant model
  2032 ;;
  2033  033C                     _sdPrvSendCmd:	
  2034                           
  2035                           ; Regs used in _sdPrvSendCmd: [wreg+fsr1l-status,0+pclath+cstack]
  2036                           ;sdPrvSendCmd@cmd stored from wreg
  2037  033C  00AA               	movwf	sdPrvSendCmd@cmd
  2038                           
  2039                           ;SD.c: 79: UInt8 send[6];
  2040                           ;SD.c: 81: send[0] = cmd | 0x40;
  2041  033D  3840               	iorlw	64
  2042  033E  00A4               	movwf	sdPrvSendCmd@send
  2043                           
  2044                           ;SD.c: 82: send[1] = param >> 24;
  2045  033F  0823               	movf	sdPrvSendCmd@param+3,w
  2046  0340  00A5               	movwf	sdPrvSendCmd@send+1
  2047                           
  2048                           ;SD.c: 83: send[2] = param >> 16;
  2049  0341  0822               	movf	sdPrvSendCmd@param+2,w
  2050  0342  00A6               	movwf	sdPrvSendCmd@send+2
  2051                           
  2052                           ;SD.c: 84: send[3] = param >> 8;
  2053  0343  0821               	movf	sdPrvSendCmd@param+1,w
  2054  0344  00A7               	movwf	sdPrvSendCmd@send+3
  2055                           
  2056                           ;SD.c: 85: send[4] = param;
  2057  0345  0820               	movf	sdPrvSendCmd@param,w
  2058  0346  00A8               	movwf	sdPrvSendCmd@send+4
  2059                           
  2060                           ;SD.c: 86: send[5] = (sdCrc7(send, 5, 0) << 1) | 1;
  2061  0347  1403               	setc
  2062  0348  3005               	movlw	5
  2063  0349  00F2               	movwf	?_sdCrc7
  2064  034A  01F3               	clrf	?_sdCrc7+1
  2065  034B  3024               	movlw	sdPrvSendCmd@send& (0+255)
  2066  034C  2360               	fcall	_sdCrc7
  2067  034D  00F9               	movwf	??_sdPrvSendCmd
  2068  034E  0D79               	rlf	??_sdPrvSendCmd,w
  2069  034F  00A9               	movwf	sdPrvSendCmd@send+5
  2070                           
  2071                           ;SD.c: 88: for(cmd = 0; cmd < sizeof(send); cmd++){
  2072  0350  01AA               	clrf	sdPrvSendCmd@cmd
  2073  0351                     l5987:	
  2074                           
  2075                           ;SD.c: 89: sdSpiByte(send[cmd]);
  2076  0351  082A               	movf	sdPrvSendCmd@cmd,w
  2077  0352  3E24               	addlw	sdPrvSendCmd@send& (0+255)
  2078  0353  0086               	movwf	6
  2079  0354  0187               	clrf	7
  2080  0355  0801               	movf	1,w
  2081  0356  318E  2615  3183   	fcall	_sdSpiByte
  2082  0359  0020               	movlb	0	; select bank0
  2083  035A  0AAA               	incf	sdPrvSendCmd@cmd,f
  2084  035B  3006               	movlw	6
  2085  035C  022A               	subwf	sdPrvSendCmd@cmd,w
  2086  035D  1803               	btfsc	3,0
  2087  035E  0008               	return
  2088  035F  2B51               	goto	l5987
  2089  0360                     __end_of_sdPrvSendCmd:	
  2090  0360                     __ptext1590:	
  2091 ;; =============== function _ufatGetU16 ends ============
  2092                           
  2093                           
  2094 ;; *************** function _sdCrc7 *****************
  2095 ;; Defined at:
  2096 ;;		line 55 in file "C:\Program Files\Microchip\Project\SingleChipPlayer\SD.c"
  2097 ;; Parameters:    Size  Location     Type
  2098 ;;  chr             1    wreg     PTR unsigned char 
  2099 ;;		 -> sdPrvSendCmd@send(6), 
  2100 ;;  cnt             1    2[COMMON] unsigned char 
  2101 ;;  crc             1    3[COMMON] unsigned char 
  2102 ;; Auto vars:     Size  Location     Type
  2103 ;;  chr             1    5[COMMON] PTR unsigned char 
  2104 ;;		 -> sdPrvSendCmd@send(6), 
  2105 ;;  a               1    8[COMMON] unsigned char 
  2106 ;;  i               1    7[COMMON] unsigned char 
  2107 ;;  Data            1    6[COMMON] unsigned char 
  2108 ;; Return value:  Size  Location     Type
  2109 ;;                  1    wreg      unsigned char 
  2110 ;; Registers used:
  2111 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2112 ;; Tracked objects:
  2113 ;;		On entry : 1F/0
  2114 ;;		On exit  : 1F/0
  2115 ;;		Unchanged: FFFE0/0
  2116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2117 ;;      Params:         2       0       0       0
  2118 ;;      Locals:         4       0       0       0
  2119 ;;      Temps:          1       0       0       0
  2120 ;;      Totals:         7       0       0       0
  2121 ;;Total ram usage:        7 bytes
  2122 ;; Hardware stack levels used:    1
  2123 ;; Hardware stack levels required when called:    1
  2124 ;; This function calls:
  2125 ;;		Nothing
  2126 ;; This function is called by:
  2127 ;;		_sdPrvSendCmd
  2128 ;; This function uses a non-reentrant model
  2129 ;;
  2130  0360                     _sdCrc7:	
  2131                           
  2132                           ; Regs used in _sdCrc7: [wreg+fsr1l-status,0]
  2133                           ;sdCrc7@chr stored from wreg
  2134  0360  00F5               	movwf	sdCrc7@chr
  2135                           
  2136                           ;SD.c: 57: UInt8 i, a;
  2137                           ;SD.c: 58: UInt8 Data;
  2138                           ;SD.c: 60: for(a = 0; a < cnt; a++){
  2139  0361  01F8               	clrf	sdCrc7@a
  2140  0362                     l5789:	
  2141  0362  0872               	movf	sdCrc7@cnt,w
  2142  0363  0278               	subwf	sdCrc7@a,w
  2143  0364  1803               	btfsc	3,0
  2144  0365  2B81               	goto	l5791
  2145                           
  2146                           ;SD.c: 62: Data = chr[a];
  2147  0366  0878               	movf	sdCrc7@a,w
  2148  0367  0775               	addwf	sdCrc7@chr,w
  2149  0368  00F4               	movwf	??_sdCrc7
  2150  0369  0086               	movwf	6
  2151  036A  0187               	clrf	7
  2152  036B  0801               	movf	1,w
  2153  036C  00F6               	movwf	sdCrc7@Data
  2154                           
  2155                           ;SD.c: 64: for(i = 0; i < 8; i++){
  2156  036D  01F7               	clrf	sdCrc7@i
  2157  036E                     l2364:	
  2158                           
  2159                           ;SD.c: 66: crc <<= 1;
  2160  036E  35F3               	lslf	sdCrc7@crc,f
  2161                           
  2162                           ;SD.c: 68: if( (Data & 0x80) ^ (crc & 0x80) ) crc ^= 0x09;
  2163  036F  3080               	movlw	128
  2164  0370  0573               	andwf	sdCrc7@crc,w
  2165  0371  00F4               	movwf	??_sdCrc7
  2166  0372  0876               	movf	sdCrc7@Data,w
  2167  0373  3980               	andlw	128
  2168  0374  0674               	xorwf	??_sdCrc7,w
  2169  0375  1903               	btfsc	3,2
  2170  0376  2B79               	goto	l5783
  2171  0377  3009               	movlw	9
  2172  0378  06F3               	xorwf	sdCrc7@crc,f
  2173  0379                     l5783:	
  2174                           
  2175                           ;SD.c: 70: Data <<= 1;
  2176  0379  35F6               	lslf	sdCrc7@Data,f
  2177  037A  0AF7               	incf	sdCrc7@i,f
  2178  037B  3008               	movlw	8
  2179  037C  0277               	subwf	sdCrc7@i,w
  2180  037D  1C03               	skipc
  2181  037E  2B6E               	goto	l2364
  2182  037F  0AF8               	incf	sdCrc7@a,f
  2183  0380  2B62               	goto	l5789
  2184  0381                     l5791:	
  2185                           
  2186                           ;SD.c: 71: }
  2187                           ;SD.c: 72: }
  2188                           ;SD.c: 74: return crc & 0x7F;
  2189  0381  0873               	movf	sdCrc7@crc,w
  2190  0382  397F               	andlw	127
  2191  0383  0008               	return
  2192  0384                     __end_of_sdCrc7:	
  2193                           
  2194                           	psect	text1573
  2195  0451                     __ptext1573:	
  2196 ;; =============== function _sdPrvSendCmd ends ============
  2197                           
  2198                           
  2199 ;; *************** function _sdSpiResync *****************
  2200 ;; Defined at:
  2201 ;;		line 42 in file "C:\Program Files\Microchip\Project\SingleChipPlayer\SD.c"
  2202 ;; Parameters:    Size  Location     Type
  2203 ;;		None
  2204 ;; Auto vars:     Size  Location     Type
  2205 ;;		None
  2206 ;; Return value:  Size  Location     Type
  2207 ;;		None               void
  2208 ;; Registers used:
  2209 ;;		wreg
  2210 ;; Tracked objects:
  2211 ;;		On entry : 1F/0
  2212 ;;		On exit  : 1F/4
  2213 ;;		Unchanged: 0/0
  2214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2215 ;;      Params:         0       0       0       0
  2216 ;;      Locals:         0       0       0       0
  2217 ;;      Temps:          1       0       0       0
  2218 ;;      Totals:         1       0       0       0
  2219 ;;Total ram usage:        1 bytes
  2220 ;; Hardware stack levels used:    1
  2221 ;; Hardware stack levels required when called:    1
  2222 ;; This function calls:
  2223 ;;		Nothing
  2224 ;; This function is called by:
  2225 ;;		_sdInit
  2226 ;; This function uses a non-reentrant model
  2227 ;;
  2228  0451                     _sdSpiResync:	
  2229                           
  2230                           ;SD.c: 44: LATA1 = 0;
  2231                           
  2232                           ; Regs used in _sdSpiResync: [wreg]
  2233  0451  0022               	movlb	2	; select bank2
  2234  0452  108C               	bcf	12,1
  2235                           
  2236                           ;SD.c: 45: LATA4 = 1;
  2237  0453  160C               	bsf	12,4
  2238                           
  2239                           ;SD.c: 46: SSPEN = 0;
  2240  0454  0024               	movlb	4	; select bank4
  2241  0455  1295               	bcf	21,5
  2242                           
  2243                           ;SD.c: 47: _delay((unsigned long)((10)*(33000000/4000000.0)));
  2244  0456  301B               	movlw	27
  2245  0457  00F2               	movwf	??_sdSpiResync
  2246  0458                     u5057:	
  2247  0458  0BF2               	decfsz	??_sdSpiResync,f
  2248  0459  2C58               	goto	u5057
  2249                           
  2250                           ;SD.c: 48: LATA1 = 1;
  2251  045A  0022               	movlb	2	; select bank2
  2252  045B  148C               	bsf	12,1
  2253                           
  2254                           ;SD.c: 49: _delay((unsigned long)((10)*(33000000/4000000.0)));
  2255  045C  301B               	movlw	27
  2256  045D  00F2               	movwf	??_sdSpiResync
  2257  045E                     u5067:	
  2258  045E  0BF2               	decfsz	??_sdSpiResync,f
  2259  045F  2C5E               	goto	u5067
  2260                           
  2261                           ;SD.c: 50: LATA1 = 0;
  2262  0460  0022               	movlb	2	; select bank2
  2263  0461  108C               	bcf	12,1
  2264                           
  2265                           ;SD.c: 51: _delay((unsigned long)((10)*(33000000/4000000.0)));
  2266  0462  301B               	movlw	27
  2267  0463  00F2               	movwf	??_sdSpiResync
  2268  0464                     u5077:	
  2269  0464  0BF2               	decfsz	??_sdSpiResync,f
  2270  0465  2C64               	goto	u5077
  2271                           
  2272                           ;SD.c: 52: SSPEN = 1;
  2273  0466  0024               	movlb	4	; select bank4
  2274  0467  1695               	bsf	21,5
  2275  0468  0008               	return
  2276  0469                     __end_of_sdSpiResync:	
  2277                           
  2278                           	psect	text1574
  2279  0141                     __ptext1574:	
  2280 ;; =============== function _sdSpiResync ends ============
  2281                           
  2282                           
  2283 ;; *************** function _measureBattery *****************
  2284 ;; Defined at:
  2285 ;;		line 397 in file "C:\Program Files\Microchip\Project\SingleChipPlayer\main.c"
  2286 ;; Parameters:    Size  Location     Type
  2287 ;;		None
  2288 ;; Auto vars:     Size  Location     Type
  2289 ;;  t               3   16[BANK0 ] unsigned um
  2290 ;;  i               1   15[BANK0 ] unsigned char 
  2291 ;; Return value:  Size  Location     Type
  2292 ;;                  2    6[BANK0 ] unsigned short 
  2293 ;; Registers used:
  2294 ;;		wreg, status,2, status,0, pclath, cstack
  2295 ;; Tracked objects:
  2296 ;;		On entry : 0/1
  2297 ;;		On exit  : 1F/0
  2298 ;;		Unchanged: 0/0
  2299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2300 ;;      Params:         0       2       0       0
  2301 ;;      Locals:         0       4       0       0
  2302 ;;      Temps:          0       7       0       0
  2303 ;;      Totals:         0      13       0       0
  2304 ;;Total ram usage:       13 bytes
  2305 ;; Hardware stack levels used:    1
  2306 ;; Hardware stack levels required when called:    2
  2307 ;; This function calls:
  2308 ;;		___aldiv
  2309 ;; This function is called by:
  2310 ;;		_main
  2311 ;; This function uses a non-reentrant model
  2312 ;;
  2313  0141                     _measureBattery:	
  2314                           
  2315                           ;main.c: 399: UInt24 t = 0;
  2316                           
  2317                           ; Regs used in _measureBattery: [wreg+status,2+status,0+pclath+cstack]
  2318  0141  0020               	movlb	0	; select bank0
  2319  0142  01B0               	clrf	measureBattery@t
  2320  0143  01B1               	clrf	measureBattery@t+1
  2321  0144  01B2               	clrf	measureBattery@t+2
  2322                           
  2323                           ;main.c: 400: UInt8 i;
  2324                           ;main.c: 402: FVRCON = 0b11000001;
  2325  0145  30C1               	movlw	193
  2326  0146  0022               	movlb	2	; select bank2
  2327  0147  0097               	movwf	23	;volatile
  2328                           
  2329                           ;main.c: 403: ADCON0 = 0b01111101;
  2330  0148  307D               	movlw	125
  2331  0149  0021               	movlb	1	; select bank1
  2332  014A  009D               	movwf	29	;volatile
  2333                           
  2334                           ;main.c: 404: ADCON1 = 0b11110000;
  2335  014B  30F0               	movlw	240
  2336  014C  009E               	movwf	30	;volatile
  2337                           
  2338                           ;main.c: 405: _delay((unsigned long)((1)*(33000000/4000.0)));
  2339  014D  300B               	movlw	11
  2340  014E  0020               	movlb	0	; select bank0
  2341  014F  00A9               	movwf	??_measureBattery+1
  2342  0150  30B5               	movlw	181
  2343  0151  00A8               	movwf	??_measureBattery
  2344  0152                     u5087:	
  2345  0152  0BA8               	decfsz	??_measureBattery,f
  2346  0153  2952               	goto	u5087
  2347  0154  0BA9               	decfsz	??_measureBattery+1,f
  2348  0155  2952               	goto	u5087
  2349  0156  2957               	nop2
  2350                           
  2351                           ;main.c: 406: for(i = 0; i < 10; i++){
  2352  0157  0020               	movlb	0	; select bank0
  2353  0158  01AF               	clrf	measureBattery@i
  2354  0159                     l5949:	
  2355                           
  2356                           ;main.c: 407: _delay((unsigned long)((160)*(33000000/4000000.0)));
  2357  0159  30BC               	movlw	188
  2358  015A  00A8               	movwf	??_measureBattery
  2359  015B                     u5097:	
  2360  015B  295C               	nop2
  2361  015C  295D               	nop2
  2362  015D  0BA8               	decfsz	??_measureBattery,f
  2363  015E  295B               	goto	u5097
  2364  015F  2960               	nop2	;nop
  2365  0160  0064               	clrwdt
  2366                           
  2367                           ;main.c: 408: ADCON0bits.GO_nDONE = 1;
  2368  0161  0021               	movlb	1	; select bank1
  2369  0162  149D               	bsf	29,1	;volatile
  2370  0163                     l1249:	
  2371                           ;main.c: 409: while(ADCON0bits.GO_nDONE);
  2372                           
  2373  0163  189D               	btfsc	29,1	;volatile
  2374  0164  2963               	goto	l1249
  2375                           
  2376                           ;main.c: 410: t += ADRES;
  2377  0165  081B               	movf	27,w	;volatile
  2378  0166  0020               	movlb	0	; select bank0
  2379  0167  00A8               	movwf	??_measureBattery
  2380  0168  0021               	movlb	1	; select bank1
  2381  0169  081C               	movf	28,w	;volatile
  2382  016A  0020               	movlb	0	; select bank0
  2383  016B  00A9               	movwf	??_measureBattery+1
  2384  016C  01AA               	clrf	??_measureBattery+2
  2385  016D  0828               	movf	??_measureBattery,w
  2386  016E  07B0               	addwf	measureBattery@t,f
  2387  016F  0829               	movf	??_measureBattery+1,w
  2388  0170  3DB1               	addwfc	measureBattery@t+1,f
  2389  0171  082A               	movf	??_measureBattery+2,w
  2390  0172  3DB2               	addwfc	measureBattery@t+2,f
  2391  0173  0AAF               	incf	measureBattery@i,f
  2392  0174  300A               	movlw	10
  2393  0175  022F               	subwf	measureBattery@i,w
  2394  0176  1C03               	skipc
  2395  0177  2959               	goto	l5949
  2396                           
  2397                           ;main.c: 411: }
  2398                           ;main.c: 412: FVRCON = 0b00000000;
  2399  0178  0022               	movlb	2	; select bank2
  2400  0179  0197               	clrf	23	;volatile
  2401                           
  2402                           ;main.c: 413: ADCON0 &=~ 0b00000001;
  2403  017A  0021               	movlb	1	; select bank1
  2404  017B  101D               	bcf	29,0	;volatile
  2405                           
  2406                           ;main.c: 420: t = (10475520 + (t >> 1)) / t;
  2407  017C  0020               	movlb	0	; select bank0
  2408  017D  0830               	movf	measureBattery@t,w
  2409  017E  00F2               	movwf	?___aldiv
  2410  017F  0831               	movf	measureBattery@t+1,w
  2411  0180  00F3               	movwf	?___aldiv+1
  2412  0181  0832               	movf	measureBattery@t+2,w
  2413  0182  00F4               	movwf	?___aldiv+2
  2414  0183  01F5               	clrf	?___aldiv+3
  2415  0184  0830               	movf	measureBattery@t,w
  2416  0185  00A8               	movwf	??_measureBattery
  2417  0186  0831               	movf	measureBattery@t+1,w
  2418  0187  00A9               	movwf	??_measureBattery+1
  2419  0188  0832               	movf	measureBattery@t+2,w
  2420  0189  00AA               	movwf	??_measureBattery+2
  2421  018A  36AA               	lsrf	??_measureBattery+2,f
  2422  018B  0CA9               	rrf	??_measureBattery+1,f
  2423  018C  0CA8               	rrf	??_measureBattery,f
  2424  018D  0828               	movf	??_measureBattery,w
  2425  018E  00AB               	movwf	??_measureBattery+3
  2426  018F  0829               	movf	??_measureBattery+1,w
  2427  0190  00AC               	movwf	??_measureBattery+4
  2428  0191  082A               	movf	??_measureBattery+2,w
  2429  0192  00AD               	movwf	??_measureBattery+5
  2430  0193  01AE               	clrf	??_measureBattery+6
  2431  0194  3000               	movlw	0
  2432  0195  072B               	addwf	??_measureBattery+3,w
  2433  0196  00F6               	movwf	?___aldiv+4
  2434  0197  30D8               	movlw	216
  2435  0198  3D2C               	addwfc	??_measureBattery+4,w
  2436  0199  00F7               	movwf	?___aldiv+5
  2437  019A  309F               	movlw	159
  2438  019B  3D2D               	addwfc	??_measureBattery+5,w
  2439  019C  00F8               	movwf	?___aldiv+6
  2440  019D  3000               	movlw	0
  2441  019E  3D2E               	addwfc	??_measureBattery+6,w
  2442  019F  00F9               	movwf	?___aldiv+7
  2443  01A0  21AC               	fcall	___aldiv
  2444  01A1  0874               	movf	?___aldiv+2,w
  2445  01A2  00B2               	movwf	measureBattery@t+2
  2446  01A3  0873               	movf	?___aldiv+1,w
  2447  01A4  00B1               	movwf	measureBattery@t+1
  2448  01A5  0872               	movf	?___aldiv,w
  2449  01A6  00B0               	movwf	measureBattery@t
  2450                           
  2451                           ;main.c: 422: return t;
  2452  01A7  0831               	movf	measureBattery@t+1,w
  2453  01A8  00A7               	movwf	?_measureBattery+1
  2454  01A9  0830               	movf	measureBattery@t,w
  2455  01AA  00A6               	movwf	?_measureBattery
  2456  01AB  0008               	return
  2457  01AC                     __end_of_measureBattery:	
  2458  01AC                     __ptext1582:	
  2459 ;; =============== function _rnd ends ============
  2460                           
  2461                           
  2462 ;; *************** function ___aldiv *****************
  2463 ;; Defined at:
  2464 ;;		line 5 in file "C:\Program Files\HI-TECH Software\PICC\9.71a\sources\aldiv.c"
  2465 ;; Parameters:    Size  Location     Type
  2466 ;;  divisor         4    2[COMMON] long 
  2467 ;;  dividend        4    6[COMMON] long 
  2468 ;; Auto vars:     Size  Location     Type
  2469 ;;  quotient        4    2[BANK0 ] long 
  2470 ;;  sign            1    1[BANK0 ] unsigned char 
  2471 ;;  counter         1    0[BANK0 ] unsigned char 
  2472 ;; Return value:  Size  Location     Type
  2473 ;;                  4    2[COMMON] long 
  2474 ;; Registers used:
  2475 ;;		wreg, status,2, status,0
  2476 ;; Tracked objects:
  2477 ;;		On entry : 1F/0
  2478 ;;		On exit  : 1F/0
  2479 ;;		Unchanged: FFFE0/0
  2480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2481 ;;      Params:         8       0       0       0
  2482 ;;      Locals:         0       6       0       0
  2483 ;;      Temps:          0       0       0       0
  2484 ;;      Totals:         8       6       0       0
  2485 ;;Total ram usage:       14 bytes
  2486 ;; Hardware stack levels used:    1
  2487 ;; Hardware stack levels required when called:    1
  2488 ;; This function calls:
  2489 ;;		Nothing
  2490 ;; This function is called by:
  2491 ;;		_measureBattery
  2492 ;; This function uses a non-reentrant model
  2493 ;;
  2494  01AC                     ___aldiv:	
  2495                           
  2496                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  2497  01AC  01A1               	clrf	___aldiv@sign
  2498  01AD  1FF5               	btfss	___aldiv@divisor+3,7
  2499  01AE  29BC               	goto	l2722
  2500  01AF  09F2               	comf	___aldiv@divisor,f
  2501  01B0  09F3               	comf	___aldiv@divisor+1,f
  2502  01B1  09F4               	comf	___aldiv@divisor+2,f
  2503  01B2  09F5               	comf	___aldiv@divisor+3,f
  2504  01B3  0AF2               	incf	___aldiv@divisor,f
  2505  01B4  1903               	skipnz
  2506  01B5  0AF3               	incf	___aldiv@divisor+1,f
  2507  01B6  1903               	skipnz
  2508  01B7  0AF4               	incf	___aldiv@divisor+2,f
  2509  01B8  1903               	skipnz
  2510  01B9  0AF5               	incf	___aldiv@divisor+3,f
  2511  01BA  01A1               	clrf	___aldiv@sign
  2512  01BB  0AA1               	incf	___aldiv@sign,f
  2513  01BC                     l2722:	
  2514  01BC  1FF9               	btfss	___aldiv@dividend+3,7
  2515  01BD  29CB               	goto	l4645
  2516  01BE  09F6               	comf	___aldiv@dividend,f
  2517  01BF  09F7               	comf	___aldiv@dividend+1,f
  2518  01C0  09F8               	comf	___aldiv@dividend+2,f
  2519  01C1  09F9               	comf	___aldiv@dividend+3,f
  2520  01C2  0AF6               	incf	___aldiv@dividend,f
  2521  01C3  1903               	skipnz
  2522  01C4  0AF7               	incf	___aldiv@dividend+1,f
  2523  01C5  1903               	skipnz
  2524  01C6  0AF8               	incf	___aldiv@dividend+2,f
  2525  01C7  1903               	skipnz
  2526  01C8  0AF9               	incf	___aldiv@dividend+3,f
  2527  01C9  3001               	movlw	1
  2528  01CA  06A1               	xorwf	___aldiv@sign,f
  2529  01CB                     l4645:	
  2530  01CB  01A2               	clrf	___aldiv@quotient
  2531  01CC  01A3               	clrf	___aldiv@quotient+1
  2532  01CD  01A4               	clrf	___aldiv@quotient+2
  2533  01CE  01A5               	clrf	___aldiv@quotient+3
  2534  01CF  0875               	movf	___aldiv@divisor+3,w
  2535  01D0  0474               	iorwf	___aldiv@divisor+2,w
  2536  01D1  0473               	iorwf	___aldiv@divisor+1,w
  2537  01D2  0472               	iorwf	___aldiv@divisor,w
  2538  01D3  1903               	skipnz
  2539  01D4  2A01               	goto	l4667
  2540  01D5  01A0               	clrf	___aldiv@counter
  2541  01D6                     L3:	
  2542  01D6  0AA0               	incf	___aldiv@counter,f
  2543  01D7  1BF5               	btfsc	___aldiv@divisor+3,7
  2544  01D8  29DE               	goto	l4655
  2545  01D9  35F2               	lslf	___aldiv@divisor,f
  2546  01DA  0DF3               	rlf	___aldiv@divisor+1,f
  2547  01DB  0DF4               	rlf	___aldiv@divisor+2,f
  2548  01DC  0DF5               	rlf	___aldiv@divisor+3,f
  2549  01DD  29D6               	goto	L3
  2550  01DE                     l4655:	
  2551  01DE  35A2               	lslf	___aldiv@quotient,f
  2552  01DF  0DA3               	rlf	___aldiv@quotient+1,f
  2553  01E0  0DA4               	rlf	___aldiv@quotient+2,f
  2554  01E1  0DA5               	rlf	___aldiv@quotient+3,f
  2555  01E2  0875               	movf	___aldiv@divisor+3,w
  2556  01E3  0279               	subwf	___aldiv@dividend+3,w
  2557  01E4  1D03               	skipz
  2558  01E5  29F0               	goto	u2045
  2559  01E6  0874               	movf	___aldiv@divisor+2,w
  2560  01E7  0278               	subwf	___aldiv@dividend+2,w
  2561  01E8  1D03               	skipz
  2562  01E9  29F0               	goto	u2045
  2563  01EA  0873               	movf	___aldiv@divisor+1,w
  2564  01EB  0277               	subwf	___aldiv@dividend+1,w
  2565  01EC  1D03               	skipz
  2566  01ED  29F0               	goto	u2045
  2567  01EE  0872               	movf	___aldiv@divisor,w
  2568  01EF  0276               	subwf	___aldiv@dividend,w
  2569  01F0                     u2045:	
  2570  01F0  1C03               	skipc
  2571  01F1  29FB               	goto	l4663
  2572  01F2  0872               	movf	___aldiv@divisor,w
  2573  01F3  02F6               	subwf	___aldiv@dividend,f
  2574  01F4  0873               	movf	___aldiv@divisor+1,w
  2575  01F5  3BF7               	subwfb	___aldiv@dividend+1,f
  2576  01F6  0874               	movf	___aldiv@divisor+2,w
  2577  01F7  3BF8               	subwfb	___aldiv@dividend+2,f
  2578  01F8  0875               	movf	___aldiv@divisor+3,w
  2579  01F9  3BF9               	subwfb	___aldiv@dividend+3,f
  2580  01FA  1422               	bsf	___aldiv@quotient,0
  2581  01FB                     l4663:	
  2582  01FB  36F5               	lsrf	___aldiv@divisor+3,f
  2583  01FC  0CF4               	rrf	___aldiv@divisor+2,f
  2584  01FD  0CF3               	rrf	___aldiv@divisor+1,f
  2585  01FE  0CF2               	rrf	___aldiv@divisor,f
  2586  01FF  0BA0               	decfsz	___aldiv@counter,f
  2587  0200  29DE               	goto	l4655
  2588  0201                     l4667:	
  2589  0201  0821               	movf	___aldiv@sign,w
  2590  0202  1903               	btfsc	3,2
  2591  0203  2A0F               	goto	l4671
  2592  0204  09A2               	comf	___aldiv@quotient,f
  2593  0205  09A3               	comf	___aldiv@quotient+1,f
  2594  0206  09A4               	comf	___aldiv@quotient+2,f
  2595  0207  09A5               	comf	___aldiv@quotient+3,f
  2596  0208  0AA2               	incf	___aldiv@quotient,f
  2597  0209  1903               	skipnz
  2598  020A  0AA3               	incf	___aldiv@quotient+1,f
  2599  020B  1903               	skipnz
  2600  020C  0AA4               	incf	___aldiv@quotient+2,f
  2601  020D  1903               	skipnz
  2602  020E  0AA5               	incf	___aldiv@quotient+3,f
  2603  020F                     l4671:	
  2604  020F  0825               	movf	___aldiv@quotient+3,w
  2605  0210  00F5               	movwf	?___aldiv+3
  2606  0211  0824               	movf	___aldiv@quotient+2,w
  2607  0212  00F4               	movwf	?___aldiv+2
  2608  0213  0823               	movf	___aldiv@quotient+1,w
  2609  0214  00F3               	movwf	?___aldiv+1
  2610  0215  0822               	movf	___aldiv@quotient,w
  2611  0216  00F2               	movwf	?___aldiv
  2612  0217  0008               	return
  2613  0218                     __end_of___aldiv:	
  2614                           
  2615                           	psect	text1579
  2616  0800                     __ptext1579:	
  2617 ;; =============== function _secListWrite ends ============
  2618                           
  2619                           
  2620 ;; *************** function _secListRead *****************
  2621 ;; Defined at:
  2622 ;;		line 71 in file "C:\Program Files\Microchip\Project\SingleChipPlayer\main.c"
  2623 ;; Parameters:    Size  Location     Type
  2624 ;;  which           1    wreg     unsigned char 
  2625 ;;  start           1    5[COMMON] PTR unsigned um
  2626 ;;		 -> play@firstSec(3), 
  2627 ;;  len             1    6[COMMON] PTR unsigned short 
  2628 ;;		 -> play@numSec(2), 
  2629 ;; Auto vars:     Size  Location     Type
  2630 ;;  which           1   11[BANK0 ] unsigned char 
  2631 ;;  t24             3    6[BANK0 ] unsigned um
  2632 ;;  t16             2    9[BANK0 ] unsigned short 
  2633 ;;  i               1   12[BANK0 ] unsigned char 
  2634 ;; Return value:  Size  Location     Type
  2635 ;;		None               void
  2636 ;; Registers used:
  2637 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2638 ;; Tracked objects:
  2639 ;;		On entry : 1F/0
  2640 ;;		On exit  : 1F/0
  2641 ;;		Unchanged: FFFE0/0
  2642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2643 ;;      Params:         2       0       0       0
  2644 ;;      Locals:         0       7       0       0
  2645 ;;      Temps:          0       6       0       0
  2646 ;;      Totals:         2      13       0       0
  2647 ;;Total ram usage:       15 bytes
  2648 ;; Hardware stack levels used:    1
  2649 ;; Hardware stack levels required when called:    2
  2650 ;; This function calls:
  2651 ;;		___bmul
  2652 ;;		_eeRead
  2653 ;; This function is called by:
  2654 ;;		_play
  2655 ;; This function uses a non-reentrant model
  2656 ;;
  2657  0800                     _secListRead:	
  2658                           
  2659                           ; Regs used in _secListRead: [wreg+fsr1l-status,0+pclath+cstack]
  2660                           ;secListRead@which stored from wreg
  2661  0800  00AB               	movwf	secListRead@which
  2662                           
  2663                           ;main.c: 73: UInt24 t24;
  2664                           ;main.c: 74: UInt16 t16;
  2665                           ;main.c: 75: UInt8 i;
  2666                           ;main.c: 77: if(which >= 50){
  2667  0801  3032               	movlw	50
  2668  0802  022B               	subwf	secListRead@which,w
  2669  0803  1C03               	skipc
  2670  0804  2811               	goto	l5857
  2671                           
  2672                           ;main.c: 78: *start = 0;
  2673  0805  0875               	movf	secListRead@start,w
  2674  0806  0086               	movwf	6
  2675  0807  0187               	clrf	7
  2676  0808  3000               	movlw	0
  2677  0809  3FC0               	movwi [0]fsr1
  2678  080A  3FC1               	movwi [1]fsr1
  2679  080B  3FC2               	movwi [2]fsr1
  2680                           
  2681                           ;main.c: 79: *len = 0;
  2682  080C  0876               	movf	secListRead@len,w
  2683  080D  0086               	movwf	6
  2684  080E  0181               	clrf	1
  2685  080F  3141               	addfsr 1,1
  2686  0810  0181               	clrf	1
  2687  0811                     l5857:	
  2688                           
  2689                           ;main.c: 80: }
  2690                           ;main.c: 82: which = which + (which << 2);
  2691  0811  082B               	movf	secListRead@which,w
  2692  0812  00F2               	movwf	?___bmul
  2693  0813  3005               	movlw	5
  2694  0814  2696  3188         	fcall	___bmul
  2695  0816  00AB               	movwf	secListRead@which
  2696                           
  2697                           ;main.c: 84: t24 = 0;
  2698  0817  01A6               	clrf	secListRead@t24
  2699  0818  01A7               	clrf	secListRead@t24+1
  2700  0819  01A8               	clrf	secListRead@t24+2
  2701                           
  2702                           ;main.c: 85: for(i = 0; i < 3; i++) t24 = (t24 << 8) | eeRead(which++);
  2703  081A  01AC               	clrf	secListRead@i
  2704  081B                     l5867:	
  2705  081B  082B               	movf	secListRead@which,w
  2706  081C  22A0  3188         	fcall	_eeRead
  2707  081E  0020               	movlb	0	; select bank0
  2708  081F  00A0               	movwf	??_secListRead
  2709  0820  01A1               	clrf	??_secListRead+1
  2710  0821  01A2               	clrf	??_secListRead+2
  2711  0822  0826               	movf	secListRead@t24,w
  2712  0823  00A3               	movwf	??_secListRead+3
  2713  0824  0827               	movf	secListRead@t24+1,w
  2714  0825  00A4               	movwf	??_secListRead+4
  2715  0826  0828               	movf	secListRead@t24+2,w
  2716  0827  00A5               	movwf	??_secListRead+5
  2717  0828  0824               	movf	??_secListRead+4,w
  2718  0829  00A5               	movwf	??_secListRead+5
  2719  082A  0823               	movf	??_secListRead+3,w
  2720  082B  00A4               	movwf	??_secListRead+4
  2721  082C  01A3               	clrf	??_secListRead+3
  2722  082D  0823               	movf	??_secListRead+3,w
  2723  082E  04A0               	iorwf	??_secListRead,f
  2724  082F  0824               	movf	??_secListRead+4,w
  2725  0830  04A1               	iorwf	??_secListRead+1,f
  2726  0831  0825               	movf	??_secListRead+5,w
  2727  0832  04A2               	iorwf	??_secListRead+2,f
  2728  0833  0820               	movf	??_secListRead,w
  2729  0834  00A6               	movwf	secListRead@t24
  2730  0835  0821               	movf	??_secListRead+1,w
  2731  0836  00A7               	movwf	secListRead@t24+1
  2732  0837  0822               	movf	??_secListRead+2,w
  2733  0838  00A8               	movwf	secListRead@t24+2
  2734  0839  0AAB               	incf	secListRead@which,f
  2735  083A  0AAC               	incf	secListRead@i,f
  2736  083B  3003               	movlw	3
  2737  083C  022C               	subwf	secListRead@i,w
  2738  083D  1C03               	skipc
  2739  083E  281B               	goto	l5867
  2740                           
  2741                           ;main.c: 86: *start = t24;
  2742  083F  0875               	movf	secListRead@start,w
  2743  0840  0086               	movwf	6
  2744  0841  0187               	clrf	7
  2745  0842  0826               	movf	secListRead@t24,w
  2746  0843  3FC0               	movwi [0]fsr1
  2747  0844  0827               	movf	secListRead@t24+1,w
  2748  0845  3FC1               	movwi [1]fsr1
  2749  0846  0828               	movf	secListRead@t24+2,w
  2750  0847  3FC2               	movwi [2]fsr1
  2751                           
  2752                           ;main.c: 88: t16 = 0;
  2753  0848  01A9               	clrf	secListRead@t16
  2754  0849  01AA               	clrf	secListRead@t16+1
  2755                           
  2756                           ;main.c: 89: for(i = 0; i < 2; i++) t16 = (t16 << 8) | eeRead(which++);
  2757  084A  01AC               	clrf	secListRead@i
  2758  084B                     l5885:	
  2759  084B  082B               	movf	secListRead@which,w
  2760  084C  22A0  3188         	fcall	_eeRead
  2761  084E  0020               	movlb	0	; select bank0
  2762  084F  00A0               	movwf	??_secListRead
  2763  0850  0829               	movf	secListRead@t16,w
  2764  0851  00A1               	movwf	??_secListRead+1
  2765  0852  0820               	movf	??_secListRead,w
  2766  0853  00A9               	movwf	secListRead@t16
  2767  0854  0821               	movf	??_secListRead+1,w
  2768  0855  00AA               	movwf	secListRead@t16+1
  2769  0856  0AAB               	incf	secListRead@which,f
  2770  0857  0AAC               	incf	secListRead@i,f
  2771  0858  3002               	movlw	2
  2772  0859  022C               	subwf	secListRead@i,w
  2773  085A  1C03               	skipc
  2774  085B  284B               	goto	l5885
  2775                           
  2776                           ;main.c: 90: *len = t16;
  2777  085C  0876               	movf	secListRead@len,w
  2778  085D  0086               	movwf	6
  2779  085E  0187               	clrf	7
  2780  085F  0829               	movf	secListRead@t16,w
  2781  0860  3FC0               	movwi [0]fsr1
  2782  0861  082A               	movf	secListRead@t16+1,w
  2783  0862  3FC1               	movwi [1]fsr1
  2784  0863  0008               	return
  2785  0864                     __end_of_secListRead:	
  2786  0864                     __ptext1575:	
  2787 ;; =============== function _measureBattery ends ============
  2788                           
  2789                           
  2790 ;; *************** function _sdNextSec *****************
  2791 ;; Defined at:
  2792 ;;		line 237 in file "C:\Program Files\Microchip\Project\SingleChipPlayer\SD.c"
  2793 ;; Parameters:    Size  Location     Type
  2794 ;;		None
  2795 ;; Auto vars:     Size  Location     Type
  2796 ;;  v               1    3[COMMON] unsigned char 
  2797 ;; Return value:  Size  Location     Type
  2798 ;;		None               void
  2799 ;; Registers used:
  2800 ;;		wreg, status,2, status,0, pclath, cstack
  2801 ;; Tracked objects:
  2802 ;;		On entry : 1F/0
  2803 ;;		On exit  : 1F/4
  2804 ;;		Unchanged: FFFE0/0
  2805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2806 ;;      Params:         0       0       0       0
  2807 ;;      Locals:         1       0       0       0
  2808 ;;      Temps:          0       0       0       0
  2809 ;;      Totals:         1       0       0       0
  2810 ;;Total ram usage:        1 bytes
  2811 ;; Hardware stack levels used:    1
  2812 ;; Hardware stack levels required when called:    2
  2813 ;; This function calls:
  2814 ;;		_sdSpiByte
  2815 ;; This function is called by:
  2816 ;;		_play
  2817 ;; This function uses a non-reentrant model
  2818 ;;
  2819  0864                     _sdNextSec:	
  2820                           
  2821                           ;SD.c: 239: UInt8 v;
  2822                           ;SD.c: 241: sdSpiByte(0xFF);
  2823                           
  2824                           ; Regs used in _sdNextSec: [wreg+status,2+status,0+pclath+cstack]
  2825  0864  30FF               	movlw	255
  2826  0865  2615  3188         	fcall	_sdSpiByte
  2827                           
  2828                           ;SD.c: 242: sdSpiByte(0xFF);
  2829  0867  30FF               	movlw	255
  2830  0868  2615  3188         	fcall	_sdSpiByte
  2831  086A                     l5935:	
  2832                           
  2833                           ;SD.c: 245: v = sdSpiByte(0xFF);
  2834  086A  30FF               	movlw	255
  2835  086B  2615  3188         	fcall	_sdSpiByte
  2836  086D  00F3               	movwf	sdNextSec@v
  2837                           
  2838                           ;SD.c: 246: }while(v == 0xFF);
  2839  086E  3AFF               	xorlw	255
  2840  086F  1D03               	btfss	3,2
  2841  0870  0008               	return
  2842  0871  286A               	goto	l5935
  2843  0872                     __end_of_sdNextSec:	
  2844  0872                     __pmaintext:	
  2845 ;;Data sizes: Strings 0, constant 8, data 7, bss 21, persistent 0 stack 0
  2846 ;;Auto spaces:   Size  Autos    Used
  2847 ;; COMMON          14     10      12
  2848 ;; BANK0           80     73      78
  2849 ;; BANK1           70     40      61
  2850 ;; BANK2            0      0       0
  2851 ;;
  2852 ;; Pointer list with targets:
  2853 ;; ?_ufatGetNextClus	unsigned short  size(1) Largest target is 0
  2854 ;;
  2855 ;; ?___wmul	unsigned int  size(1) Largest target is 0
  2856 ;;
  2857 ;; ?_ufatGetU32	unsigned long  size(1) Largest target is 0
  2858 ;;
  2859 ;; ?_ufatGetU16	unsigned short  size(1) Largest target is 0
  2860 ;;
  2861 ;; ?___lwmod	unsigned int  size(1) Largest target is 0
  2862 ;;
  2863 ;; ?_measureBattery	unsigned short  size(1) Largest target is 3
  2864 ;;		 -> measureBattery@t(BANK0[3]), 
  2865 ;;
  2866 ;; ?___aldiv	long  size(1) Largest target is 0
  2867 ;;
  2868 ;; ?___lldiv	unsigned long  size(1) Largest target is 0
  2869 ;;
  2870 ;; ?_rnd	unsigned short  size(1) Largest target is 0
  2871 ;;
  2872 ;; ?___lmul	unsigned long  size(1) Largest target is 0
  2873 ;;
  2874 ;; ufatGetNextSectorRange@first	PTR unsigned long  size(1) Largest target is 4
  2875 ;;		 -> main@sec(BANK1[4]), 
  2876 ;;
  2877 ;; ufatGetNextSectorRange@len	PTR unsigned long  size(1) Largest target is 4
  2878 ;;		 -> main@sz(BANK1[4]), 
  2879 ;;
  2880 ;; ufatGetNthFile@sz	PTR unsigned long  size(1) Largest target is 4
  2881 ;;		 -> main@sz(BANK1[4]), 
  2882 ;;
  2883 ;; ufatGetNthFile@id	PTR unsigned short  size(1) Largest target is 2
  2884 ;;		 -> main@id(BANK1[2]), 
  2885 ;;
  2886 ;; ufatGetNthFile@flags	PTR unsigned char  size(1) Largest target is 1
  2887 ;;		 -> main@flags(BANK1[1]), 
  2888 ;;
  2889 ;; ufatGetNthFile@name	PTR unsigned char  size(1) Largest target is 11
  2890 ;;		 -> main@name(BANK1[11]), 
  2891 ;;
  2892 ;; ufatGetU32@v	PTR const unsigned char  size(1) Largest target is 4
  2893 ;;		 -> ufatGetNthFile@buf(BANK0[4]), 
  2894 ;;
  2895 ;; ufatGetU16@v	PTR const unsigned char  size(1) Largest target is 13
  2896 ;;		 -> ufatGetNextClus@buf(BANK0[2]), ufatGetNthFile@buf(BANK0[4]), ufatMount@buf(BANK0[13]), 
  2897 ;;
  2898 ;; sdCrc7@chr	PTR unsigned char  size(1) Largest target is 6
  2899 ;;		 -> sdPrvSendCmd@send(BANK0[6]), 
  2900 ;;
  2901 ;; spiCmp@with	PTR const unsigned char  size(1) Largest target is 4
  2902 ;;		 -> hdrProcess@wave(CODE[4]), hdrProcess@riff(CODE[4]), 
  2903 ;;
  2904 ;; ufatExtRead@buf	PTR unsigned char  size(1) Largest target is 128
  2905 ;;		 -> ufatGetNextClus@buf(BANK0[2]), ufatGetNthFile@buf(BANK0[4]), ufatMount@buf(BANK0[13]), ufatParsePartitionTable@r
      +ecord(BANK0[16]), 
  2906 ;;		 -> main@name(BANK1[11]), main@flags(BANK1[1]), RAM(NULL[128]), 
  2907 ;;
  2908 ;; secListRead@len	PTR unsigned short  size(1) Largest target is 2
  2909 ;;		 -> play@numSec(BANK0[2]), 
  2910 ;;
  2911 ;; secListRead@start	PTR unsigned um size(1) Largest target is 3
  2912 ;;		 -> play@firstSec(BANK0[3]), 
  2913 ;;
  2914 ;;
  2915 ;; Critical Paths under _main in COMMON
  2916 ;;
  2917 ;;   _main->_secListWrite
  2918 ;;   _ufatGetNextSectorRange->___lmul
  2919 ;;   _hdrProcess->___lldiv
  2920 ;;   _sdPrvSimpleCommand->_sdPrvSendCmd
  2921 ;;   _sdPrvReadResp->_sdSpiByte
  2922 ;;   _sdPrvSendCmd->_sdCrc7
  2923 ;;   _measureBattery->___aldiv
  2924 ;;   _sdNextSec->_sdSpiByte
  2925 ;;   _byte->_sdSpiByte
  2926 ;;   _secListWrite->___bmul
  2927 ;;   _secListRead->___bmul
  2928 ;;   _log->_eeWrite
  2929 ;;   _rnd->___lmul
  2930 ;;   ___lwmod->___lmul
  2931 ;;
  2932 ;; Critical Paths under _isr in COMMON
  2933 ;;
  2934 ;;   None.
  2935 ;;
  2936 ;; Critical Paths under _main in BANK0
  2937 ;;
  2938 ;;   _main->_ufatMount
  2939 ;;   _ufatGetNextSectorRange->_ufatGetNextClus
  2940 ;;   _ufatMount->_ufatParsePartitionTable
  2941 ;;   _ufatGetNextClus->_ufatExtRead
  2942 ;;   _ufatParsePartitionTable->_ufatExtRead
  2943 ;;   _ufatGetNthFile->_ufatExtRead
  2944 ;;   _sdInit->_sdPrvCardInit
  2945 ;;   _ufatExtReadTerminate->_ufatExtRead
  2946 ;;   _sdPrvCardInit->_sdPrvACMD
  2947 ;;   _play->_hdrProcess
  2948 ;;   _ufatExtRead->_sdReadStart
  2949 ;;   _sdPrvACMD->_sdPrvSimpleCommand
  2950 ;;   _hdrProcess->___lldiv
  2951 ;;   _sdReadStart->_sdPrvSimpleCommand
  2952 ;;   _sdSecReadStop->_sdPrvSimpleCommand
  2953 ;;   _sdPrvSimpleCommand->_sdPrvSendCmd
  2954 ;;   _measureBattery->___aldiv
  2955 ;;   _rnd->___lwmod
  2956 ;;   ___lwmod->___lmul
  2957 ;;
  2958 ;; Critical Paths under _isr in BANK0
  2959 ;;
  2960 ;;   None.
  2961 ;;
  2962 ;; Critical Paths under _main in BANK1
  2963 ;;
  2964 ;;   None.
  2965 ;;
  2966 ;; Critical Paths under _isr in BANK1
  2967 ;;
  2968 ;;   None.
  2969 ;;
  2970 ;; Critical Paths under _main in BANK2
  2971 ;;
  2972 ;;   None.
  2973 ;;
  2974 ;; Critical Paths under _isr in BANK2
  2975 ;;
  2976 ;;   None.
  2977 ;;
  2978 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  2979 ;;
  2980 ;;
  2981 ;;Call Graph Tables:
  2982 ;;
  2983 ;; ---------------------------------------------------------------------------------
  2984 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
  2985 ;; ---------------------------------------------------------------------------------
  2986 ;; (0) _main                                                40    40      0   30734
  2987 ;;                                              0 BANK1     40    40      0
  2988 ;;                     _measureBattery
  2989 ;;                              _fatal
  2990 ;;                             _sdInit
  2991 ;;                           _ufatInit
  2992 ;;                          _ufatMount
  2993 ;;                     _ufatGetNthFile
  2994 ;;                                _rnd
  2995 ;;                            ___lwmod
  2996 ;;                           _ufatOpen
  2997 ;;                       _secListWrite
  2998 ;;             _ufatGetNextSectorRange
  2999 ;;               _ufatExtReadTerminate
  3000 ;;                               _play
  3001 ;;                              _sleep
  3002 ;; ---------------------------------------------------------------------------------
  3003 ;; (1) _ufatGetNextSectorRange                              12    11      1    3639
  3004 ;;                                             40 BANK0     12    11      1
  3005 ;;                    _ufatGetNextClus
  3006 ;;                             ___lmul
  3007 ;; ---------------------------------------------------------------------------------
  3008 ;; (1) _ufatMount                                           21    21      0    6971
  3009 ;;                                             52 BANK0     21    21      0
  3010 ;;                        _ufatExtRead
  3011 ;;            _ufatParsePartitionTable
  3012 ;;                         _ufatGetU16
  3013 ;;                             ___wmul
  3014 ;; ---------------------------------------------------------------------------------
  3015 ;; (2) _ufatGetNextClus                                     10     8      2    3117
  3016 ;;                                             30 BANK0     10     8      2
  3017 ;;                        _ufatExtRead
  3018 ;;                         _ufatGetU16
  3019 ;; ---------------------------------------------------------------------------------
  3020 ;; (2) _ufatParsePartitionTable                             22    22      0    3644
  3021 ;;                                             30 BANK0     22    22      0
  3022 ;;                        _ufatExtRead
  3023 ;;                          _ufatMount
  3024 ;; ---------------------------------------------------------------------------------
  3025 ;; (1) _ufatGetNthFile                                      20    14      6    4024
  3026 ;;                                             30 BANK0     20    14      6
  3027 ;;                        _ufatExtRead
  3028 ;;                         _ufatGetU16
  3029 ;;                         _ufatGetU32
  3030 ;; ---------------------------------------------------------------------------------
  3031 ;; (1) _sdInit                                               3     3      0    4243
  3032 ;;                                             35 BANK0      3     3      0
  3033 ;;                          _sdSpiInit
  3034 ;;                       _sdClockSpeed
  3035 ;;                          _sdSpiByte
  3036 ;;                        _sdSpiResync
  3037 ;;                 _sdPrvSimpleCommand
  3038 ;;                      _sdPrvCardInit
  3039 ;; ---------------------------------------------------------------------------------
  3040 ;; (1) _ufatExtReadTerminate                                 0     0      0    2769
  3041 ;;                        _ufatExtRead
  3042 ;; ---------------------------------------------------------------------------------
  3043 ;; (2) _sdPrvCardInit                                       11    11      0    2725
  3044 ;;                                             24 BANK0     11    11      0
  3045 ;;                 _sdPrvSimpleCommand
  3046 ;;                          _sdPrvACMD
  3047 ;; ---------------------------------------------------------------------------------
  3048 ;; (1) _play                                                18    18      0    5659
  3049 ;;                                             26 BANK0     18    18      0
  3050 ;;                            _audioOn
  3051 ;;                        _secListRead
  3052 ;;                        _sdReadStart
  3053 ;;                              _fatal
  3054 ;;                         _hdrProcess
  3055 ;;                      _sdSecReadStop
  3056 ;;                          _sdNextSec
  3057 ;;                          _sdSpiByte
  3058 ;;                           _audioOff
  3059 ;; ---------------------------------------------------------------------------------
  3060 ;; (2) _ufatExtRead                                          8     0      8    2769
  3061 ;;                                             22 BANK0      8     0      8
  3062 ;;                          _sdSpiByte
  3063 ;;                      _sdSecReadStop
  3064 ;;                        _sdReadStart
  3065 ;; ---------------------------------------------------------------------------------
  3066 ;; (3) _sdPrvACMD                                            6     2      4    1321
  3067 ;;                                             18 BANK0      6     2      4
  3068 ;;                 _sdPrvSimpleCommand
  3069 ;; ---------------------------------------------------------------------------------
  3070 ;; (2) _hdrProcess                                          21    21      0    1513
  3071 ;;                                              5 BANK0     21    21      0
  3072 ;;                             _spiCmp
  3073 ;;                               _byte
  3074 ;;                             ___bmul
  3075 ;;                            ___lldiv
  3076 ;;                          _sdSpiByte
  3077 ;; ---------------------------------------------------------------------------------
  3078 ;; (2) _sdReadStart                                          4     1      3    1386
  3079 ;;                                             18 BANK0      4     1      3
  3080 ;;                 _sdPrvSimpleCommand
  3081 ;;                                _log
  3082 ;;                          _sdSpiByte
  3083 ;; ---------------------------------------------------------------------------------
  3084 ;; (2) _sdSecReadStop                                        0     0      0    1132
  3085 ;;                 _sdPrvSimpleCommand
  3086 ;; ---------------------------------------------------------------------------------
  3087 ;; (3) _sdPrvSimpleCommand                                   7     2      5    1132
  3088 ;;                                             11 BANK0      7     2      5
  3089 ;;                          _sdSpiByte
  3090 ;;                       _sdPrvSendCmd
  3091 ;;                      _sdPrvReadResp
  3092 ;; ---------------------------------------------------------------------------------
  3093 ;; (3) _spiCmp                                               3     2      1      93
  3094 ;;                                              3 COMMON     3     2      1
  3095 ;;                               _byte
  3096 ;; ---------------------------------------------------------------------------------
  3097 ;; (4) _sdPrvReadResp                                        2     2      0     130
  3098 ;;                                              3 COMMON     2     2      0
  3099 ;;                          _sdSpiByte
  3100 ;; ---------------------------------------------------------------------------------
  3101 ;; (4) _sdPrvSendCmd                                        12     8      4     844
  3102 ;;                                              9 COMMON     1     1      0
  3103 ;;                                              0 BANK0     11     7      4
  3104 ;;                             _sdCrc7
  3105 ;;                          _sdSpiByte
  3106 ;; ---------------------------------------------------------------------------------
  3107 ;; (2) _sdSpiResync                                          1     1      0       0
  3108 ;;                                              2 COMMON     1     1      0
  3109 ;; ---------------------------------------------------------------------------------
  3110 ;; (1) _measureBattery                                      13    11      2     470
  3111 ;;                                              6 BANK0     13    11      2
  3112 ;;                            ___aldiv
  3113 ;; ---------------------------------------------------------------------------------
  3114 ;; (2) _sdNextSec                                            1     1      0      65
  3115 ;;                                              3 COMMON     1     1      0
  3116 ;;                          _sdSpiByte
  3117 ;; ---------------------------------------------------------------------------------
  3118 ;; (3) _byte                                                 0     0      0      31
  3119 ;;                          _sdSpiByte
  3120 ;; ---------------------------------------------------------------------------------
  3121 ;; (2) _fatal                                                7     7      0     138
  3122 ;;                                              2 COMMON     7     7      0
  3123 ;; ---------------------------------------------------------------------------------
  3124 ;; (1) _secListWrite                                         7     2      5     591
  3125 ;;                                              5 COMMON     5     0      5
  3126 ;;                                              0 BANK0      2     2      0
  3127 ;;                             ___bmul
  3128 ;;                            _eeWrite
  3129 ;; ---------------------------------------------------------------------------------
  3130 ;; (2) _secListRead                                         15    13      2     687
  3131 ;;                                              5 COMMON     2     0      2
  3132 ;;                                              0 BANK0     13    13      0
  3133 ;;                             ___bmul
  3134 ;;                             _eeRead
  3135 ;; ---------------------------------------------------------------------------------
  3136 ;; (3) _log                                                  1     1      0      93
  3137 ;;                                              4 COMMON     1     1      0
  3138 ;;                            _eeWrite
  3139 ;; ---------------------------------------------------------------------------------
  3140 ;; (1) _rnd                                                 10     8      2     470
  3141 ;;                                              9 BANK0     10     8      2
  3142 ;;                             _eeRead
  3143 ;;                             ___lmul
  3144 ;;                            _eeWrite
  3145 ;;                            ___lwmod (ARG)
  3146 ;; ---------------------------------------------------------------------------------
  3147 ;; (2) ___aldiv                                             14     6      8     300
  3148 ;;                                              2 COMMON     8     0      8
  3149 ;;                                              0 BANK0      6     6      0
  3150 ;; ---------------------------------------------------------------------------------
  3151 ;; (3) ___lldiv                                             13     5      8     162
  3152 ;;                                              2 COMMON     8     0      8
  3153 ;;                                              0 BANK0      5     5      0
  3154 ;; ---------------------------------------------------------------------------------
  3155 ;; (2) ___lmul                                              12     4      8      92
  3156 ;;                                              2 COMMON     8     0      8
  3157 ;;                                              0 BANK0      4     4      0
  3158 ;; ---------------------------------------------------------------------------------
  3159 ;; (1) ___lwmod                                              5     1      4     232
  3160 ;;                                              4 BANK0      5     1      4
  3161 ;;                             _eeRead (ARG)
  3162 ;;                             ___lmul (ARG)
  3163 ;;                            _eeWrite (ARG)
  3164 ;; ---------------------------------------------------------------------------------
  3165 ;; (2) ___wmul                                               6     2      4      92
  3166 ;;                                              2 COMMON     6     2      4
  3167 ;; ---------------------------------------------------------------------------------
  3168 ;; (3) ___bmul                                               3     2      1     136
  3169 ;;                                              2 COMMON     3     2      1
  3170 ;; ---------------------------------------------------------------------------------
  3171 ;; (2) _ufatGetU32                                          17    13      4     111
  3172 ;;                                              2 COMMON     5     1      4
  3173 ;;                                              0 BANK0     12    12      0
  3174 ;; ---------------------------------------------------------------------------------
  3175 ;; (3) _ufatGetU16                                           3     1      2      67
  3176 ;;                                              2 COMMON     3     1      2
  3177 ;; ---------------------------------------------------------------------------------
  3178 ;; (5) _sdCrc7                                               7     5      2     303
  3179 ;;                                              2 COMMON     7     5      2
  3180 ;; ---------------------------------------------------------------------------------
  3181 ;; (2) _sdSpiInit                                            0     0      0       0
  3182 ;; ---------------------------------------------------------------------------------
  3183 ;; (2) _sdClockSpeed                                         3     3      0      46
  3184 ;;                                              2 COMMON     3     3      0
  3185 ;; ---------------------------------------------------------------------------------
  3186 ;; (1) _ufatOpen                                             2     0      2      22
  3187 ;;                                              2 COMMON     2     0      2
  3188 ;; ---------------------------------------------------------------------------------
  3189 ;; (1) _ufatInit                                             0     0      0       0
  3190 ;; ---------------------------------------------------------------------------------
  3191 ;; (2) _sdSpiByte                                            1     1      0      31
  3192 ;;                                              2 COMMON     1     1      0
  3193 ;; ---------------------------------------------------------------------------------
  3194 ;; (1) _sleep                                               11     7      4     183
  3195 ;;                                              2 COMMON     4     0      4
  3196 ;;                                              0 BANK0      7     7      0
  3197 ;; ---------------------------------------------------------------------------------
  3198 ;; (2) _audioOff                                             0     0      0       0
  3199 ;; ---------------------------------------------------------------------------------
  3200 ;; (2) _audioOn                                              4     4      0      68
  3201 ;;                                              2 COMMON     4     4      0
  3202 ;; ---------------------------------------------------------------------------------
  3203 ;; (4) _eeWrite                                              2     1      1      62
  3204 ;;                                              2 COMMON     2     1      1
  3205 ;; ---------------------------------------------------------------------------------
  3206 ;; (3) _eeRead                                               1     1      0      22
  3207 ;;                                              2 COMMON     1     1      0
  3208 ;; ---------------------------------------------------------------------------------
  3209 ;; Estimated maximum stack depth 5
  3210 ;; ---------------------------------------------------------------------------------
  3211 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
  3212 ;; ---------------------------------------------------------------------------------
  3213 ;; (8) _isr                                                  2     2      0      69
  3214 ;;                                              0 COMMON     2     2      0
  3215 ;; ---------------------------------------------------------------------------------
  3216 ;; Estimated maximum stack depth 8
  3217 ;; ---------------------------------------------------------------------------------
  3218 ;; Call Graph Graphs:
  3219 ;; _main (ROOT)
  3220 ;;   _measureBattery
  3221 ;;     ___aldiv
  3222 ;;   _fatal
  3223 ;;   _sdInit
  3224 ;;     _sdSpiInit
  3225 ;;     _sdClockSpeed
  3226 ;;     _sdSpiByte
  3227 ;;     _sdSpiResync
  3228 ;;     _sdPrvSimpleCommand
  3229 ;;       _sdSpiByte
  3230 ;;       _sdPrvSendCmd
  3231 ;;         _sdCrc7
  3232 ;;         _sdSpiByte
  3233 ;;       _sdPrvReadResp
  3234 ;;         _sdSpiByte
  3235 ;;     _sdPrvCardInit
  3236 ;;       _sdPrvSimpleCommand
  3237 ;;         _sdSpiByte
  3238 ;;         _sdPrvSendCmd
  3239 ;;           _sdCrc7
  3240 ;;           _sdSpiByte
  3241 ;;         _sdPrvReadResp
  3242 ;;           _sdSpiByte
  3243 ;;       _sdPrvACMD
  3244 ;;         _sdPrvSimpleCommand
  3245 ;;           _sdSpiByte
  3246 ;;           _sdPrvSendCmd
  3247 ;;             _sdCrc7
  3248 ;;             _sdSpiByte
  3249 ;;           _sdPrvReadResp
  3250 ;;             _sdSpiByte
  3251 ;;   _ufatInit
  3252 ;;   _ufatMount
  3253 ;;     _ufatExtRead
  3254 ;;       _sdSpiByte
  3255 ;;       _sdSecReadStop
  3256 ;;         _sdPrvSimpleCommand
  3257 ;;           _sdSpiByte
  3258 ;;           _sdPrvSendCmd
  3259 ;;             _sdCrc7
  3260 ;;             _sdSpiByte
  3261 ;;           _sdPrvReadResp
  3262 ;;             _sdSpiByte
  3263 ;;       _sdReadStart
  3264 ;;         _sdPrvSimpleCommand
  3265 ;;           _sdSpiByte
  3266 ;;           _sdPrvSendCmd
  3267 ;;             _sdCrc7
  3268 ;;             _sdSpiByte
  3269 ;;           _sdPrvReadResp
  3270 ;;             _sdSpiByte
  3271 ;;         _log
  3272 ;;           _eeWrite
  3273 ;;         _sdSpiByte
  3274 ;;     _ufatParsePartitionTable
  3275 ;;       _ufatExtRead
  3276 ;;         _sdSpiByte
  3277 ;;         _sdSecReadStop
  3278 ;;           _sdPrvSimpleCommand
  3279 ;;             _sdSpiByte
  3280 ;;             _sdPrvSendCmd
  3281 ;;               _sdCrc7
  3282 ;;               _sdSpiByte
  3283 ;;             _sdPrvReadResp
  3284 ;;               _sdSpiByte
  3285 ;;         _sdReadStart
  3286 ;;           _sdPrvSimpleCommand
  3287 ;;             _sdSpiByte
  3288 ;;             _sdPrvSendCmd
  3289 ;;               _sdCrc7
  3290 ;;               _sdSpiByte
  3291 ;;             _sdPrvReadResp
  3292 ;;               _sdSpiByte
  3293 ;;           _log
  3294 ;;             _eeWrite
  3295 ;;           _sdSpiByte
  3296 ;;     _ufatGetU16
  3297 ;;     ___wmul
  3298 ;;   _ufatGetNthFile
  3299 ;;     _ufatExtRead
  3300 ;;       _sdSpiByte
  3301 ;;       _sdSecReadStop
  3302 ;;         _sdPrvSimpleCommand
  3303 ;;           _sdSpiByte
  3304 ;;           _sdPrvSendCmd
  3305 ;;             _sdCrc7
  3306 ;;             _sdSpiByte
  3307 ;;           _sdPrvReadResp
  3308 ;;             _sdSpiByte
  3309 ;;       _sdReadStart
  3310 ;;         _sdPrvSimpleCommand
  3311 ;;           _sdSpiByte
  3312 ;;           _sdPrvSendCmd
  3313 ;;             _sdCrc7
  3314 ;;             _sdSpiByte
  3315 ;;           _sdPrvReadResp
  3316 ;;             _sdSpiByte
  3317 ;;         _log
  3318 ;;           _eeWrite
  3319 ;;         _sdSpiByte
  3320 ;;     _ufatGetU16
  3321 ;;     _ufatGetU32
  3322 ;;   _rnd
  3323 ;;     _eeRead
  3324 ;;     ___lmul
  3325 ;;     _eeWrite
  3326 ;;     ___lwmod (ARG)
  3327 ;;       _eeRead (ARG)
  3328 ;;       ___lmul (ARG)
  3329 ;;       _eeWrite (ARG)
  3330 ;;   ___lwmod
  3331 ;;     _eeRead (ARG)
  3332 ;;     ___lmul (ARG)
  3333 ;;     _eeWrite (ARG)
  3334 ;;   _ufatOpen
  3335 ;;   _secListWrite
  3336 ;;     ___bmul
  3337 ;;     _eeWrite
  3338 ;;   _ufatGetNextSectorRange
  3339 ;;     _ufatGetNextClus
  3340 ;;       _ufatExtRead
  3341 ;;         _sdSpiByte
  3342 ;;         _sdSecReadStop
  3343 ;;           _sdPrvSimpleCommand
  3344 ;;             _sdSpiByte
  3345 ;;             _sdPrvSendCmd
  3346 ;;               _sdCrc7
  3347 ;;               _sdSpiByte
  3348 ;;             _sdPrvReadResp
  3349 ;;               _sdSpiByte
  3350 ;;         _sdReadStart
  3351 ;;           _sdPrvSimpleCommand
  3352 ;;             _sdSpiByte
  3353 ;;             _sdPrvSendCmd
  3354 ;;               _sdCrc7
  3355 ;;               _sdSpiByte
  3356 ;;             _sdPrvReadResp
  3357 ;;               _sdSpiByte
  3358 ;;           _log
  3359 ;;             _eeWrite
  3360 ;;           _sdSpiByte
  3361 ;;       _ufatGetU16
  3362 ;;     ___lmul
  3363 ;;   _ufatExtReadTerminate
  3364 ;;     _ufatExtRead
  3365 ;;       _sdSpiByte
  3366 ;;       _sdSecReadStop
  3367 ;;         _sdPrvSimpleCommand
  3368 ;;           _sdSpiByte
  3369 ;;           _sdPrvSendCmd
  3370 ;;             _sdCrc7
  3371 ;;             _sdSpiByte
  3372 ;;           _sdPrvReadResp
  3373 ;;             _sdSpiByte
  3374 ;;       _sdReadStart
  3375 ;;         _sdPrvSimpleCommand
  3376 ;;           _sdSpiByte
  3377 ;;           _sdPrvSendCmd
  3378 ;;             _sdCrc7
  3379 ;;             _sdSpiByte
  3380 ;;           _sdPrvReadResp
  3381 ;;             _sdSpiByte
  3382 ;;         _log
  3383 ;;           _eeWrite
  3384 ;;         _sdSpiByte
  3385 ;;   _play
  3386 ;;     _audioOn
  3387 ;;     _secListRead
  3388 ;;       ___bmul
  3389 ;;       _eeRead
  3390 ;;     _sdReadStart
  3391 ;;       _sdPrvSimpleCommand
  3392 ;;         _sdSpiByte
  3393 ;;         _sdPrvSendCmd
  3394 ;;           _sdCrc7
  3395 ;;           _sdSpiByte
  3396 ;;         _sdPrvReadResp
  3397 ;;           _sdSpiByte
  3398 ;;       _log
  3399 ;;         _eeWrite
  3400 ;;       _sdSpiByte
  3401 ;;     _fatal
  3402 ;;     _hdrProcess
  3403 ;;       _spiCmp
  3404 ;;         _byte
  3405 ;;           _sdSpiByte
  3406 ;;       _byte
  3407 ;;         _sdSpiByte
  3408 ;;       ___bmul
  3409 ;;       ___lldiv
  3410 ;;       _sdSpiByte
  3411 ;;     _sdSecReadStop
  3412 ;;       _sdPrvSimpleCommand
  3413 ;;         _sdSpiByte
  3414 ;;         _sdPrvSendCmd
  3415 ;;           _sdCrc7
  3416 ;;           _sdSpiByte
  3417 ;;         _sdPrvReadResp
  3418 ;;           _sdSpiByte
  3419 ;;     _sdNextSec
  3420 ;;       _sdSpiByte
  3421 ;;     _sdSpiByte
  3422 ;;     _audioOff
  3423 ;;   _sleep
  3424 ;;
  3425 ;; _isr (ROOT)
  3426 ;;
  3427 ;; Address spaces:
  3428 ;;Name               Size   Autos  Total    Cost      Usage
  3429 ;;BIGRAM              F0      0       0       0        0.0%
  3430 ;;EEDATA             100      0       0       0        0.0%
  3431 ;;NULL                 0      0       0       0        0.0%
  3432 ;;CODE                 0      0       0       0        0.0%
  3433 ;;BITCOMMON            E      0       0       1        0.0%
  3434 ;;BITSFR0              0      0       0       1        0.0%
  3435 ;;SFR0                 0      0       0       1        0.0%
  3436 ;;COMMON               E      A       C       2       85.7%
  3437 ;;BITSFR1              0      0       0       2        0.0%
  3438 ;;SFR1                 0      0       0       2        0.0%
  3439 ;;BITSFR2              0      0       0       3        0.0%
  3440 ;;SFR2                 0      0       0       3        0.0%
  3441 ;;STACK                0      0       7       3        0.0%
  3442 ;;BITSFR3              0      0       0       4        0.0%
  3443 ;;SFR3                 0      0       0       4        0.0%
  3444 ;;ABS                  0      0      97       4        0.0%
  3445 ;;BITBANK0            50      0       0       5        0.0%
  3446 ;;BITSFR4              0      0       0       5        0.0%
  3447 ;;SFR4                 0      0       0       5        0.0%
  3448 ;;BANK0               50     49      4E       6       97.5%
  3449 ;;BITSFR5              0      0       0       6        0.0%
  3450 ;;SFR5                 0      0       0       6        0.0%
  3451 ;;BITBANK1            50      0       0       7        0.0%
  3452 ;;BITSFR6              0      0       0       7        0.0%
  3453 ;;SFR6                 0      0       0       7        0.0%
  3454 ;;BANK1               46     28      3D       8       87.1%
  3455 ;;BITSFR7              0      0       0       8        0.0%
  3456 ;;SFR7                 0      0       0       8        0.0%
  3457 ;;BITBANK2            50      0       0       9        0.0%
  3458 ;;BITSFR8              0      0       0       9        0.0%
  3459 ;;SFR8                 0      0       0       9        0.0%
  3460 ;;BITSFR9              0      0       0      10        0.0%
  3461 ;;SFR9                 0      0       0      10        0.0%
  3462 ;;BANK2                0      0       0      10        0.0%
  3463 ;;BITSFR10             0      0       0      11        0.0%
  3464 ;;SFR10                0      0       0      11        0.0%
  3465 ;;DATA                 0      0      9E      11        0.0%
  3466 ;;BITSFR11             0      0       0      12        0.0%
  3467 ;;SFR11                0      0       0      12        0.0%
  3468 ;;BITSFR12             0      0       0      13        0.0%
  3469 ;;SFR12                0      0       0      13        0.0%
  3470 ;;BITSFR13             0      0       0      14        0.0%
  3471 ;;SFR13                0      0       0      14        0.0%
  3472 ;;BITSFR14             0      0       0      15        0.0%
  3473 ;;SFR14                0      0       0      15        0.0%
  3474 ;;BITSFR15             0      0       0      16        0.0%
  3475 ;;SFR15                0      0       0      16        0.0%
  3476 ;;BITSFR16             0      0       0      17        0.0%
  3477 ;;SFR16                0      0       0      17        0.0%
  3478 ;;BITSFR17             0      0       0      18        0.0%
  3479 ;;SFR17                0      0       0      18        0.0%
  3480 ;;BITSFR18             0      0       0      19        0.0%
  3481 ;;SFR18                0      0       0      19        0.0%
  3482 ;;BITSFR19             0      0       0      20        0.0%
  3483 ;;SFR19                0      0       0      20        0.0%
  3484 ;;BITSFR20             0      0       0      21        0.0%
  3485 ;;SFR20                0      0       0      21        0.0%
  3486 ;;BITSFR21             0      0       0      22        0.0%
  3487 ;;SFR21                0      0       0      22        0.0%
  3488 ;;BITSFR22             0      0       0      23        0.0%
  3489 ;;SFR22                0      0       0      23        0.0%
  3490 ;;BITSFR23             0      0       0      24        0.0%
  3491 ;;SFR23                0      0       0      24        0.0%
  3492 ;;BITSFR24             0      0       0      25        0.0%
  3493 ;;SFR24                0      0       0      25        0.0%
  3494 ;;BITSFR25             0      0       0      26        0.0%
  3495 ;;SFR25                0      0       0      26        0.0%
  3496 ;;BITSFR26             0      0       0      27        0.0%
  3497 ;;SFR26                0      0       0      27        0.0%
  3498 ;;BITSFR27             0      0       0      28        0.0%
  3499 ;;SFR27                0      0       0      28        0.0%
  3500 ;;BITSFR28             0      0       0      29        0.0%
  3501 ;;SFR28                0      0       0      29        0.0%
  3502 ;;BITSFR29             0      0       0      30        0.0%
  3503 ;;SFR29                0      0       0      30        0.0%
  3504 ;;BITSFR30             0      0       0      31        0.0%
  3505 ;;SFR30                0      0       0      31        0.0%
  3506 ;;BITSFR31             0      0       0      32        0.0%
  3507 ;;SFR31                0      0       0      32        0.0%
  3508                           
  3509                           
  3510 ;; *************** function _main *****************
  3511 ;; Defined at:
  3512 ;;		line 425 in file "C:\Program Files\Microchip\Project\SingleChipPlayer\main.c"
  3513 ;; Parameters:    Size  Location     Type
  3514 ;;		None
  3515 ;; Auto vars:     Size  Location     Type
  3516 ;;  sv              2   28[BANK1 ] unsigned short 
  3517 ;;  j               1   25[BANK1 ] unsigned char 
  3518 ;;  name           11    4[BANK1 ] unsigned char [11]
  3519 ;;  sz              4   36[BANK1 ] unsigned long 
  3520 ;;  sec             4   21[BANK1 ] unsigned long 
  3521 ;;  id              2   32[BANK1 ] unsigned short 
  3522 ;;  n               2   30[BANK1 ] unsigned short 
  3523 ;;  i               2   26[BANK1 ] unsigned short 
  3524 ;;  numFiles        2   19[BANK1 ] unsigned short 
  3525 ;;  flags           1   35[BANK1 ] unsigned char 
  3526 ;;  ret             1   34[BANK1 ] unsigned char 
  3527 ;; Return value:  Size  Location     Type
  3528 ;;		None               void
  3529 ;; Registers used:
  3530 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, pclath, cstack
  3531 ;; Tracked objects:
  3532 ;;		On entry : 17F/0
  3533 ;;		On exit  : 1E/0
  3534 ;;		Unchanged: 0/0
  3535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3536 ;;      Params:         0       0       0       0
  3537 ;;      Locals:         0       0      36       0
  3538 ;;      Temps:          0       0       4       0
  3539 ;;      Totals:         0       0      40       0
  3540 ;;Total ram usage:       40 bytes
  3541 ;; Hardware stack levels required when called:    8
  3542 ;; This function calls:
  3543 ;;		_measureBattery
  3544 ;;		_fatal
  3545 ;;		_sdInit
  3546 ;;		_ufatInit
  3547 ;;		_ufatMount
  3548 ;;		_ufatGetNthFile
  3549 ;;		_rnd
  3550 ;;		___lwmod
  3551 ;;		_ufatOpen
  3552 ;;		_secListWrite
  3553 ;;		_ufatGetNextSectorRange
  3554 ;;		_ufatExtReadTerminate
  3555 ;;		_play
  3556 ;;		_sleep
  3557 ;; This function is called by:
  3558 ;;		Startup code after reset
  3559 ;; This function uses a non-reentrant model
  3560 ;;
  3561  0872                     _main:	
  3562                           
  3563                           ;main.c: 427: Boolean ret;
  3564                           ;main.c: 428: char name[11];
  3565                           ;main.c: 429: UInt8 flags;
  3566                           ;main.c: 430: UInt16 n, i = 0, id, numFiles = 0;
  3567                           
  3568                           ; Regs used in _main: [allreg]
  3569  0872  0021               	movlb	1	; select bank1
  3570  0873  01BA               	clrf	main@i^(0+128)
  3571  0874  01BB               	clrf	(main@i+1)^(0+128)
  3572  0875  01B3               	clrf	main@numFiles^(0+128)
  3573  0876  01B4               	clrf	(main@numFiles+1)^(0+128)
  3574                           
  3575                           ;main.c: 431: UInt32 sec, sz;
  3576                           ;main.c: 433: OSCCON = 0b11110000;
  3577  0877  30F0               	movlw	240
  3578  0878  0099               	movwf	25	;volatile
  3579                           
  3580                           ;main.c: 434: OSCTUNE = 0x1F;
  3581  0879  301F               	movlw	31
  3582  087A  0098               	movwf	24	;volatile
  3583                           
  3584                           ;main.c: 435: INTCON = 0b10000000;
  3585  087B  3080               	movlw	128
  3586  087C  008B               	movwf	11	;volatile
  3587                           
  3588                           ;main.c: 436: APFCON = 0b01000001;
  3589  087D  3041               	movlw	65
  3590  087E  0022               	movlb	2	; select bank2
  3591  087F  009D               	movwf	29	;volatile
  3592                           
  3593                           ;main.c: 437: TRISA = 0b11001100;
  3594  0880  30CC               	movlw	204
  3595  0881  0021               	movlb	1	; select bank1
  3596  0882  008C               	movwf	12	;volatile
  3597                           
  3598                           ;main.c: 438: ANSELA = 0;
  3599  0883  0023               	movlb	3	; select bank3
  3600  0884  018C               	clrf	12	;volatile
  3601                           
  3602                           ;main.c: 439: OPTION_REG = 0b10000000;
  3603  0885  3080               	movlw	128
  3604  0886  0021               	movlb	1	; select bank1
  3605  0887  0095               	movwf	21	;volatile
  3606                           
  3607                           ;main.c: 441: SWDTEN = 0;
  3608  0888  1017               	bcf	23,0
  3609                           
  3610                           ;main.c: 443: _delay((unsigned long)((64)*(33000000/4000.0)));
  3611  0889  3003               	movlw	3
  3612  088A  00A2               	movwf	(??_main^(0+128)+2)
  3613  088B  30AC               	movlw	172
  3614  088C  00A1               	movwf	(??_main^(0+128)+1)
  3615  088D  30B3               	movlw	179
  3616  088E  00A0               	movwf	??_main^(0+128)
  3617  088F                     u5037:	
  3618  088F  0BA0               	decfsz	??_main^(0+128),f
  3619  0890  288F               	goto	u5037
  3620  0891  0BA1               	decfsz	(??_main^(0+128)+1),f
  3621  0892  288F               	goto	u5037
  3622  0893  0BA2               	decfsz	(??_main^(0+128)+2),f
  3623  0894  288F               	goto	u5037
  3624  0895  0064               	clrwdt
  3625                           
  3626                           ;main.c: 444: _delay((unsigned long)((500)*(33000000/4000.0)));
  3627  0896  3015               	movlw	21
  3628  0897  0021               	movlb	1	; select bank1
  3629  0898  00A2               	movwf	(??_main^(0+128)+2)
  3630  0899  30DA               	movlw	218
  3631  089A  00A1               	movwf	(??_main^(0+128)+1)
  3632  089B  3020               	movlw	32
  3633  089C  00A0               	movwf	??_main^(0+128)
  3634  089D                     u5047:	
  3635  089D  0BA0               	decfsz	??_main^(0+128),f
  3636  089E  289D               	goto	u5047
  3637  089F  0BA1               	decfsz	(??_main^(0+128)+1),f
  3638  08A0  289D               	goto	u5047
  3639  08A1  0BA2               	decfsz	(??_main^(0+128)+2),f
  3640  08A2  289D               	goto	u5047
  3641  08A3  28A4               	nop2
  3642                           
  3643                           ;main.c: 446: n = measureBattery();
  3644  08A4  3181  2141  3188   	fcall	_measureBattery
  3645  08A7  0827               	movf	?_measureBattery+1,w
  3646  08A8  0021               	movlb	1	; select bank1
  3647  08A9  00BF               	movwf	(main@n+1)^(0+128)
  3648  08AA  0020               	movlb	0	; select bank0
  3649  08AB  0826               	movf	?_measureBattery,w
  3650  08AC  0021               	movlb	1	; select bank1
  3651  08AD  00BE               	movwf	main@n^(0+128)
  3652                           
  3653                           ;main.c: 447: if(n > 3600) fatal(10);
  3654  08AE  300E               	movlw	14
  3655  08AF  023F               	subwf	(main@n+1)^(0+128),w
  3656  08B0  3011               	movlw	17
  3657  08B1  1903               	skipnz
  3658  08B2  023E               	subwf	main@n^(0+128),w
  3659  08B3  1C03               	skipc
  3660  08B4  28B8               	goto	l6747
  3661  08B5  300A               	movlw	10
  3662  08B6  21C8  3188         	fcall	_fatal
  3663  08B8                     l6747:	
  3664                           
  3665                           ;main.c: 448: if(n < 2500) fatal(11);
  3666  08B8  3009               	movlw	9
  3667  08B9  0021               	movlb	1	; select bank1
  3668  08BA  023F               	subwf	(main@n+1)^(0+128),w
  3669  08BB  30C4               	movlw	196
  3670  08BC  1903               	skipnz
  3671  08BD  023E               	subwf	main@n^(0+128),w
  3672  08BE  1803               	skipnc
  3673  08BF  28C3               	goto	l6751
  3674  08C0  300B               	movlw	11
  3675  08C1  21C8  3188         	fcall	_fatal
  3676  08C3                     l6751:	
  3677                           
  3678                           ;main.c: 450: RA0 = 1;
  3679  08C3  0020               	movlb	0	; select bank0
  3680  08C4  140C               	bsf	12,0
  3681                           
  3682                           ;main.c: 451: ret = sdInit();
  3683  08C5  2626  3188         	fcall	_sdInit
  3684  08C7  0021               	movlb	1	; select bank1
  3685  08C8  00C2               	movwf	main@ret^(0+128)
  3686                           
  3687                           ;main.c: 452: if(!ret) fatal(1);
  3688  08C9  08C2               	movf	main@ret^(0+128),f
  3689  08CA  1D03               	skipz
  3690  08CB  28CF               	goto	l6759
  3691  08CC  3001               	movlw	1
  3692  08CD  21C8  3188         	fcall	_fatal
  3693  08CF                     l6759:	
  3694                           
  3695                           ;main.c: 454: ufatInit();
  3696  08CF  2787  3188         	fcall	_ufatInit
  3697                           
  3698                           ;main.c: 455: ret = ufatMount();
  3699  08D1  26DB  3188         	fcall	_ufatMount
  3700  08D3  0021               	movlb	1	; select bank1
  3701  08D4  00C2               	movwf	main@ret^(0+128)
  3702                           
  3703                           ;main.c: 456: if(!ret) fatal(6);
  3704  08D5  08C2               	movf	main@ret^(0+128),f
  3705  08D6  1D03               	skipz
  3706  08D7  28DB               	goto	l6781
  3707  08D8  3006               	movlw	6
  3708  08D9  21C8  3188         	fcall	_fatal
  3709  08DB                     l6781:	
  3710  08DB  0021               	movlb	1	; select bank1
  3711  08DC  27AE  3188         	fcall	PL8	;call to abstracted procedure
  3712  08DE  2356  3188         	fcall	_ufatGetNthFile
  3713  08E0  3800               	iorlw	0
  3714  08E1  1903               	btfsc	3,2
  3715  08E2  28FB               	goto	l6783
  3716                           
  3717                           ;main.c: 459: i++;
  3718  08E3  0021               	movlb	1	; select bank1
  3719  08E4  0ABA               	incf	main@i^(0+128),f
  3720  08E5  1903               	skipnz
  3721  08E6  0ABB               	incf	(main@i+1)^(0+128),f
  3722                           
  3723                           ;main.c: 460: if(flags & (16 | 2)) continue;
  3724  08E7  0843               	movf	main@flags^(0+128),w
  3725  08E8  3912               	andlw	18
  3726  08E9  1D03               	btfss	3,2
  3727  08EA  28DB               	goto	l6781
  3728                           
  3729                           ;main.c: 461: if(name[8] !='W' || name[9] != 'A' || name[10] != 'V') continue;
  3730  08EB  082C               	movf	(main@name^(0+128)+8),w
  3731  08EC  3A57               	xorlw	87
  3732  08ED  1D03               	skipz
  3733  08EE  28DB               	goto	l6781
  3734  08EF  082D               	movf	(main@name^(0+128)+9),w
  3735  08F0  3A41               	xorlw	65
  3736  08F1  1D03               	skipz
  3737  08F2  28DB               	goto	l6781
  3738  08F3  082E               	movf	(main@name^(0+128)+10),w
  3739  08F4  3A56               	xorlw	86
  3740  08F5  1D03               	btfss	3,2
  3741  08F6  28DB               	goto	l6781
  3742                           
  3743                           ;main.c: 462: numFiles++;
  3744  08F7  0AB3               	incf	main@numFiles^(0+128),f
  3745  08F8  1903               	skipnz
  3746  08F9  0AB4               	incf	(main@numFiles+1)^(0+128),f
  3747  08FA  28DB               	goto	l6781
  3748  08FB                     l6783:	
  3749                           
  3750                           ;main.c: 463: }
  3751                           ;main.c: 465: if(!numFiles) fatal(3);
  3752  08FB  0021               	movlb	1	; select bank1
  3753  08FC  0834               	movf	(main@numFiles+1)^(0+128),w
  3754  08FD  0433               	iorwf	main@numFiles^(0+128),w
  3755  08FE  1D03               	skipz
  3756  08FF  2903               	goto	l1267
  3757  0900  3003               	movlw	3
  3758  0901                     L1:	
  3759  0901  21C8  3188         	fcall	_fatal
  3760  0903                     l1267:	
  3761                           ;main.c: 467: while(1){
  3762                           
  3763                           
  3764                           ;main.c: 469: UInt8 j;
  3765                           ;main.c: 471: n = rnd() % numFiles;
  3766  0903  0021               	movlb	1	; select bank1
  3767  0904  0834               	movf	(main@numFiles+1)^(0+128),w
  3768  0905  0020               	movlb	0	; select bank0
  3769  0906  00A5               	movwf	?___lwmod+1
  3770  0907  0021               	movlb	1	; select bank1
  3771  0908  0833               	movf	main@numFiles^(0+128),w
  3772  0909  0020               	movlb	0	; select bank0
  3773  090A  00A4               	movwf	?___lwmod
  3774  090B  2240               	fcall	_rnd
  3775  090C  082A               	movf	?_rnd+1,w
  3776  090D  00A7               	movwf	?___lwmod+3
  3777  090E  0829               	movf	?_rnd,w
  3778  090F  00A6               	movwf	?___lwmod+2
  3779  0910  3184  2431  3188   	fcall	___lwmod
  3780  0913  0825               	movf	?___lwmod+1,w
  3781  0914  0021               	movlb	1	; select bank1
  3782  0915  00BF               	movwf	(main@n+1)^(0+128)
  3783  0916  0020               	movlb	0	; select bank0
  3784  0917  0824               	movf	?___lwmod,w
  3785  0918  0021               	movlb	1	; select bank1
  3786  0919  00BE               	movwf	main@n^(0+128)
  3787                           
  3788                           ;main.c: 473: i = 0;
  3789  091A  01BA               	clrf	main@i^(0+128)
  3790  091B  01BB               	clrf	(main@i+1)^(0+128)
  3791  091C                     l6805:	
  3792                           ;main.c: 474: while(ufatGetNthFile(i, name, &sz, &flags, &id)){
  3793                           
  3794  091C  27AE  3188         	fcall	PL8	;call to abstracted procedure
  3795  091E  2356  3188         	fcall	_ufatGetNthFile
  3796  0920  3800               	iorlw	0
  3797  0921  1903               	btfsc	3,2
  3798  0922  2941               	goto	l6807
  3799                           
  3800                           ;main.c: 475: i++;
  3801  0923  0021               	movlb	1	; select bank1
  3802  0924  0ABA               	incf	main@i^(0+128),f
  3803  0925  1903               	skipnz
  3804  0926  0ABB               	incf	(main@i+1)^(0+128),f
  3805                           
  3806                           ;main.c: 476: if(flags & (16 | 2)) continue;
  3807  0927  0843               	movf	main@flags^(0+128),w
  3808  0928  3912               	andlw	18
  3809  0929  1D03               	btfss	3,2
  3810  092A  291C               	goto	l6805
  3811                           
  3812                           ;main.c: 477: if(name[8] !='W' || name[9] != 'A' || name[10] != 'V') continue;
  3813  092B  082C               	movf	(main@name^(0+128)+8),w
  3814  092C  3A57               	xorlw	87
  3815  092D  1D03               	skipz
  3816  092E  291C               	goto	l6805
  3817  092F  082D               	movf	(main@name^(0+128)+9),w
  3818  0930  3A41               	xorlw	65
  3819  0931  1D03               	skipz
  3820  0932  291C               	goto	l6805
  3821  0933  082E               	movf	(main@name^(0+128)+10),w
  3822  0934  3A56               	xorlw	86
  3823  0935  1D03               	btfss	3,2
  3824  0936  291C               	goto	l6805
  3825                           
  3826                           ;main.c: 478: if(!n--) goto found;
  3827  0937  3001               	movlw	1
  3828  0938  02BE               	subwf	main@n^(0+128),f
  3829  0939  3000               	movlw	0
  3830  093A  3BBF               	subwfb	(main@n+1)^(0+128),f
  3831  093B  0A3E               	incf	main@n^(0+128),w
  3832  093C  1903               	skipnz
  3833  093D  0A3F               	incf	(main@n+1)^(0+128),w
  3834  093E  1903               	btfsc	3,2
  3835  093F  2944               	goto	l6809
  3836  0940  291C               	goto	l6805
  3837  0941                     l6807:	
  3838                           
  3839                           ;main.c: 479: }
  3840                           ;main.c: 481: fatal(9);
  3841  0941  3009               	movlw	9
  3842  0942  21C8  3188         	fcall	_fatal
  3843  0944                     l6809:	
  3844                           
  3845                           ;main.c: 484: if(!ufatOpen(id)) fatal(7);
  3846  0944  0021               	movlb	1	; select bank1
  3847  0945  0841               	movf	(main@id+1)^(0+128),w
  3848  0946  00F3               	movwf	?_ufatOpen+1
  3849  0947  0840               	movf	main@id^(0+128),w
  3850  0948  00F2               	movwf	?_ufatOpen
  3851  0949  27FB  3188         	fcall	_ufatOpen
  3852  094B  3800               	iorlw	0
  3853  094C  1D03               	skipz
  3854  094D  2951               	goto	l6813
  3855  094E  3007               	movlw	7
  3856  094F  21C8  3188         	fcall	_fatal
  3857  0951                     l6813:	
  3858                           
  3859                           ;main.c: 486: j = 0;
  3860  0951  0021               	movlb	1	; select bank1
  3861  0952  01B9               	clrf	main@j^(0+128)
  3862                           
  3863                           ;main.c: 487: while(ufatGetNextSectorRange(&sec, &sz)){
  3864  0953  299D               	goto	l6829
  3865  0954                     l6815:	
  3866                           
  3867                           ;main.c: 489: UInt16 sv = sz > 65535 ? 65535 : sz;
  3868  0954  0847               	movf	(main@sz+3)^(0+128),w
  3869  0955  00B2               	movwf	(_main$2046+3)^(0+128)
  3870  0956  0846               	movf	(main@sz+2)^(0+128),w
  3871  0957  00B1               	movwf	(_main$2046+2)^(0+128)
  3872  0958  0845               	movf	(main@sz+1)^(0+128),w
  3873  0959  00B0               	movwf	(_main$2046+1)^(0+128)
  3874  095A  0844               	movf	main@sz^(0+128),w
  3875  095B  00AF               	movwf	_main$2046^(0+128)
  3876  095C  0845               	movf	(main@sz^(0+128)+1),w
  3877  095D  00A0               	movwf	??_main^(0+128)
  3878  095E  0846               	movf	(main@sz^(0+128)+2),w
  3879  095F  00A1               	movwf	(??_main^(0+128)+1)
  3880  0960  0847               	movf	(main@sz^(0+128)+3),w
  3881  0961  00A2               	movwf	(??_main^(0+128)+2)
  3882  0962  0821               	movf	(??_main^(0+128)+1),w
  3883  0963  00A0               	movwf	??_main^(0+128)
  3884  0964  0822               	movf	(??_main^(0+128)+2),w
  3885  0965  00A1               	movwf	(??_main^(0+128)+1)
  3886  0966  01A2               	clrf	(??_main^(0+128)+2)
  3887  0967  0420               	iorwf	??_main^(0+128),w
  3888  0968  1903               	skipnz
  3889  0969  296F               	goto	l1283
  3890  096A  01B2               	clrf	(_main$2046+3)^(0+128)
  3891  096B  01B1               	clrf	(_main$2046+2)^(0+128)
  3892  096C  30FF               	movlw	255
  3893  096D  00B0               	movwf	(_main$2046+1)^(0+128)
  3894  096E  00AF               	movwf	_main$2046^(0+128)
  3895  096F                     l1283:	
  3896  096F  0830               	movf	(_main$2046+1)^(0+128),w
  3897  0970  00BD               	movwf	(main@sv+1)^(0+128)
  3898  0971  082F               	movf	_main$2046^(0+128),w
  3899  0972  00BC               	movwf	main@sv^(0+128)
  3900                           
  3901                           ;main.c: 490: secListWrite(j++, sec, sv);
  3902  0973  0835               	movf	main@sec^(0+128),w
  3903  0974  00F5               	movwf	?_secListWrite
  3904  0975  0836               	movf	(main@sec+1)^(0+128),w
  3905  0976  00F6               	movwf	?_secListWrite+1
  3906  0977  0837               	movf	(main@sec+2)^(0+128),w
  3907  0978  00F7               	movwf	?_secListWrite+2
  3908  0979  083D               	movf	(main@sv+1)^(0+128),w
  3909  097A  00F9               	movwf	?_secListWrite+4
  3910  097B  083C               	movf	main@sv^(0+128),w
  3911  097C  00F8               	movwf	?_secListWrite+3
  3912  097D  0839               	movf	main@j^(0+128),w
  3913  097E  220F  3188         	fcall	_secListWrite
  3914  0980  0021               	movlb	1	; select bank1
  3915  0981  0AB9               	incf	main@j^(0+128),f
  3916                           
  3917                           ;main.c: 491: sec += sv;
  3918  0982  083C               	movf	main@sv^(0+128),w
  3919  0983  07B5               	addwf	main@sec^(0+128),f
  3920  0984  083D               	movf	(main@sv+1)^(0+128),w
  3921  0985  3DB6               	addwfc	(main@sec+1)^(0+128),f
  3922  0986  3000               	movlw	0
  3923  0987  3DB7               	addwfc	(main@sec+2)^(0+128),f
  3924  0988  3DB8               	addwfc	(main@sec+3)^(0+128),f
  3925                           
  3926                           ;main.c: 492: sz -= sv;
  3927  0989  083C               	movf	main@sv^(0+128),w
  3928  098A  00A0               	movwf	??_main^(0+128)
  3929  098B  083D               	movf	(main@sv+1)^(0+128),w
  3930  098C  00A1               	movwf	(??_main^(0+128)+1)
  3931  098D  01A2               	clrf	(??_main^(0+128)+2)
  3932  098E  01A3               	clrf	(??_main^(0+128)+3)
  3933  098F  0820               	movf	??_main^(0+128),w
  3934  0990  02C4               	subwf	main@sz^(0+128),f
  3935  0991  0821               	movf	(??_main+1)^(0+128),w
  3936  0992  3BC5               	subwfb	(main@sz+1)^(0+128),f
  3937  0993  0822               	movf	(??_main+2)^(0+128),w
  3938  0994  3BC6               	subwfb	(main@sz+2)^(0+128),f
  3939  0995  0823               	movf	(??_main+3)^(0+128),w
  3940  0996  3BC7               	subwfb	(main@sz+3)^(0+128),f
  3941  0997                     l6827:	
  3942  0997  0847               	movf	(main@sz+3)^(0+128),w
  3943  0998  0446               	iorwf	(main@sz+2)^(0+128),w
  3944  0999  0445               	iorwf	(main@sz+1)^(0+128),w
  3945  099A  0444               	iorwf	main@sz^(0+128),w
  3946  099B  1D03               	skipz
  3947  099C  2954               	goto	l6815
  3948  099D                     l6829:	
  3949  099D  30C4               	movlw	main@sz& (0+255)
  3950  099E  0020               	movlb	0	; select bank0
  3951  099F  00C8               	movwf	?_ufatGetNextSectorRange
  3952  09A0  30B5               	movlw	main@sec& (0+255)
  3953  09A1  3180  202F  3188   	fcall	_ufatGetNextSectorRange
  3954  09A4  3800               	iorlw	0
  3955  09A5  1D03               	skipz
  3956  09A6  2997               	goto	l6827
  3957                           
  3958                           ;main.c: 493: }
  3959                           ;main.c: 494: }
  3960                           ;main.c: 495: secListWrite(j, 0, 0);
  3961  09A7  01F5               	clrf	?_secListWrite
  3962  09A8  01F6               	clrf	?_secListWrite+1
  3963  09A9  01F7               	clrf	?_secListWrite+2
  3964  09AA  01F8               	clrf	?_secListWrite+3
  3965  09AB  01F9               	clrf	?_secListWrite+4
  3966  09AC  0839               	movf	main@j^(0+128),w
  3967  09AD  220F               	fcall	_secListWrite
  3968                           
  3969                           ;main.c: 496: ufatExtReadTerminate();
  3970  09AE  3184  24A9  3188   	fcall	_ufatExtReadTerminate
  3971                           
  3972                           ;main.c: 498: play();
  3973  09B1  22BA               	fcall	_play
  3974                           
  3975                           ;main.c: 499: RA0 = 0;
  3976  09B2  100C               	bcf	12,0
  3977                           
  3978                           ;main.c: 501: sleep(30000);
  3979  09B3  01F5               	clrf	?_sleep+3
  3980  09B4  01F4               	clrf	?_sleep+2
  3981  09B5  3075               	movlw	117
  3982  09B6  00F3               	movwf	?_sleep+1
  3983  09B7  3030               	movlw	48
  3984  09B8  00F2               	movwf	?_sleep
  3985  09B9  3182  22F1  3188   	fcall	_sleep
  3986                           
  3987                           ;main.c: 503: RA0 = 1;
  3988  09BC  0020               	movlb	0	; select bank0
  3989  09BD  140C               	bsf	12,0
  3990                           
  3991                           ;main.c: 504: ret = sdInit();
  3992  09BE  2626  3188         	fcall	_sdInit
  3993  09C0  0021               	movlb	1	; select bank1
  3994  09C1  00C2               	movwf	main@ret^(0+128)
  3995                           
  3996                           ;main.c: 505: if(!ret) fatal(1);
  3997  09C2  08C2               	movf	main@ret^(0+128),f
  3998  09C3  1D03               	skipz
  3999  09C4  2903               	goto	l1267
  4000  09C5  3001               	movlw	1
  4001  09C6  2901               	goto	L1
  4002  09C7                     l1290:	
  4003  09C7  29C7               	goto	l1290
  4004  09C8                     __end_of_main:	
  4005  09C8                     __ptext1577:	
  4006 ;; =============== function _byte ends ============
  4007                           
  4008                           
  4009 ;; *************** function _fatal *****************
  4010 ;; Defined at:
  4011 ;;		line 105 in file "C:\Program Files\Microchip\Project\SingleChipPlayer\main.c"
  4012 ;; Parameters:    Size  Location     Type
  4013 ;;  val             1    wreg     unsigned char 
  4014 ;; Auto vars:     Size  Location     Type
  4015 ;;  val             1    5[COMMON] unsigned char 
  4016 ;;  j               1    8[COMMON] unsigned char 
  4017 ;;  i               1    7[COMMON] unsigned char 
  4018 ;;  k               1    6[COMMON] unsigned char 
  4019 ;; Return value:  Size  Location     Type
  4020 ;;		None               void
  4021 ;; Registers used:
  4022 ;;		wreg, status,2, status,0
  4023 ;; Tracked objects:
  4024 ;;		On entry : 1E/1
  4025 ;;		On exit  : 1E/0
  4026 ;;		Unchanged: 0/0
  4027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4028 ;;      Params:         0       0       0       0
  4029 ;;      Locals:         4       0       0       0
  4030 ;;      Temps:          3       0       0       0
  4031 ;;      Totals:         7       0       0       0
  4032 ;;Total ram usage:        7 bytes
  4033 ;; Hardware stack levels used:    1
  4034 ;; Hardware stack levels required when called:    1
  4035 ;; This function calls:
  4036 ;;		Nothing
  4037 ;; This function is called by:
  4038 ;;		_play
  4039 ;;		_main
  4040 ;; This function uses a non-reentrant model
  4041 ;;
  4042  09C8                     _fatal:	
  4043                           
  4044                           ; Regs used in _fatal: [wreg+status,2+status,0]
  4045                           ;fatal@val stored from wreg
  4046  09C8  00F5               	movwf	fatal@val
  4047                           
  4048                           ;main.c: 107: UInt8 i, j, k;
  4049                           ;main.c: 109: for(j = 0; j < 5; j++){
  4050  09C9  01F8               	clrf	fatal@j
  4051  09CA                     l4779:	
  4052                           
  4053                           ;main.c: 111: for(k = 0; k < val; k++){
  4054  09CA  01F6               	clrf	fatal@k
  4055  09CB                     l4799:	
  4056  09CB  0875               	movf	fatal@val,w
  4057  09CC  0276               	subwf	fatal@k,w
  4058  09CD  1803               	btfsc	3,0
  4059  09CE  29FA               	goto	l4801
  4060                           
  4061                           ;main.c: 112: _delay((unsigned long)((300)*(33000000/4000.0)));
  4062  09CF  300D               	movlw	13
  4063  09D0  00F4               	movwf	??_fatal+2
  4064  09D1  3083               	movlw	131
  4065  09D2  00F3               	movwf	??_fatal+1
  4066  09D3  3045               	movlw	69
  4067  09D4  00F2               	movwf	??_fatal
  4068  09D5                     u5107:	
  4069  09D5  0BF2               	decfsz	??_fatal,f
  4070  09D6  29D5               	goto	u5107
  4071  09D7  0BF3               	decfsz	??_fatal+1,f
  4072  09D8  29D5               	goto	u5107
  4073  09D9  0BF4               	decfsz	??_fatal+2,f
  4074  09DA  29D5               	goto	u5107
  4075  09DB  0064               	clrwdt
  4076                           
  4077                           ;main.c: 113: for(i = 0; i < 100; i++){
  4078  09DC  01F7               	clrf	fatal@i
  4079  09DD                     l1117:	
  4080                           
  4081                           ;main.c: 114: RA5 = 1;
  4082  09DD  0020               	movlb	0	; select bank0
  4083  09DE  168C               	bsf	12,5
  4084                           
  4085                           ;main.c: 115: _delay((unsigned long)((1)*(33000000/4000.0)));
  4086  09DF  300B               	movlw	11
  4087  09E0  00F3               	movwf	??_fatal+1
  4088  09E1  30B5               	movlw	181
  4089  09E2  00F2               	movwf	??_fatal
  4090  09E3                     u5117:	
  4091  09E3  0BF2               	decfsz	??_fatal,f
  4092  09E4  29E3               	goto	u5117
  4093  09E5  0BF3               	decfsz	??_fatal+1,f
  4094  09E6  29E3               	goto	u5117
  4095  09E7  29E8               	nop2
  4096                           
  4097                           ;main.c: 116: RA5 = 0;
  4098  09E8  0020               	movlb	0	; select bank0
  4099  09E9  128C               	bcf	12,5
  4100                           
  4101                           ;main.c: 117: _delay((unsigned long)((1)*(33000000/4000.0)));
  4102  09EA  300B               	movlw	11
  4103  09EB  00F3               	movwf	??_fatal+1
  4104  09EC  30B5               	movlw	181
  4105  09ED  00F2               	movwf	??_fatal
  4106  09EE                     u5127:	
  4107  09EE  0BF2               	decfsz	??_fatal,f
  4108  09EF  29EE               	goto	u5127
  4109  09F0  0BF3               	decfsz	??_fatal+1,f
  4110  09F1  29EE               	goto	u5127
  4111  09F2  29F3               	nop2
  4112  09F3  0AF7               	incf	fatal@i,f
  4113  09F4  3064               	movlw	100
  4114  09F5  0277               	subwf	fatal@i,w
  4115  09F6  1C03               	skipc
  4116  09F7  29DD               	goto	l1117
  4117  09F8  0AF6               	incf	fatal@k,f
  4118  09F9  29CB               	goto	l4799
  4119  09FA                     l4801:	
  4120                           
  4121                           ;main.c: 118: }
  4122                           ;main.c: 119: }
  4123                           ;main.c: 121: _delay((unsigned long)((3000)*(33000000/4000.0)));
  4124  09FA  307E               	movlw	126
  4125  09FB  00F4               	movwf	??_fatal+2
  4126  09FC  3012               	movlw	18
  4127  09FD  00F3               	movwf	??_fatal+1
  4128  09FE  30D8               	movlw	216
  4129  09FF  00F2               	movwf	??_fatal
  4130  0A00                     u5137:	
  4131  0A00  0BF2               	decfsz	??_fatal,f
  4132  0A01  2A00               	goto	u5137
  4133  0A02  0BF3               	decfsz	??_fatal+1,f
  4134  0A03  2A00               	goto	u5137
  4135  0A04  0BF4               	decfsz	??_fatal+2,f
  4136  0A05  2A00               	goto	u5137
  4137  0A06  0AF8               	incf	fatal@j,f
  4138  0A07  3005               	movlw	5
  4139  0A08  0278               	subwf	fatal@j,w
  4140  0A09  1C03               	skipc
  4141  0A0A  29CA               	goto	l4779
  4142                           
  4143                           ;main.c: 122: }
  4144                           ;main.c: 123: RA0 = 0;
  4145  0A0B  0020               	movlb	0	; select bank0
  4146  0A0C  100C               	bcf	12,0
  4147  0A0D                     l1120:	
  4148                           ;main.c: 125: while(1){
  4149                           
  4150  0A0D  0063               	sleep	;#
  4151  0A0E  2A0D               	goto	l1120
  4152  0A0F                     __end_of_fatal:	
  4153  0A0F                     __ptext1578:	
  4154 ;; =============== function _fatal ends ============
  4155                           
  4156                           
  4157 ;; *************** function _secListWrite *****************
  4158 ;; Defined at:
  4159 ;;		line 93 in file "C:\Program Files\Microchip\Project\SingleChipPlayer\main.c"
  4160 ;; Parameters:    Size  Location     Type
  4161 ;;  which           1    wreg     unsigned char 
  4162 ;;  start           3    5[COMMON] unsigned um
  4163 ;;  len             2    8[COMMON] unsigned short 
  4164 ;; Auto vars:     Size  Location     Type
  4165 ;;  which           1    0[BANK0 ] unsigned char 
  4166 ;;  i               1    1[BANK0 ] unsigned char 
  4167 ;; Return value:  Size  Location     Type
  4168 ;;		None               void
  4169 ;; Registers used:
  4170 ;;		wreg, status,2, status,0, pclath, cstack
  4171 ;; Tracked objects:
  4172 ;;		On entry : 1F/1
  4173 ;;		On exit  : 1F/0
  4174 ;;		Unchanged: FFFE0/0
  4175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4176 ;;      Params:         5       0       0       0
  4177 ;;      Locals:         0       2       0       0
  4178 ;;      Temps:          0       0       0       0
  4179 ;;      Totals:         5       2       0       0
  4180 ;;Total ram usage:        7 bytes
  4181 ;; Hardware stack levels used:    1
  4182 ;; Hardware stack levels required when called:    2
  4183 ;; This function calls:
  4184 ;;		___bmul
  4185 ;;		_eeWrite
  4186 ;; This function is called by:
  4187 ;;		_main
  4188 ;; This function uses a non-reentrant model
  4189 ;;
  4190  0A0F                     _secListWrite:	
  4191                           
  4192                           ; Regs used in _secListWrite: [wreg+status,2+status,0+pclath+cstack]
  4193                           ;secListWrite@which stored from wreg
  4194  0A0F  0020               	movlb	0	; select bank0
  4195  0A10  00A0               	movwf	secListWrite@which
  4196                           
  4197                           ;main.c: 95: UInt8 i;
  4198                           ;main.c: 97: if(which >= 50) return;
  4199  0A11  3032               	movlw	50
  4200  0A12  0220               	subwf	secListWrite@which,w
  4201  0A13  1803               	btfsc	3,0
  4202  0A14  0008               	return
  4203                           
  4204                           ;main.c: 99: which = which + (which << 2);
  4205  0A15  0820               	movf	secListWrite@which,w
  4206  0A16  00F2               	movwf	?___bmul
  4207  0A17  3005               	movlw	5
  4208  0A18  2696  3188         	fcall	___bmul
  4209  0A1A  00A0               	movwf	secListWrite@which
  4210                           
  4211                           ;main.c: 101: for(i = 0; i < 3; i++, start >>= 8) eeWrite(which + (2 - i), start);
  4212  0A1B  01A1               	clrf	secListWrite@i
  4213  0A1C                     l5907:	
  4214  0A1C  0875               	movf	secListWrite@start,w
  4215  0A1D  00F2               	movwf	?_eeWrite
  4216  0A1E  0821               	movf	secListWrite@i,w
  4217  0A1F  0220               	subwf	secListWrite@which,w
  4218  0A20  3E02               	addlw	2
  4219  0A21  22A8  3188         	fcall	_eeWrite
  4220  0A23  0020               	movlb	0	; select bank0
  4221  0A24  0AA1               	incf	secListWrite@i,f
  4222  0A25  0876               	movf	secListWrite@start+1,w
  4223  0A26  00F5               	movwf	secListWrite@start
  4224  0A27  0877               	movf	secListWrite@start+2,w
  4225  0A28  00F6               	movwf	secListWrite@start+1
  4226  0A29  01F7               	clrf	secListWrite@start+2
  4227  0A2A  3003               	movlw	3
  4228  0A2B  0221               	subwf	secListWrite@i,w
  4229  0A2C  1C03               	skipc
  4230  0A2D  2A1C               	goto	l5907
  4231                           
  4232                           ;main.c: 102: for(i = 0; i < 2; i++, len >>= 8) eeWrite(which + (4 - i), len);
  4233  0A2E  01A1               	clrf	secListWrite@i
  4234  0A2F                     l5921:	
  4235  0A2F  0878               	movf	secListWrite@len,w
  4236  0A30  00F2               	movwf	?_eeWrite
  4237  0A31  0821               	movf	secListWrite@i,w
  4238  0A32  0220               	subwf	secListWrite@which,w
  4239  0A33  3E04               	addlw	4
  4240  0A34  22A8  3188         	fcall	_eeWrite
  4241  0A36  0020               	movlb	0	; select bank0
  4242  0A37  0AA1               	incf	secListWrite@i,f
  4243  0A38  0879               	movf	secListWrite@len+1,w
  4244  0A39  00F8               	movwf	secListWrite@len
  4245  0A3A  01F9               	clrf	secListWrite@len+1
  4246  0A3B  3002               	movlw	2
  4247  0A3C  0221               	subwf	secListWrite@i,w
  4248  0A3D  1803               	btfsc	3,0
  4249  0A3E  0008               	return
  4250  0A3F  2A2F               	goto	l5921
  4251  0A40                     __end_of_secListWrite:	
  4252  0A40                     __ptext1581:	
  4253 ;; =============== function _log ends ============
  4254                           
  4255                           
  4256 ;; *************** function _rnd *****************
  4257 ;; Defined at:
  4258 ;;		line 32 in file "C:\Program Files\Microchip\Project\SingleChipPlayer\main.c"
  4259 ;; Parameters:    Size  Location     Type
  4260 ;;		None
  4261 ;; Auto vars:     Size  Location     Type
  4262 ;;  x               4   15[BANK0 ] unsigned long 
  4263 ;; Return value:  Size  Location     Type
  4264 ;;                  2    9[BANK0 ] unsigned short 
  4265 ;; Registers used:
  4266 ;;		wreg, status,2, status,0, pclath, cstack
  4267 ;; Tracked objects:
  4268 ;;		On entry : 1F/0
  4269 ;;		On exit  : 1F/0
  4270 ;;		Unchanged: FFFE0/0
  4271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4272 ;;      Params:         0       2       0       0
  4273 ;;      Locals:         0       4       0       0
  4274 ;;      Temps:          0       4       0       0
  4275 ;;      Totals:         0      10       0       0
  4276 ;;Total ram usage:       10 bytes
  4277 ;; Hardware stack levels used:    1
  4278 ;; Hardware stack levels required when called:    2
  4279 ;; This function calls:
  4280 ;;		_eeRead
  4281 ;;		___lmul
  4282 ;;		_eeWrite
  4283 ;; This function is called by:
  4284 ;;		_main
  4285 ;; This function uses a non-reentrant model
  4286 ;;
  4287  0A40                     _rnd:	
  4288                           
  4289                           ;main.c: 34: UInt32 x;
  4290                           ;main.c: 36: x = eeRead(0xFF);
  4291                           
  4292                           ; Regs used in _rnd: [wreg+status,2+status,0+pclath+cstack]
  4293  0A40  30FF               	movlw	255
  4294  0A41  22A0  3188         	fcall	_eeRead
  4295  0A43  0020               	movlb	0	; select bank0
  4296  0A44  00AF               	movwf	rnd@x
  4297  0A45  01B0               	clrf	rnd@x+1
  4298  0A46  01B1               	clrf	rnd@x+2
  4299  0A47  01B2               	clrf	rnd@x+3
  4300                           
  4301                           ;main.c: 37: x = (x << 8) | eeRead(0xFE);
  4302  0A48  278D  3188         	fcall	PL2	;call to abstracted procedure
  4303  0A4A  30FE               	movlw	254
  4304  0A4B  22A0  3188         	fcall	_eeRead
  4305  0A4D  0020               	movlb	0	; select bank0
  4306  0A4E  042B               	iorwf	??_rnd,w
  4307                           
  4308                           ;main.c: 38: x = (x << 8) | eeRead(0xFD);
  4309  0A4F  279C  3188         	fcall	PL4	;call to abstracted procedure
  4310  0A51  278D  3188         	fcall	PL2	;call to abstracted procedure
  4311  0A53  30FD               	movlw	253
  4312  0A54  22A0  3188         	fcall	_eeRead
  4313  0A56  0020               	movlb	0	; select bank0
  4314  0A57  042B               	iorwf	??_rnd,w
  4315                           
  4316                           ;main.c: 39: x = (x << 8) | eeRead(0xFC);
  4317  0A58  279C  3188         	fcall	PL4	;call to abstracted procedure
  4318  0A5A  278D  3188         	fcall	PL2	;call to abstracted procedure
  4319  0A5C  30FC               	movlw	252
  4320  0A5D  22A0               	fcall	_eeRead
  4321  0A5E  0020               	movlb	0	; select bank0
  4322  0A5F  042B               	iorwf	??_rnd,w
  4323  0A60  00AF               	movwf	rnd@x
  4324  0A61  082C               	movf	??_rnd+1,w
  4325  0A62  00B0               	movwf	rnd@x+1
  4326  0A63  082D               	movf	??_rnd+2,w
  4327  0A64  00B1               	movwf	rnd@x+2
  4328  0A65  082E               	movf	??_rnd+3,w
  4329  0A66  00B2               	movwf	rnd@x+3
  4330                           
  4331                           ;main.c: 41: x = x * 0xDEECE66D + 0x0B;
  4332  0A67  00F5               	movwf	?___lmul+3
  4333  0A68  0831               	movf	rnd@x+2,w
  4334  0A69  00F4               	movwf	?___lmul+2
  4335  0A6A  0830               	movf	rnd@x+1,w
  4336  0A6B  00F3               	movwf	?___lmul+1
  4337  0A6C  082F               	movf	rnd@x,w
  4338  0A6D  00F2               	movwf	?___lmul
  4339  0A6E  30DE               	movlw	222
  4340  0A6F  00F9               	movwf	?___lmul+7
  4341  0A70  30EC               	movlw	236
  4342  0A71  00F8               	movwf	?___lmul+6
  4343  0A72  30E6               	movlw	230
  4344  0A73  00F7               	movwf	?___lmul+5
  4345  0A74  306D               	movlw	109
  4346  0A75  00F6               	movwf	?___lmul+4
  4347  0A76  3180  20A4  3188   	fcall	___lmul
  4348  0A79  300B               	movlw	11
  4349  0A7A  0772               	addwf	?___lmul,w
  4350  0A7B  00AF               	movwf	rnd@x
  4351  0A7C  3000               	movlw	0
  4352  0A7D  3D73               	addwfc	?___lmul+1,w
  4353  0A7E  00B0               	movwf	rnd@x+1
  4354  0A7F  3000               	movlw	0
  4355  0A80  3D74               	addwfc	?___lmul+2,w
  4356  0A81  00B1               	movwf	rnd@x+2
  4357  0A82  3000               	movlw	0
  4358  0A83  3D75               	addwfc	?___lmul+3,w
  4359  0A84  00B2               	movwf	rnd@x+3
  4360                           
  4361                           ;main.c: 43: eeWrite(0xFF, x >> 24);
  4362  0A85  00F2               	movwf	?_eeWrite
  4363  0A86  30FF               	movlw	255
  4364  0A87  22A8  3188         	fcall	_eeWrite
  4365                           
  4366                           ;main.c: 44: eeWrite(0xFE, x >> 16);
  4367  0A89  0020               	movlb	0	; select bank0
  4368  0A8A  0831               	movf	rnd@x+2,w
  4369  0A8B  00F2               	movwf	?_eeWrite
  4370  0A8C  30FE               	movlw	254
  4371  0A8D  22A8  3188         	fcall	_eeWrite
  4372                           
  4373                           ;main.c: 45: eeWrite(0xFD, x >> 8);
  4374  0A8F  0020               	movlb	0	; select bank0
  4375  0A90  0830               	movf	rnd@x+1,w
  4376  0A91  00F2               	movwf	?_eeWrite
  4377  0A92  30FD               	movlw	253
  4378  0A93  22A8  3188         	fcall	_eeWrite
  4379                           
  4380                           ;main.c: 46: eeWrite(0xFC, x >> 0);
  4381  0A95  0020               	movlb	0	; select bank0
  4382  0A96  082F               	movf	rnd@x,w
  4383  0A97  00F2               	movwf	?_eeWrite
  4384  0A98  30FC               	movlw	252
  4385  0A99  22A8               	fcall	_eeWrite
  4386                           
  4387                           ;main.c: 48: return x >> 16;
  4388  0A9A  0020               	movlb	0	; select bank0
  4389  0A9B  0832               	movf	rnd@x+3,w
  4390  0A9C  00AA               	movwf	?_rnd+1
  4391  0A9D  0831               	movf	rnd@x+2,w
  4392  0A9E  00A9               	movwf	?_rnd
  4393  0A9F  0008               	return
  4394  0AA0                     __end_of_rnd:	
  4395  0AA0                     __ptext1600:	
  4396 ;; =============== function _eeWrite ends ============
  4397                           
  4398                           
  4399 ;; *************** function _eeRead *****************
  4400 ;; Defined at:
  4401 ;;		line 10 in file "C:\Program Files\Microchip\Project\SingleChipPlayer\main.c"
  4402 ;; Parameters:    Size  Location     Type
  4403 ;;  addr            1    wreg     unsigned char 
  4404 ;; Auto vars:     Size  Location     Type
  4405 ;;  addr            1    2[COMMON] unsigned char 
  4406 ;; Return value:  Size  Location     Type
  4407 ;;                  1    wreg      unsigned char 
  4408 ;; Registers used:
  4409 ;;		wreg, status,2
  4410 ;; Tracked objects:
  4411 ;;		On entry : 1F/0
  4412 ;;		On exit  : 1F/3
  4413 ;;		Unchanged: FFFE0/0
  4414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4415 ;;      Params:         0       0       0       0
  4416 ;;      Locals:         1       0       0       0
  4417 ;;      Temps:          0       0       0       0
  4418 ;;      Totals:         1       0       0       0
  4419 ;;Total ram usage:        1 bytes
  4420 ;; Hardware stack levels used:    1
  4421 ;; Hardware stack levels required when called:    1
  4422 ;; This function calls:
  4423 ;;		Nothing
  4424 ;; This function is called by:
  4425 ;;		_rnd
  4426 ;;		_secListRead
  4427 ;; This function uses a non-reentrant model
  4428 ;;
  4429  0AA0                     _eeRead:	
  4430                           
  4431                           ; Regs used in _eeRead: [wreg+status,2]
  4432                           ;eeRead@addr stored from wreg
  4433  0AA0  00F2               	movwf	eeRead@addr
  4434                           
  4435                           ;main.c: 13: EECON1 = 0b00000000;
  4436  0AA1  0023               	movlb	3	; select bank3
  4437  0AA2  0195               	clrf	21	;volatile
  4438                           
  4439                           ;main.c: 14: EEADRL = addr;
  4440  0AA3  0872               	movf	eeRead@addr,w
  4441  0AA4  0091               	movwf	17	;volatile
  4442                           
  4443                           ;main.c: 15: EECON1bits.RD = 1;
  4444  0AA5  1415               	bsf	21,0	;volatile
  4445                           
  4446                           ;main.c: 16: return EEDATL;
  4447  0AA6  0813               	movf	19,w	;volatile
  4448  0AA7  0008               	return
  4449  0AA8                     __end_of_eeRead:	
  4450  0AA8                     __ptext1599:	
  4451 ;; =============== function _audioOn ends ============
  4452                           
  4453                           
  4454 ;; *************** function _eeWrite *****************
  4455 ;; Defined at:
  4456 ;;		line 19 in file "C:\Program Files\Microchip\Project\SingleChipPlayer\main.c"
  4457 ;; Parameters:    Size  Location     Type
  4458 ;;  addr            1    wreg     unsigned char 
  4459 ;;  data            1    2[COMMON] unsigned char 
  4460 ;; Auto vars:     Size  Location     Type
  4461 ;;  addr            1    3[COMMON] unsigned char 
  4462 ;; Return value:  Size  Location     Type
  4463 ;;		None               void
  4464 ;; Registers used:
  4465 ;;		wreg
  4466 ;; Tracked objects:
  4467 ;;		On entry : 1E/0
  4468 ;;		On exit  : 1F/3
  4469 ;;		Unchanged: FFFE0/0
  4470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4471 ;;      Params:         1       0       0       0
  4472 ;;      Locals:         1       0       0       0
  4473 ;;      Temps:          0       0       0       0
  4474 ;;      Totals:         2       0       0       0
  4475 ;;Total ram usage:        2 bytes
  4476 ;; Hardware stack levels used:    1
  4477 ;; Hardware stack levels required when called:    1
  4478 ;; This function calls:
  4479 ;;		Nothing
  4480 ;; This function is called by:
  4481 ;;		_rnd
  4482 ;;		_log
  4483 ;;		_secListWrite
  4484 ;; This function uses a non-reentrant model
  4485 ;;
  4486  0AA8                     _eeWrite:	
  4487                           
  4488                           ; Regs used in _eeWrite: [wreg]
  4489                           ;eeWrite@addr stored from wreg
  4490  0AA8  00F3               	movwf	eeWrite@addr
  4491                           
  4492                           ;main.c: 21: EECON1= 0b00000100;
  4493  0AA9  3004               	movlw	4
  4494  0AAA  0023               	movlb	3	; select bank3
  4495  0AAB  0095               	movwf	21	;volatile
  4496                           
  4497                           ;main.c: 22: EEADRL = addr;
  4498  0AAC  0873               	movf	eeWrite@addr,w
  4499  0AAD  0091               	movwf	17	;volatile
  4500                           
  4501                           ;main.c: 23: EEDATL = data;
  4502  0AAE  0872               	movf	eeWrite@data,w
  4503  0AAF  0093               	movwf	19	;volatile
  4504                           
  4505                           ;main.c: 24: INTCONbits.GIE = 0;
  4506  0AB0  138B               	bcf	11,7	;volatile
  4507                           
  4508                           ;main.c: 25: EECON2 = 0x55;
  4509  0AB1  3055               	movlw	85
  4510  0AB2  0096               	movwf	22	;volatile
  4511                           
  4512                           ;main.c: 26: EECON2 = 0xAA;
  4513  0AB3  30AA               	movlw	170
  4514  0AB4  0096               	movwf	22	;volatile
  4515                           
  4516                           ;main.c: 27: EECON1bits.WR = 1;
  4517  0AB5  1495               	bsf	21,1	;volatile
  4518                           
  4519                           ;main.c: 28: INTCONbits.GIE = 1;
  4520  0AB6  178B               	bsf	11,7	;volatile
  4521  0AB7                     l1080:	
  4522                           ;main.c: 29: while(EECON1bits.WR);
  4523                           
  4524  0AB7  1C95               	btfss	21,1	;volatile
  4525  0AB8  0008               	return
  4526  0AB9  2AB7               	goto	l1080
  4527  0ABA                     __end_of_eeWrite:	
  4528  0ABA                     __ptext1563:	
  4529 ;; =============== function _sdPrvCardInit ends ============
  4530                           
  4531                           
  4532 ;; *************** function _play *****************
  4533 ;; Defined at:
  4534 ;;		line 332 in file "C:\Program Files\Microchip\Project\SingleChipPlayer\main.c"
  4535 ;; Parameters:    Size  Location     Type
  4536 ;;		None
  4537 ;; Auto vars:     Size  Location     Type
  4538 ;;  j               1   37[BANK0 ] unsigned char 
  4539 ;;  firstSec        3   39[BANK0 ] unsigned um
  4540 ;;  sec             3   33[BANK0 ] unsigned um
  4541 ;;  numSec          2   42[BANK0 ] unsigned short 
  4542 ;;  i               1   38[BANK0 ] unsigned char 
  4543 ;;  t               1   36[BANK0 ] unsigned char 
  4544 ;;  secListIdx      1   32[BANK0 ] unsigned char 
  4545 ;;  start           1   31[BANK0 ] unsigned char 
  4546 ;;  ret             1   30[BANK0 ] unsigned char 
  4547 ;; Return value:  Size  Location     Type
  4548 ;;		None               void
  4549 ;; Registers used:
  4550 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4551 ;; Tracked objects:
  4552 ;;		On entry : 1E/0
  4553 ;;		On exit  : 1F/0
  4554 ;;		Unchanged: 0/0
  4555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4556 ;;      Params:         0       0       0       0
  4557 ;;      Locals:         0      14       0       0
  4558 ;;      Temps:          0       4       0       0
  4559 ;;      Totals:         0      18       0       0
  4560 ;;Total ram usage:       18 bytes
  4561 ;; Hardware stack levels used:    1
  4562 ;; Hardware stack levels required when called:    5
  4563 ;; This function calls:
  4564 ;;		_audioOn
  4565 ;;		_secListRead
  4566 ;;		_sdReadStart
  4567 ;;		_fatal
  4568 ;;		_hdrProcess
  4569 ;;		_sdSecReadStop
  4570 ;;		_sdNextSec
  4571 ;;		_sdSpiByte
  4572 ;;		_audioOff
  4573 ;; This function is called by:
  4574 ;;		_main
  4575 ;; This function uses a non-reentrant model
  4576 ;;
  4577  0ABA                     _play:	
  4578                           
  4579                           ;main.c: 334: Boolean ret, start = 1;
  4580                           
  4581                           ; Regs used in _play: [wreg+fsr1l-status,0+pclath+cstack]
  4582  0ABA  0020               	movlb	0	; select bank0
  4583  0ABB  01BF               	clrf	play@start
  4584  0ABC  0ABF               	incf	play@start,f
  4585                           
  4586                           ;main.c: 335: UInt24 firstSec;
  4587                           ;main.c: 336: UInt16 numSec;
  4588                           ;main.c: 337: UInt24 sec;
  4589                           ;main.c: 338: UInt8 secListIdx = 0;
  4590  0ABD  01C0               	clrf	play@secListIdx
  4591                           
  4592                           ;main.c: 339: UInt8 i, t = 0;
  4593  0ABE  01C4               	clrf	play@t
  4594                           
  4595                           ;main.c: 341: audioOn();
  4596  0ABF  27D6  3188         	fcall	_audioOn
  4597                           
  4598                           ;main.c: 356: break;
  4599  0AC1  2B27               	goto	l6309
  4600  0AC2                     l6333:	
  4601                           
  4602                           ;main.c: 357: }
  4603                           ;main.c: 358: start = 0;
  4604  0AC2  01BF               	clrf	play@start
  4605                           
  4606                           ;main.c: 359: } else i= 0;
  4607  0AC3  2AC5               	goto	l6337
  4608  0AC4                     l6335:	
  4609  0AC4  01C6               	clrf	play@i
  4610  0AC5                     l6337:	
  4611                           
  4612                           ;main.c: 361: for(sec = 0; sec < numSec; sec++){
  4613  0AC5  01C1               	clrf	play@sec
  4614  0AC6  01C2               	clrf	play@sec+1
  4615  0AC7  01C3               	clrf	play@sec+2
  4616  0AC8                     l6387:	
  4617  0AC8  084A               	movf	play@numSec,w
  4618  0AC9  00BA               	movwf	??_play
  4619  0ACA  084B               	movf	play@numSec+1,w
  4620  0ACB  00BB               	movwf	??_play+1
  4621  0ACC  01BC               	clrf	??_play+2
  4622  0ACD  083C               	movf	??_play+2,w
  4623  0ACE  0243               	subwf	play@sec+2,w
  4624  0ACF  1D03               	skipz
  4625  0AD0  2AD7               	goto	u4295
  4626  0AD1  083B               	movf	??_play+1,w
  4627  0AD2  0242               	subwf	play@sec+1,w
  4628  0AD3  1D03               	skipz
  4629  0AD4  2AD7               	goto	u4295
  4630  0AD5  083A               	movf	??_play,w
  4631  0AD6  0241               	subwf	play@sec,w
  4632  0AD7                     u4295:	
  4633  0AD7  1803               	btfsc	3,0
  4634  0AD8  2B25               	goto	l6389
  4635                           
  4636                           ;main.c: 362: UInt8 j;
  4637                           ;main.c: 364: if(sec){
  4638  0AD9  0843               	movf	play@sec+2,w
  4639  0ADA  0442               	iorwf	play@sec+1,w
  4640  0ADB  0441               	iorwf	play@sec,w
  4641  0ADC  1903               	skipnz
  4642  0ADD  2AE1               	goto	l6345
  4643                           
  4644                           ;main.c: 365: i = 0;
  4645  0ADE  01C6               	clrf	play@i
  4646                           
  4647                           ;main.c: 366: sdNextSec();
  4648  0ADF  2064  3188         	fcall	_sdNextSec
  4649  0AE1                     l6345:	
  4650                           
  4651                           ;main.c: 367: }
  4652                           ;main.c: 369: for(j =0; j < 4; j++){
  4653  0AE1  0020               	movlb	0	; select bank0
  4654  0AE2  01C5               	clrf	play@j
  4655  0AE3                     l6351:	
  4656                           
  4657                           ;main.c: 371: if(j) i = 0;
  4658  0AE3  0845               	movf	play@j,w
  4659  0AE4  1D03               	skipz
  4660  0AE5  01C6               	clrf	play@i
  4661  0AE6                     l6379:	
  4662  0AE6  0846               	movf	play@i,w
  4663  0AE7  3A80               	xorlw	128
  4664  0AE8  1903               	btfsc	3,2
  4665  0AE9  2B1A               	goto	l6381
  4666                           
  4667                           ;main.c: 374: if(t){
  4668  0AEA  0844               	movf	play@t,w
  4669  0AEB  1903               	btfsc	3,2
  4670  0AEC  2AF4               	goto	l6363
  4671                           
  4672                           ;main.c: 375: t--;
  4673  0AED  03C4               	decf	play@t,f
  4674                           
  4675                           ;main.c: 376: sdSpiByte(0xFF);
  4676  0AEE  30FF               	movlw	255
  4677  0AEF  2615  3188         	fcall	_sdSpiByte
  4678                           
  4679                           ;main.c: 377: i++;
  4680  0AF1  0020               	movlb	0	; select bank0
  4681  0AF2  0AC6               	incf	play@i,f
  4682                           
  4683                           ;main.c: 378: }
  4684  0AF3  2AE6               	goto	l6379
  4685  0AF4                     l6363:	
  4686                           
  4687                           ;main.c: 379: else if(gWrite != gRead){
  4688  0AF4  087B               	movf	_gWrite,w
  4689  0AF5  066D               	xorwf	_gRead,w
  4690  0AF6  1903               	skipnz
  4691  0AF7  2AE6               	goto	l6379
  4692                           
  4693                           ;main.c: 381: t = sdSpiByte(0xFF);
  4694  0AF8  30FF               	movlw	255
  4695  0AF9  2615  3188         	fcall	_sdSpiByte
  4696  0AFB  0020               	movlb	0	; select bank0
  4697  0AFC  00C4               	movwf	play@t
  4698                           
  4699                           ;main.c: 383: gBuffer[gWrite++] = t >> 2;
  4700  0AFD  00BA               	movwf	??_play
  4701  0AFE  36BA               	lsrf	??_play,f
  4702  0AFF  36BA               	lsrf	??_play,f
  4703  0B00  083A               	movf	??_play,w
  4704  0B01  00BB               	movwf	??_play+1
  4705  0B02  087B               	movf	_gWrite,w
  4706  0B03  3E96               	addlw	150
  4707  0B04  00BC               	movwf	??_play+2
  4708  0B05  3020               	movlw	32
  4709  0B06  1803               	skipnc
  4710  0B07  3021               	movlw	33
  4711  0B08  00BD               	movwf	??_play+3
  4712  0B09  083C               	movf	??_play+2,w
  4713  0B0A  0086               	movwf	6
  4714  0B0B  083D               	movf	??_play+3,w
  4715  0B0C  0087               	movwf	7
  4716  0B0D  083B               	movf	??_play+1,w
  4717  0B0E  0081               	movwf	1
  4718  0B0F  0AFB               	incf	_gWrite,f
  4719                           
  4720                           ;main.c: 384: if(gWrite == 90) gWrite = 0;
  4721  0B10  087B               	movf	_gWrite,w
  4722  0B11  3A5A               	xorlw	90
  4723  0B12  1903               	btfsc	3,2
  4724  0B13  01FB               	clrf	_gWrite
  4725                           
  4726                           ;main.c: 385: i++;
  4727  0B14  0AC6               	incf	play@i,f
  4728                           
  4729                           ;main.c: 386: t = byteStride;
  4730  0B15  0021               	movlb	1	; select bank1
  4731  0B16  0854               	movf	_byteStride^(0+128),w
  4732  0B17  0020               	movlb	0	; select bank0
  4733  0B18  00C4               	movwf	play@t
  4734  0B19  2AE6               	goto	l6379
  4735  0B1A                     l6381:	
  4736  0B1A  0AC5               	incf	play@j,f
  4737  0B1B  3004               	movlw	4
  4738  0B1C  0245               	subwf	play@j,w
  4739  0B1D  1C03               	skipc
  4740  0B1E  2AE3               	goto	l6351
  4741  0B1F  0AC1               	incf	play@sec,f
  4742  0B20  1903               	skipnz
  4743  0B21  0AC2               	incf	play@sec+1,f
  4744  0B22  1903               	skipnz
  4745  0B23  0AC3               	incf	play@sec+2,f
  4746  0B24  2AC8               	goto	l6387
  4747  0B25                     l6389:	
  4748                           
  4749                           ;main.c: 387: }
  4750                           ;main.c: 388: }
  4751                           ;main.c: 389: }
  4752                           ;main.c: 390: }
  4753                           ;main.c: 391: sdSecReadStop();
  4754  0B25  261D  3188         	fcall	_sdSecReadStop
  4755  0B27                     l6309:	
  4756                           
  4757                           ;main.c: 345: secListRead(secListIdx++, &firstSec, &numSec);
  4758  0B27  3047               	movlw	play@firstSec& (0+255)
  4759  0B28  00F5               	movwf	?_secListRead
  4760  0B29  304A               	movlw	play@numSec& (0+255)
  4761  0B2A  00F6               	movwf	?_secListRead+1
  4762  0B2B  0840               	movf	play@secListIdx,w
  4763  0B2C  2000  3188         	fcall	_secListRead
  4764  0B2E  0AC0               	incf	play@secListIdx,f
  4765                           
  4766                           ;main.c: 346: if(!firstSec && !numSec) break;
  4767  0B2F  0849               	movf	play@firstSec+2,w
  4768  0B30  0448               	iorwf	play@firstSec+1,w
  4769  0B31  0447               	iorwf	play@firstSec,w
  4770  0B32  1D03               	skipz
  4771  0B33  2B38               	goto	l6319
  4772  0B34  084B               	movf	play@numSec+1,w
  4773  0B35  044A               	iorwf	play@numSec,w
  4774  0B36  1903               	btfsc	3,2
  4775  0B37  2B54               	goto	l6391
  4776  0B38                     l6319:	
  4777                           
  4778                           ;main.c: 348: ret = sdReadStart(firstSec);
  4779  0B38  0847               	movf	play@firstSec,w
  4780  0B39  00B2               	movwf	?_sdReadStart
  4781  0B3A  0848               	movf	play@firstSec+1,w
  4782  0B3B  00B3               	movwf	?_sdReadStart+1
  4783  0B3C  0849               	movf	play@firstSec+2,w
  4784  0B3D  00B4               	movwf	?_sdReadStart+2
  4785  0B3E  26B4  3188         	fcall	_sdReadStart
  4786  0B40  0020               	movlb	0	; select bank0
  4787  0B41  00BE               	movwf	play@ret
  4788                           
  4789                           ;main.c: 349: if(!ret) fatal(2);
  4790  0B42  08BE               	movf	play@ret,f
  4791  0B43  1D03               	skipz
  4792  0B44  2B48               	goto	l6325
  4793  0B45  3002               	movlw	2
  4794  0B46  21C8  3188         	fcall	_fatal
  4795  0B48                     l6325:	
  4796                           
  4797                           ;main.c: 351: if(start){
  4798  0B48  0020               	movlb	0	; select bank0
  4799  0B49  083F               	movf	play@start,w
  4800  0B4A  1903               	btfsc	3,2
  4801  0B4B  2AC4               	goto	l6335
  4802                           
  4803                           ;main.c: 353: i = hdrProcess();
  4804  0B4C  24D4  3188         	fcall	_hdrProcess
  4805  0B4E  0020               	movlb	0	; select bank0
  4806  0B4F  00C6               	movwf	play@i
  4807                           
  4808                           ;main.c: 354: if(i == 0){
  4809  0B50  08C6               	movf	play@i,f
  4810  0B51  1D03               	skipz
  4811  0B52  2AC2               	goto	l6333
  4812                           
  4813                           ;main.c: 355: sdSecReadStop();
  4814  0B53  261D               	fcall	_sdSecReadStop
  4815  0B54                     l6391:	
  4816                           
  4817                           ;main.c: 392: }
  4818                           ;main.c: 394: audioOff();
  4819  0B54  3184  2CBC         	ljmp	l4437
  4820  0B56                     __end_of_play:	
  4821  0B56                     __ptext1559:	
  4822 ;; =============== function _ufatParsePartitionTable ends ============
  4823                           
  4824                           
  4825 ;; *************** function _ufatGetNthFile *****************
  4826 ;; Defined at:
  4827 ;;		line 87 in file "C:\Program Files\Microchip\Project\SingleChipPlayer\ufat\ufat.c"
  4828 ;; Parameters:    Size  Location     Type
  4829 ;;  n               2   30[BANK0 ] unsigned short 
  4830 ;;  name            1   32[BANK0 ] PTR unsigned char 
  4831 ;;		 -> main@name(11), 
  4832 ;;  sz              1   33[BANK0 ] PTR unsigned long 
  4833 ;;		 -> main@sz(4), 
  4834 ;;  flags           1   34[BANK0 ] PTR unsigned char 
  4835 ;;		 -> main@flags(1), 
  4836 ;;  id              1   35[BANK0 ] PTR unsigned short 
  4837 ;;		 -> main@id(2), 
  4838 ;; Auto vars:     Size  Location     Type
  4839 ;;  buf             4   40[BANK0 ] unsigned char [4]
  4840 ;;  sec             4   44[BANK0 ] unsigned long 
  4841 ;;  offset          2   48[BANK0 ] unsigned short 
  4842 ;;  i               2   36[BANK0 ] unsigned short 
  4843 ;; Return value:  Size  Location     Type
  4844 ;;                  1    wreg      unsigned char 
  4845 ;; Registers used:
  4846 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4847 ;; Tracked objects:
  4848 ;;		On entry : 1F/0
  4849 ;;		On exit  : 1E/0
  4850 ;;		Unchanged: FFFE0/0
  4851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4852 ;;      Params:         0       6       0       0
  4853 ;;      Locals:         0      14       0       0
  4854 ;;      Temps:          0       0       0       0
  4855 ;;      Totals:         0      20       0       0
  4856 ;;Total ram usage:       20 bytes
  4857 ;; Hardware stack levels used:    1
  4858 ;; Hardware stack levels required when called:    6
  4859 ;; This function calls:
  4860 ;;		_ufatExtRead
  4861 ;;		_ufatGetU16
  4862 ;;		_ufatGetU32
  4863 ;; This function is called by:
  4864 ;;		_main
  4865 ;; This function uses a non-reentrant model
  4866 ;;
  4867  0B56                     _ufatGetNthFile:	
  4868                           
  4869                           ;ufat.c: 89: u16 i;
  4870                           ;ufat.c: 90: u32 sec = diskOffset + rootSec;
  4871                           
  4872                           ; Regs used in _ufatGetNthFile: [wreg-status,0+pclath+cstack]
  4873  0B56  0021               	movlb	1	; select bank1
  4874  0B57  084E               	movf	_rootSec^(0+128),w
  4875  0B58  0020               	movlb	0	; select bank0
  4876  0B59  00CC               	movwf	ufatGetNthFile@sec
  4877  0B5A  0021               	movlb	1	; select bank1
  4878  0B5B  084F               	movf	(_rootSec+1)^(0+128),w
  4879  0B5C  0020               	movlb	0	; select bank0
  4880  0B5D  00CD               	movwf	ufatGetNthFile@sec+1
  4881  0B5E  01CE               	clrf	ufatGetNthFile@sec+2
  4882  0B5F  01CF               	clrf	ufatGetNthFile@sec+3
  4883  0B60  0869               	movf	_diskOffset,w
  4884  0B61  07CC               	addwf	ufatGetNthFile@sec,f
  4885  0B62  086A               	movf	_diskOffset+1,w
  4886  0B63  3DCD               	addwfc	ufatGetNthFile@sec+1,f
  4887  0B64  086B               	movf	_diskOffset+2,w
  4888  0B65  3DCE               	addwfc	ufatGetNthFile@sec+2,f
  4889  0B66  086C               	movf	_diskOffset+3,w
  4890  0B67  3DCF               	addwfc	ufatGetNthFile@sec+3,f
  4891                           
  4892                           ;ufat.c: 91: u16 offset = 0;
  4893  0B68  01D0               	clrf	ufatGetNthFile@offset
  4894  0B69  01D1               	clrf	ufatGetNthFile@offset+1
  4895                           
  4896                           ;ufat.c: 92: u8 buf[4];
  4897                           ;ufat.c: 94: for(i = 0; i < rootDirEntries; i++){
  4898  0B6A  01C4               	clrf	ufatGetNthFile@i
  4899  0B6B  01C5               	clrf	ufatGetNthFile@i+1
  4900  0B6C                     l6573:	
  4901  0B6C  0021               	movlb	1	; select bank1
  4902  0B6D  084D               	movf	(_rootDirEntries+1)^(0+128),w
  4903  0B6E  0020               	movlb	0	; select bank0
  4904  0B6F  0245               	subwf	ufatGetNthFile@i+1,w
  4905  0B70  1D03               	skipz
  4906  0B71  2B76               	goto	u4575
  4907  0B72  0021               	movlb	1	; select bank1
  4908  0B73  084C               	movf	_rootDirEntries^(0+128),w
  4909  0B74  0020               	movlb	0	; select bank0
  4910  0B75  0244               	subwf	ufatGetNthFile@i,w
  4911  0B76                     u4575:	
  4912  0B76  1803               	btfsc	3,0
  4913  0B77  3400               	retlw	0
  4914                           
  4915                           ;ufat.c: 96: if(!ufatExtRead(sec, offset, 1, buf)) return 0;
  4916  0B78  084F               	movf	ufatGetNthFile@sec+3,w
  4917  0B79  00B9               	movwf	?_ufatExtRead+3
  4918  0B7A  084E               	movf	ufatGetNthFile@sec+2,w
  4919  0B7B  00B8               	movwf	?_ufatExtRead+2
  4920  0B7C  084D               	movf	ufatGetNthFile@sec+1,w
  4921  0B7D  00B7               	movwf	?_ufatExtRead+1
  4922  0B7E  084C               	movf	ufatGetNthFile@sec,w
  4923  0B7F  00B6               	movwf	?_ufatExtRead
  4924  0B80  0851               	movf	ufatGetNthFile@offset+1,w
  4925  0B81  00BB               	movwf	?_ufatExtRead+5
  4926  0B82  0850               	movf	ufatGetNthFile@offset,w
  4927  0B83  00BA               	movwf	?_ufatExtRead+4
  4928  0B84  01BC               	clrf	?_ufatExtRead+6
  4929  0B85  0ABC               	incf	?_ufatExtRead+6,f
  4930  0B86  3048               	movlw	ufatGetNthFile@buf& (0+255)
  4931  0B87  00BD               	movwf	?_ufatExtRead+7
  4932  0B88  2436  3188         	fcall	_ufatExtRead
  4933  0B8A  3800               	iorlw	0
  4934  0B8B  1903               	btfsc	3,2
  4935  0B8C  3400               	retlw	0
  4936                           
  4937                           ;ufat.c: 97: if(buf[0] == 0) break;
  4938  0B8D  0020               	movlb	0	; select bank0
  4939  0B8E  08C8               	movf	ufatGetNthFile@buf,f
  4940  0B8F  1903               	btfsc	3,2
  4941  0B90  3400               	retlw	0
  4942                           
  4943                           ;ufat.c: 98: if(buf[0] != 0xE5 && buf[0] != 0x2E){
  4944  0B91  0848               	movf	ufatGetNthFile@buf,w
  4945  0B92  3AE5               	xorlw	229
  4946  0B93  1903               	skipnz
  4947  0B94  2C20               	goto	l6565
  4948  0B95  0848               	movf	ufatGetNthFile@buf,w
  4949  0B96  3A2E               	xorlw	46
  4950  0B97  1903               	skipnz
  4951  0B98  2C20               	goto	l6565
  4952                           
  4953                           ;ufat.c: 100: if(!n--){
  4954  0B99  3001               	movlw	1
  4955  0B9A  02BE               	subwf	ufatGetNthFile@n,f
  4956  0B9B  3000               	movlw	0
  4957  0B9C  3BBF               	subwfb	ufatGetNthFile@n+1,f
  4958  0B9D  0A3E               	incf	ufatGetNthFile@n,w
  4959  0B9E  1903               	skipnz
  4960  0B9F  0A3F               	incf	ufatGetNthFile@n+1,w
  4961  0BA0  1D03               	skipz
  4962  0BA1  2C20               	goto	l6565
  4963                           
  4964                           ;ufat.c: 102: if(name){
  4965  0BA2  0840               	movf	ufatGetNthFile@name,w
  4966  0BA3  1903               	btfsc	3,2
  4967  0BA4  2BC5               	goto	l6533
  4968                           
  4969                           ;ufat.c: 104: name[0] = (buf[0] == 0x05) ? 0xE5 : buf[0];
  4970  0BA5  0848               	movf	ufatGetNthFile@buf,w
  4971  0BA6  00C6               	movwf	_ufatGetNthFile$3417
  4972  0BA7  01C7               	clrf	_ufatGetNthFile$3417+1
  4973  0BA8  0848               	movf	ufatGetNthFile@buf,w
  4974  0BA9  3A05               	xorlw	5
  4975  0BAA  1D03               	skipz
  4976  0BAB  2BAF               	goto	l6525
  4977  0BAC  30E5               	movlw	229
  4978  0BAD  00C6               	movwf	_ufatGetNthFile$3417
  4979  0BAE  01C7               	clrf	_ufatGetNthFile$3417+1
  4980  0BAF                     l6525:	
  4981  0BAF  0840               	movf	ufatGetNthFile@name,w
  4982  0BB0  0086               	movwf	6
  4983  0BB1  0187               	clrf	7
  4984  0BB2  0846               	movf	_ufatGetNthFile$3417,w
  4985  0BB3  0081               	movwf	1
  4986                           
  4987                           ;ufat.c: 105: if(!ufatExtRead(sec, offset + 1, 10, name + 1)) return 0;
  4988  0BB4  084F               	movf	ufatGetNthFile@sec+3,w
  4989  0BB5  27A5  3188         	fcall	PL7	;call to abstracted procedure
  4990  0BB7  3E01               	addlw	1
  4991  0BB8  00BA               	movwf	?_ufatExtRead+4
  4992  0BB9  3000               	movlw	0
  4993  0BBA  3D51               	addwfc	ufatGetNthFile@offset+1,w
  4994  0BBB  00BB               	movwf	?_ufatExtRead+5
  4995  0BBC  300A               	movlw	10
  4996  0BBD  00BC               	movwf	?_ufatExtRead+6
  4997  0BBE  0A40               	incf	ufatGetNthFile@name,w
  4998  0BBF  00BD               	movwf	?_ufatExtRead+7
  4999  0BC0  2436  3188         	fcall	_ufatExtRead
  5000  0BC2  3800               	iorlw	0
  5001  0BC3  1903               	btfsc	3,2
  5002  0BC4  3400               	retlw	0
  5003  0BC5                     l6533:	
  5004                           
  5005                           ;ufat.c: 106: }
  5006                           ;ufat.c: 108: if(flags){
  5007  0BC5  0020               	movlb	0	; select bank0
  5008  0BC6  0842               	movf	ufatGetNthFile@flags,w
  5009  0BC7  1903               	btfsc	3,2
  5010  0BC8  2BDA               	goto	l6541
  5011                           
  5012                           ;ufat.c: 110: if(!ufatExtRead(sec, offset + 0x0B, 1, flags)) return 0;
  5013  0BC9  084F               	movf	ufatGetNthFile@sec+3,w
  5014  0BCA  27A5  3188         	fcall	PL7	;call to abstracted procedure
  5015  0BCC  3E0B               	addlw	11
  5016  0BCD  00BA               	movwf	?_ufatExtRead+4
  5017  0BCE  3000               	movlw	0
  5018  0BCF  3D51               	addwfc	ufatGetNthFile@offset+1,w
  5019  0BD0  00BB               	movwf	?_ufatExtRead+5
  5020  0BD1  01BC               	clrf	?_ufatExtRead+6
  5021  0BD2  0ABC               	incf	?_ufatExtRead+6,f
  5022  0BD3  0842               	movf	ufatGetNthFile@flags,w
  5023  0BD4  00BD               	movwf	?_ufatExtRead+7
  5024  0BD5  2436  3188         	fcall	_ufatExtRead
  5025  0BD7  3800               	iorlw	0
  5026  0BD8  1903               	btfsc	3,2
  5027  0BD9  3400               	retlw	0
  5028  0BDA                     l6541:	
  5029                           
  5030                           ;ufat.c: 111: }
  5031                           ;ufat.c: 113: if(id){
  5032  0BDA  0020               	movlb	0	; select bank0
  5033  0BDB  0843               	movf	ufatGetNthFile@id,w
  5034  0BDC  1903               	btfsc	3,2
  5035  0BDD  2BFB               	goto	l6551
  5036                           
  5037                           ;ufat.c: 115: if(!ufatExtRead(sec, offset + 0x1A, 2, buf)) return 0;
  5038  0BDE  084F               	movf	ufatGetNthFile@sec+3,w
  5039  0BDF  27A5  3188         	fcall	PL7	;call to abstracted procedure
  5040  0BE1  3E1A               	addlw	26
  5041  0BE2  00BA               	movwf	?_ufatExtRead+4
  5042  0BE3  3000               	movlw	0
  5043  0BE4  3D51               	addwfc	ufatGetNthFile@offset+1,w
  5044  0BE5  00BB               	movwf	?_ufatExtRead+5
  5045  0BE6  3002               	movlw	2
  5046  0BE7  00BC               	movwf	?_ufatExtRead+6
  5047  0BE8  3048               	movlw	ufatGetNthFile@buf& (0+255)
  5048  0BE9  00BD               	movwf	?_ufatExtRead+7
  5049  0BEA  2436  3188         	fcall	_ufatExtRead
  5050  0BEC  3800               	iorlw	0
  5051  0BED  1903               	btfsc	3,2
  5052  0BEE  3400               	retlw	0
  5053                           
  5054                           ;ufat.c: 116: *id = ufatGetU16(buf, 0);
  5055  0BEF  01F2               	clrf	?_ufatGetU16
  5056  0BF0  3048               	movlw	ufatGetNthFile@buf& (0+255)
  5057  0BF1  2778  3188         	fcall	_ufatGetU16
  5058  0BF3  0020               	movlb	0	; select bank0
  5059  0BF4  0843               	movf	ufatGetNthFile@id,w
  5060  0BF5  0086               	movwf	6
  5061  0BF6  0187               	clrf	7
  5062  0BF7  0872               	movf	?_ufatGetU16,w
  5063  0BF8  3FC0               	movwi [0]fsr1
  5064  0BF9  0873               	movf	?_ufatGetU16+1,w
  5065  0BFA  3FC1               	movwi [1]fsr1
  5066  0BFB                     l6551:	
  5067                           
  5068                           ;ufat.c: 117: }
  5069                           ;ufat.c: 119: if(sz){
  5070  0BFB  0841               	movf	ufatGetNthFile@sz,w
  5071  0BFC  1903               	btfsc	3,2
  5072  0BFD  3401               	retlw	1
  5073                           
  5074                           ;ufat.c: 121: if(!ufatExtRead(sec, offset + 0x1C, 4, buf)) return 0;
  5075  0BFE  084F               	movf	ufatGetNthFile@sec+3,w
  5076  0BFF  27A5  3188         	fcall	PL7	;call to abstracted procedure
  5077  0C01  3E1C               	addlw	28
  5078  0C02  00BA               	movwf	?_ufatExtRead+4
  5079  0C03  3000               	movlw	0
  5080  0C04  3D51               	addwfc	ufatGetNthFile@offset+1,w
  5081  0C05  00BB               	movwf	?_ufatExtRead+5
  5082  0C06  3004               	movlw	4
  5083  0C07  00BC               	movwf	?_ufatExtRead+6
  5084  0C08  3048               	movlw	ufatGetNthFile@buf& (0+255)
  5085  0C09  00BD               	movwf	?_ufatExtRead+7
  5086  0C0A  2436  3188         	fcall	_ufatExtRead
  5087  0C0C  3800               	iorlw	0
  5088  0C0D  1903               	btfsc	3,2
  5089  0C0E  3400               	retlw	0
  5090                           
  5091                           ;ufat.c: 122: *sz = ufatGetU32(buf, 0);
  5092  0C0F  01F2               	clrf	?_ufatGetU32
  5093  0C10  3048               	movlw	ufatGetNthFile@buf& (0+255)
  5094  0C11  3183  2384  3188   	fcall	_ufatGetU32
  5095  0C14  0841               	movf	ufatGetNthFile@sz,w
  5096  0C15  0086               	movwf	6
  5097  0C16  0187               	clrf	7
  5098  0C17  0872               	movf	?_ufatGetU32,w
  5099  0C18  3FC0               	movwi [0]fsr1
  5100  0C19  0873               	movf	?_ufatGetU32+1,w
  5101  0C1A  3FC1               	movwi [1]fsr1
  5102  0C1B  0874               	movf	?_ufatGetU32+2,w
  5103  0C1C  3FC2               	movwi [2]fsr1
  5104  0C1D  0875               	movf	?_ufatGetU32+3,w
  5105  0C1E  3FC3               	movwi [3]fsr1
  5106                           
  5107                           ;ufat.c: 123: }
  5108                           ;ufat.c: 125: return 1;
  5109  0C1F  3401               	retlw	1
  5110  0C20                     l6565:	
  5111                           
  5112                           ;ufat.c: 126: }
  5113                           ;ufat.c: 127: }
  5114                           ;ufat.c: 128: offset += 32;
  5115  0C20  3020               	movlw	32
  5116  0C21  07D0               	addwf	ufatGetNthFile@offset,f
  5117  0C22  1803               	skipnc
  5118  0C23  0AD1               	incf	ufatGetNthFile@offset+1,f
  5119                           
  5120                           ;ufat.c: 129: if(offset == 512){
  5121  0C24  0851               	movf	ufatGetNthFile@offset+1,w
  5122  0C25  3A02               	xorlw	2
  5123  0C26  0450               	iorwf	ufatGetNthFile@offset,w
  5124  0C27  1D03               	skipz
  5125  0C28  2C32               	goto	l6571
  5126                           
  5127                           ;ufat.c: 130: offset = 0;
  5128  0C29  01D0               	clrf	ufatGetNthFile@offset
  5129  0C2A  01D1               	clrf	ufatGetNthFile@offset+1
  5130                           
  5131                           ;ufat.c: 131: sec++;
  5132  0C2B  0ACC               	incf	ufatGetNthFile@sec,f
  5133  0C2C  1903               	skipnz
  5134  0C2D  0ACD               	incf	ufatGetNthFile@sec+1,f
  5135  0C2E  1903               	skipnz
  5136  0C2F  0ACE               	incf	ufatGetNthFile@sec+2,f
  5137  0C30  1903               	skipnz
  5138  0C31  0ACF               	incf	ufatGetNthFile@sec+3,f
  5139  0C32                     l6571:	
  5140  0C32  0AC4               	incf	ufatGetNthFile@i,f
  5141  0C33  1903               	skipnz
  5142  0C34  0AC5               	incf	ufatGetNthFile@i+1,f
  5143  0C35  2B6C               	goto	l6573
  5144  0C36                     __end_of_ufatGetNthFile:	
  5145  0C36                     __ptext1564:	
  5146 ;; =============== function _play ends ============
  5147                           
  5148                           
  5149 ;; *************** function _ufatExtRead *****************
  5150 ;; Defined at:
  5151 ;;		line 199 in file "C:\Program Files\Microchip\Project\SingleChipPlayer\main.c"
  5152 ;; Parameters:    Size  Location     Type
  5153 ;;  sector          4   22[BANK0 ] unsigned long 
  5154 ;;  offset          2   26[BANK0 ] unsigned short 
  5155 ;;  len             1   28[BANK0 ] unsigned char 
  5156 ;;  buf             1   29[BANK0 ] PTR unsigned char 
  5157 ;;		 -> ufatGetNextClus@buf(2), ufatGetNthFile@buf(4), ufatMount@buf(13), ufatParsePartitionTable@record(16), 
  5158 ;;		 -> main@name(11), main@flags(1), RAM(128), 
  5159 ;; Auto vars:     Size  Location     Type
  5160 ;;		None
  5161 ;; Return value:  Size  Location     Type
  5162 ;;                  1    wreg      unsigned char 
  5163 ;; Registers used:
  5164 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5165 ;; Tracked objects:
  5166 ;;		On entry : 1F/0
  5167 ;;		On exit  : 1E/0
  5168 ;;		Unchanged: FFFE0/0
  5169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5170 ;;      Params:         0       8       0       0
  5171 ;;      Locals:         0       0       0       0
  5172 ;;      Temps:          0       0       0       0
  5173 ;;      Totals:         0       8       0       0
  5174 ;;Total ram usage:        8 bytes
  5175 ;; Hardware stack levels used:    1
  5176 ;; Hardware stack levels required when called:    5
  5177 ;; This function calls:
  5178 ;;		_sdSpiByte
  5179 ;;		_sdSecReadStop
  5180 ;;		_sdReadStart
  5181 ;; This function is called by:
  5182 ;;		_ufatExtReadTerminate
  5183 ;;		_ufatParsePartitionTable
  5184 ;;		_ufatMount
  5185 ;;		_ufatGetNthFile
  5186 ;;		_ufatGetNextClus
  5187 ;; This function uses a non-reentrant model
  5188 ;;
  5189  0C36                     _ufatExtRead:	
  5190  0C36                     l6255:	
  5191                           ; Regs used in _ufatExtRead: [wreg+fsr1l-status,0+pclath+cstack]
  5192                           
  5193                           
  5194                           ;main.c: 201: static u32 curSec = 0xFFFFFFFFUL;
  5195                           ;main.c: 202: static u16 curPos = 0;
  5196                           ;main.c: 204: if(sector != curSec || offset < curPos){
  5197  0C36  0021               	movlb	1	; select bank1
  5198  0C37  085A               	movf	(ufatExtRead@curSec+3)^(0+128),w
  5199  0C38  0020               	movlb	0	; select bank0
  5200  0C39  0639               	xorwf	ufatExtRead@sector+3,w
  5201  0C3A  1D03               	skipz
  5202  0C3B  2C4C               	goto	u4095
  5203  0C3C  0021               	movlb	1	; select bank1
  5204  0C3D  0859               	movf	(ufatExtRead@curSec+2)^(0+128),w
  5205  0C3E  0020               	movlb	0	; select bank0
  5206  0C3F  0638               	xorwf	ufatExtRead@sector+2,w
  5207  0C40  1D03               	skipz
  5208  0C41  2C4C               	goto	u4095
  5209  0C42  0021               	movlb	1	; select bank1
  5210  0C43  0858               	movf	(ufatExtRead@curSec+1)^(0+128),w
  5211  0C44  0020               	movlb	0	; select bank0
  5212  0C45  0637               	xorwf	ufatExtRead@sector+1,w
  5213  0C46  1D03               	skipz
  5214  0C47  2C4C               	goto	u4095
  5215  0C48  0021               	movlb	1	; select bank1
  5216  0C49  0857               	movf	ufatExtRead@curSec^(0+128),w
  5217  0C4A  0020               	movlb	0	; select bank0
  5218  0C4B  0636               	xorwf	ufatExtRead@sector,w
  5219  0C4C                     u4095:	
  5220  0C4C  1D03               	skipz
  5221  0C4D  2C5A               	goto	l6259
  5222  0C4E  0021               	movlb	1	; select bank1
  5223  0C4F  0853               	movf	(ufatExtRead@curPos+1)^(0+128),w
  5224  0C50  0020               	movlb	0	; select bank0
  5225  0C51  023B               	subwf	ufatExtRead@offset+1,w
  5226  0C52  1D03               	skipz
  5227  0C53  2C58               	goto	u4105
  5228  0C54  0021               	movlb	1	; select bank1
  5229  0C55  0852               	movf	ufatExtRead@curPos^(0+128),w
  5230  0C56  0020               	movlb	0	; select bank0
  5231  0C57  023A               	subwf	ufatExtRead@offset,w
  5232  0C58                     u4105:	
  5233  0C58  1803               	skipnc
  5234  0C59  2C9D               	goto	l6283
  5235  0C5A                     l6259:	
  5236                           
  5237                           ;main.c: 206: if(curSec != 0xFFFFFFFFUL){
  5238  0C5A  0021               	movlb	1	; select bank1
  5239  0C5B  0A57               	incf	ufatExtRead@curSec^(0+128),w
  5240  0C5C  1903               	skipnz
  5241  0C5D  0A58               	incf	(ufatExtRead@curSec+1)^(0+128),w
  5242  0C5E  1903               	skipnz
  5243  0C5F  0A59               	incf	(ufatExtRead@curSec+2)^(0+128),w
  5244  0C60  1903               	skipnz
  5245  0C61  0A5A               	incf	(ufatExtRead@curSec+3)^(0+128),w
  5246  0C62  1D03               	btfss	3,2
  5247  0C63  2C68               	goto	l6265
  5248  0C64  2C7A               	goto	l6271
  5249  0C65                     l6263:	
  5250  0C65  30FF               	movlw	255
  5251  0C66  2615  3188         	fcall	_sdSpiByte
  5252  0C68                     l6265:	
  5253  0C68  0021               	movlb	1	; select bank1
  5254  0C69  0AD2               	incf	ufatExtRead@curPos^(0+128),f
  5255  0C6A  1903               	skipnz
  5256  0C6B  0AD3               	incf	(ufatExtRead@curPos+1)^(0+128),f
  5257  0C6C  0352               	decf	ufatExtRead@curPos^(0+128),w
  5258  0C6D  3002               	movlw	2
  5259  0C6E  1903               	skipnz
  5260  0C6F  0653               	xorwf	(ufatExtRead@curPos+1)^(0+128),w
  5261  0C70  1D03               	skipz
  5262  0C71  2C65               	goto	l6263
  5263                           
  5264                           ;main.c: 209: sdSecReadStop();
  5265  0C72  261D  3188         	fcall	_sdSecReadStop
  5266                           
  5267                           ;main.c: 210: curSec = 0xFFFFFFFFUL;
  5268  0C74  30FF               	movlw	255
  5269  0C75  0021               	movlb	1	; select bank1
  5270  0C76  00DA               	movwf	(ufatExtRead@curSec+3)^(0+128)
  5271  0C77  00D9               	movwf	(ufatExtRead@curSec+2)^(0+128)
  5272  0C78  00D8               	movwf	(ufatExtRead@curSec+1)^(0+128)
  5273  0C79  00D7               	movwf	ufatExtRead@curSec^(0+128)
  5274  0C7A                     l6271:	
  5275                           
  5276                           ;main.c: 211: }
  5277                           ;main.c: 212: if(!sdReadStart(curSec = sector)) return 0;
  5278  0C7A  0020               	movlb	0	; select bank0
  5279  0C7B  0839               	movf	ufatExtRead@sector+3,w
  5280  0C7C  0021               	movlb	1	; select bank1
  5281  0C7D  00DA               	movwf	(ufatExtRead@curSec+3)^(0+128)
  5282  0C7E  0020               	movlb	0	; select bank0
  5283  0C7F  0838               	movf	ufatExtRead@sector+2,w
  5284  0C80  0021               	movlb	1	; select bank1
  5285  0C81  00D9               	movwf	(ufatExtRead@curSec+2)^(0+128)
  5286  0C82  0020               	movlb	0	; select bank0
  5287  0C83  0837               	movf	ufatExtRead@sector+1,w
  5288  0C84  0021               	movlb	1	; select bank1
  5289  0C85  00D8               	movwf	(ufatExtRead@curSec+1)^(0+128)
  5290  0C86  0020               	movlb	0	; select bank0
  5291  0C87  0836               	movf	ufatExtRead@sector,w
  5292  0C88  0021               	movlb	1	; select bank1
  5293  0C89  00D7               	movwf	ufatExtRead@curSec^(0+128)
  5294  0C8A  0859               	movf	(ufatExtRead@curSec+2)^(0+128),w
  5295  0C8B  0020               	movlb	0	; select bank0
  5296  0C8C  00B4               	movwf	?_sdReadStart+2
  5297  0C8D  0021               	movlb	1	; select bank1
  5298  0C8E  0858               	movf	(ufatExtRead@curSec+1)^(0+128),w
  5299  0C8F  0020               	movlb	0	; select bank0
  5300  0C90  00B3               	movwf	?_sdReadStart+1
  5301  0C91  0021               	movlb	1	; select bank1
  5302  0C92  0857               	movf	ufatExtRead@curSec^(0+128),w
  5303  0C93  0020               	movlb	0	; select bank0
  5304  0C94  00B2               	movwf	?_sdReadStart
  5305  0C95  26B4  3188         	fcall	_sdReadStart
  5306  0C97  3800               	iorlw	0
  5307  0C98  1903               	btfsc	3,2
  5308  0C99  3400               	retlw	0
  5309                           
  5310                           ;main.c: 213: curPos = 0;
  5311  0C9A  0021               	movlb	1	; select bank1
  5312  0C9B  01D2               	clrf	ufatExtRead@curPos^(0+128)
  5313  0C9C  01D3               	clrf	(ufatExtRead@curPos+1)^(0+128)
  5314  0C9D                     l6283:	
  5315  0C9D  0020               	movlb	0	; select bank0
  5316  0C9E  083B               	movf	ufatExtRead@offset+1,w
  5317  0C9F  0021               	movlb	1	; select bank1
  5318  0CA0  0653               	xorwf	(ufatExtRead@curPos+1)^(0+128),w
  5319  0CA1  1D03               	skipz
  5320  0CA2  2CA7               	goto	u4145
  5321  0CA3  0020               	movlb	0	; select bank0
  5322  0CA4  083A               	movf	ufatExtRead@offset,w
  5323  0CA5  0021               	movlb	1	; select bank1
  5324  0CA6  0652               	xorwf	ufatExtRead@curPos^(0+128),w
  5325  0CA7                     u4145:	
  5326  0CA7  1903               	btfsc	3,2
  5327  0CA8  2CB0               	goto	l6285
  5328                           
  5329                           ;main.c: 217: curPos++;
  5330  0CA9  0AD2               	incf	ufatExtRead@curPos^(0+128),f
  5331  0CAA  1903               	skipnz
  5332  0CAB  0AD3               	incf	(ufatExtRead@curPos+1)^(0+128),f
  5333                           
  5334                           ;main.c: 218: sdSpiByte(0xFF);
  5335  0CAC  30FF               	movlw	255
  5336  0CAD  2615  3188         	fcall	_sdSpiByte
  5337  0CAF  2C9D               	goto	l6283
  5338  0CB0                     l6285:	
  5339                           
  5340                           ;main.c: 219: }
  5341                           ;main.c: 221: curPos += len;
  5342  0CB0  0020               	movlb	0	; select bank0
  5343  0CB1  083C               	movf	ufatExtRead@len,w
  5344  0CB2  0021               	movlb	1	; select bank1
  5345  0CB3  07D2               	addwf	ufatExtRead@curPos^(0+128),f
  5346  0CB4  1803               	skipnc
  5347  0CB5  0AD3               	incf	(ufatExtRead@curPos+1)^(0+128),f
  5348  0CB6                     l6291:	
  5349                           ;main.c: 222: while(len--) *buf++ = sdSpiByte(0xFF);
  5350                           
  5351  0CB6  0020               	movlb	0	; select bank0
  5352  0CB7  03BC               	decf	ufatExtRead@len,f
  5353  0CB8  083C               	movf	ufatExtRead@len,w
  5354  0CB9  3AFF               	xorlw	255
  5355  0CBA  1903               	btfsc	3,2
  5356  0CBB  2CC6               	goto	l6293
  5357  0CBC  083D               	movf	ufatExtRead@buf,w
  5358  0CBD  0086               	movwf	6
  5359  0CBE  0187               	clrf	7
  5360  0CBF  30FF               	movlw	255
  5361  0CC0  2615  3188         	fcall	_sdSpiByte
  5362  0CC2  0081               	movwf	1
  5363  0CC3  0020               	movlb	0	; select bank0
  5364  0CC4  0ABD               	incf	ufatExtRead@buf,f
  5365  0CC5  2CB6               	goto	l6291
  5366  0CC6                     l6293:	
  5367                           
  5368                           ;main.c: 224: if(curPos == 512){
  5369  0CC6  0021               	movlb	1	; select bank1
  5370  0CC7  0853               	movf	(ufatExtRead@curPos+1)^(0+128),w
  5371  0CC8  3A02               	xorlw	2
  5372  0CC9  0452               	iorwf	ufatExtRead@curPos^(0+128),w
  5373  0CCA  1D03               	skipz
  5374  0CCB  3401               	retlw	1
  5375                           
  5376                           ;main.c: 225: sdSecReadStop();
  5377  0CCC  261D               	fcall	_sdSecReadStop
  5378                           
  5379                           ;main.c: 226: curSec = 0xFFFFFFFFUL;
  5380  0CCD  30FF               	movlw	255
  5381  0CCE  0021               	movlb	1	; select bank1
  5382  0CCF  00DA               	movwf	(ufatExtRead@curSec+3)^(0+128)
  5383  0CD0  00D9               	movwf	(ufatExtRead@curSec+2)^(0+128)
  5384  0CD1  00D8               	movwf	(ufatExtRead@curSec+1)^(0+128)
  5385  0CD2  00D7               	movwf	ufatExtRead@curSec^(0+128)
  5386                           
  5387                           ;main.c: 227: }
  5388                           ;main.c: 229: return 1;
  5389  0CD3  3401               	retlw	1
  5390  0CD4                     __end_of_ufatExtRead:	
  5391  0CD4                     __ptext1566:	
  5392 ;; =============== function _sdPrvACMD ends ============
  5393                           
  5394                           
  5395 ;; *************** function _hdrProcess *****************
  5396 ;; Defined at:
  5397 ;;		line 250 in file "C:\Program Files\Microchip\Project\SingleChipPlayer\main.c"
  5398 ;; Parameters:    Size  Location     Type
  5399 ;;		None
  5400 ;; Auto vars:     Size  Location     Type
  5401 ;;  hdr             4   13[BANK0 ] unsigned char [4]
  5402 ;;  t32             4   21[BANK0 ] unsigned long 
  5403 ;;  j               1   25[BANK0 ] unsigned char 
  5404 ;;  i               1   20[BANK0 ] unsigned char 
  5405 ;;  csz             1   19[BANK0 ] unsigned char 
  5406 ;; Return value:  Size  Location     Type
  5407 ;;                  1    wreg      unsigned char 
  5408 ;; Registers used:
  5409 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5410 ;; Tracked objects:
  5411 ;;		On entry : 1F/0
  5412 ;;		On exit  : 1B/0
  5413 ;;		Unchanged: FFFE0/0
  5414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5415 ;;      Params:         0       0       0       0
  5416 ;;      Locals:         0      13       0       0
  5417 ;;      Temps:          0       8       0       0
  5418 ;;      Totals:         0      21       0       0
  5419 ;;Total ram usage:       21 bytes
  5420 ;; Hardware stack levels used:    1
  5421 ;; Hardware stack levels required when called:    4
  5422 ;; This function calls:
  5423 ;;		_spiCmp
  5424 ;;		_byte
  5425 ;;		___bmul
  5426 ;;		___lldiv
  5427 ;;		_sdSpiByte
  5428 ;; This function is called by:
  5429 ;;		_play
  5430 ;; This function uses a non-reentrant model
  5431 ;;
  5432  0CD4                     _hdrProcess:	
  5433                           
  5434                           ;main.c: 252: static const UInt8 riff[4] = {'R', 'I', 'F', 'F'};
  5435                           ;main.c: 253: static const UInt8 wave[4] = {'W', 'A', 'V', 'E'};
  5436                           ;main.c: 254: UInt8 csz, i = 0, j;
  5437                           
  5438                           ; Regs used in _hdrProcess: [wreg+fsr1l-status,0+pclath+cstack]
  5439  0CD4  01B4               	clrf	hdrProcess@i
  5440                           
  5441                           ;main.c: 255: UInt32 t32;
  5442                           ;main.c: 259: if(!spiCmp(riff, 4)) return 0;
  5443  0CD5  3004               	movlw	4
  5444  0CD6  00F3               	movwf	?_spiCmp
  5445  0CD7  3027               	movlw	(hdrProcess@riff| (0+32768))& (0+255)
  5446  0CD8  26A2  3188         	fcall	_spiCmp
  5447  0CDA  3800               	iorlw	0
  5448  0CDB  1903               	btfsc	3,2
  5449  0CDC  3400               	retlw	0
  5450                           
  5451                           ;main.c: 262: for(j = 0; j < 4; j++) byte();
  5452  0CDD  0020               	movlb	0	; select bank0
  5453  0CDE  01B9               	clrf	hdrProcess@j
  5454  0CDF                     l6073:	
  5455  0CDF  2613  3188         	fcall	_byte
  5456  0CE1  0020               	movlb	0	; select bank0
  5457  0CE2  0AB9               	incf	hdrProcess@j,f
  5458  0CE3  3004               	movlw	4
  5459  0CE4  0239               	subwf	hdrProcess@j,w
  5460  0CE5  1C03               	skipc
  5461  0CE6  2CDF               	goto	l6073
  5462                           
  5463                           ;main.c: 265: if(!spiCmp(wave, 4)) return 0;
  5464  0CE7  3004               	movlw	4
  5465  0CE8  00F3               	movwf	?_spiCmp
  5466  0CE9  302B               	movlw	(hdrProcess@wave| (0+32768))& (0+255)
  5467  0CEA  26A2  3188         	fcall	_spiCmp
  5468  0CEC  3800               	iorlw	0
  5469  0CED  1903               	btfsc	3,2
  5470  0CEE  3400               	retlw	0
  5471                           
  5472                           ;main.c: 266: i += 12;
  5473  0CEF  300C               	movlw	12
  5474  0CF0  0020               	movlb	0	; select bank0
  5475  0CF1  07B4               	addwf	hdrProcess@i,f
  5476  0CF2                     l6233:	
  5477                           ;main.c: 269: while(i < 127){
  5478                           
  5479  0CF2  307F               	movlw	127
  5480  0CF3  0234               	subwf	hdrProcess@i,w
  5481  0CF4  1803               	btfsc	3,0
  5482  0CF5  2E01               	goto	l6215
  5483                           
  5484                           ;main.c: 271: UInt8 hdr[4];
  5485                           ;main.c: 273: for(j = 0; j < 4; j++) hdr[j] = byte();
  5486  0CF6  01B9               	clrf	hdrProcess@j
  5487  0CF7                     l6093:	
  5488  0CF7  0839               	movf	hdrProcess@j,w
  5489  0CF8  3E2D               	addlw	hdrProcess@hdr& (0+255)
  5490  0CF9  0086               	movwf	6
  5491  0CFA  0187               	clrf	7
  5492  0CFB  2613  3188         	fcall	_byte
  5493  0CFD  0081               	movwf	1
  5494  0CFE  0020               	movlb	0	; select bank0
  5495  0CFF  0AB9               	incf	hdrProcess@j,f
  5496  0D00  3004               	movlw	4
  5497  0D01  0239               	subwf	hdrProcess@j,w
  5498  0D02  1C03               	skipc
  5499  0D03  2CF7               	goto	l6093
  5500                           
  5501                           ;main.c: 274: csz = byte();
  5502  0D04  2613  3188         	fcall	_byte
  5503  0D06  0020               	movlb	0	; select bank0
  5504  0D07  00B3               	movwf	hdrProcess@csz
  5505                           
  5506                           ;main.c: 275: if(byte() || byte() || byte()) return 0;
  5507  0D08  2613  3188         	fcall	_byte
  5508  0D0A  3800               	iorlw	0
  5509  0D0B  1D03               	skipz
  5510  0D0C  3400               	retlw	0
  5511  0D0D  2613  3188         	fcall	_byte
  5512  0D0F  3800               	iorlw	0
  5513  0D10  1D03               	skipz
  5514  0D11  3400               	retlw	0
  5515  0D12  2613  3188         	fcall	_byte
  5516  0D14  3A00               	xorlw	0
  5517  0D15  1D03               	btfss	3,2
  5518  0D16  3400               	retlw	0
  5519                           
  5520                           ;main.c: 276: i += 8;
  5521  0D17  3008               	movlw	8
  5522  0D18  0020               	movlb	0	; select bank0
  5523  0D19  07B4               	addwf	hdrProcess@i,f
  5524                           
  5525                           ;main.c: 278: if(hdr[0] == 'f' && hdr[1] == 'm' && hdr[2] == 't' && hdr[3] == ' '){
  5526  0D1A  082D               	movf	hdrProcess@hdr,w
  5527  0D1B  3A66               	xorlw	102
  5528  0D1C  1D03               	skipz
  5529  0D1D  2E04               	goto	l6221
  5530  0D1E  082E               	movf	hdrProcess@hdr+1,w
  5531  0D1F  3A6D               	xorlw	109
  5532  0D20  1D03               	skipz
  5533  0D21  2E04               	goto	l6221
  5534  0D22  082F               	movf	hdrProcess@hdr+2,w
  5535  0D23  3A74               	xorlw	116
  5536  0D24  1D03               	skipz
  5537  0D25  2E04               	goto	l6221
  5538  0D26  0830               	movf	hdrProcess@hdr+3,w
  5539  0D27  3A20               	xorlw	32
  5540  0D28  1D03               	skipz
  5541  0D29  2E04               	goto	l6221
  5542                           
  5543                           ;main.c: 280: byteStride = 1;
  5544  0D2A  0021               	movlb	1	; select bank1
  5545  0D2B  01D4               	clrf	_byteStride^(0+128)
  5546  0D2C  0AD4               	incf	_byteStride^(0+128),f
  5547                           
  5548                           ;main.c: 282: if(byte() != 1 || byte() != 0) return 0;
  5549  0D2D  2613  3188         	fcall	_byte
  5550  0D2F  3A01               	xorlw	1
  5551  0D30  1D03               	skipz
  5552  0D31  3400               	retlw	0
  5553  0D32  2613  3188         	fcall	_byte
  5554  0D34  3A00               	xorlw	0
  5555  0D35  1D03               	btfss	3,2
  5556  0D36  3400               	retlw	0
  5557                           
  5558                           ;main.c: 283: i += 2;
  5559  0D37  0020               	movlb	0	; select bank0
  5560  0D38  0AB4               	incf	hdrProcess@i,f
  5561  0D39  0AB4               	incf	hdrProcess@i,f
  5562                           
  5563                           ;main.c: 285: j = byte();
  5564  0D3A  2613  3188         	fcall	_byte
  5565  0D3C  0020               	movlb	0	; select bank0
  5566  0D3D  00B9               	movwf	hdrProcess@j
  5567                           
  5568                           ;main.c: 286: if(byte() != 0) return 0;
  5569  0D3E  2613  3188         	fcall	_byte
  5570  0D40  3A00               	xorlw	0
  5571  0D41  1D03               	btfss	3,2
  5572  0D42  3400               	retlw	0
  5573                           
  5574                           ;main.c: 287: if(!j) return 0;
  5575  0D43  0020               	movlb	0	; select bank0
  5576  0D44  08B9               	movf	hdrProcess@j,f
  5577  0D45  1903               	btfsc	3,2
  5578  0D46  3400               	retlw	0
  5579                           
  5580                           ;main.c: 288: byteStride *= j;
  5581  0D47  0021               	movlb	1	; select bank1
  5582  0D48  0854               	movf	_byteStride^(0+128),w
  5583  0D49  00F2               	movwf	?___bmul
  5584  0D4A  0020               	movlb	0	; select bank0
  5585  0D4B  0839               	movf	hdrProcess@j,w
  5586  0D4C  2696  3188         	fcall	___bmul
  5587  0D4E  0021               	movlb	1	; select bank1
  5588  0D4F  00D4               	movwf	_byteStride^(0+128)
  5589                           
  5590                           ;main.c: 289: i += 2;
  5591  0D50  0020               	movlb	0	; select bank0
  5592  0D51  0AB4               	incf	hdrProcess@i,f
  5593  0D52  0AB4               	incf	hdrProcess@i,f
  5594                           
  5595                           ;main.c: 291: t32 = 0;
  5596  0D53  01B5               	clrf	hdrProcess@t32
  5597  0D54  01B6               	clrf	hdrProcess@t32+1
  5598  0D55  01B7               	clrf	hdrProcess@t32+2
  5599  0D56  01B8               	clrf	hdrProcess@t32+3
  5600                           
  5601                           ;main.c: 292: for(j = 0; j < 4; j++) t32 = (t32 >> 8) | (((UInt32)byte()) << 24);
  5602  0D57  01B9               	clrf	hdrProcess@j
  5603  0D58                     l6157:	
  5604  0D58  2613  3188         	fcall	_byte
  5605  0D5A  0020               	movlb	0	; select bank0
  5606  0D5B  00A8               	movwf	??_hdrProcess+3
  5607  0D5C  01A7               	clrf	??_hdrProcess+2
  5608  0D5D  01A6               	clrf	??_hdrProcess+1
  5609  0D5E  01A5               	clrf	??_hdrProcess
  5610  0D5F  0835               	movf	hdrProcess@t32,w
  5611  0D60  00A9               	movwf	??_hdrProcess+4
  5612  0D61  0836               	movf	hdrProcess@t32+1,w
  5613  0D62  00AA               	movwf	??_hdrProcess+5
  5614  0D63  0837               	movf	hdrProcess@t32+2,w
  5615  0D64  00AB               	movwf	??_hdrProcess+6
  5616  0D65  0838               	movf	hdrProcess@t32+3,w
  5617  0D66  00AC               	movwf	??_hdrProcess+7
  5618  0D67  082A               	movf	??_hdrProcess+5,w
  5619  0D68  00A9               	movwf	??_hdrProcess+4
  5620  0D69  082B               	movf	??_hdrProcess+6,w
  5621  0D6A  00AA               	movwf	??_hdrProcess+5
  5622  0D6B  082C               	movf	??_hdrProcess+7,w
  5623  0D6C  00AB               	movwf	??_hdrProcess+6
  5624  0D6D  01AC               	clrf	??_hdrProcess+7
  5625  0D6E  0825               	movf	??_hdrProcess,w
  5626  0D6F  0429               	iorwf	??_hdrProcess+4,w
  5627  0D70  00B5               	movwf	hdrProcess@t32
  5628  0D71  0826               	movf	??_hdrProcess+1,w
  5629  0D72  042A               	iorwf	??_hdrProcess+5,w
  5630  0D73  00B6               	movwf	hdrProcess@t32+1
  5631  0D74  0827               	movf	??_hdrProcess+2,w
  5632  0D75  042B               	iorwf	??_hdrProcess+6,w
  5633  0D76  00B7               	movwf	hdrProcess@t32+2
  5634  0D77  0828               	movf	??_hdrProcess+3,w
  5635  0D78  042C               	iorwf	??_hdrProcess+7,w
  5636  0D79  00B8               	movwf	hdrProcess@t32+3
  5637  0D7A  0AB9               	incf	hdrProcess@j,f
  5638  0D7B  3004               	movlw	4
  5639  0D7C  0239               	subwf	hdrProcess@j,w
  5640  0D7D  1C03               	skipc
  5641  0D7E  2D58               	goto	l6157
  5642                           
  5643                           ;main.c: 293: i += 4;
  5644  0D7F  3004               	movlw	4
  5645  0D80  07B4               	addwf	hdrProcess@i,f
  5646                           
  5647                           ;main.c: 297: tmrReload = 69;
  5648  0D81  3045               	movlw	69
  5649  0D82  00FA               	movwf	_tmrReload	;volatile
  5650                           
  5651                           ;main.c: 299: t32 = (33000000 + ((4 * t32) / 2)) / (4 * t32);
  5652  0D83  0838               	movf	hdrProcess@t32+3,w
  5653  0D84  00F5               	movwf	?___lldiv+3
  5654  0D85  0837               	movf	hdrProcess@t32+2,w
  5655  0D86  00F4               	movwf	?___lldiv+2
  5656  0D87  0836               	movf	hdrProcess@t32+1,w
  5657  0D88  00F3               	movwf	?___lldiv+1
  5658  0D89  0835               	movf	hdrProcess@t32,w
  5659  0D8A  00F2               	movwf	?___lldiv
  5660  0D8B  3002               	movlw	2
  5661  0D8C                     u3975:	
  5662  0D8C  35F2               	lslf	?___lldiv,f
  5663  0D8D  0DF3               	rlf	?___lldiv+1,f
  5664  0D8E  0DF4               	rlf	?___lldiv+2,f
  5665  0D8F  0DF5               	rlf	?___lldiv+3,f
  5666  0D90  0B89               	decfsz	9,f
  5667  0D91  2D8C               	goto	u3975
  5668  0D92  0835               	movf	hdrProcess@t32,w
  5669  0D93  00A5               	movwf	??_hdrProcess
  5670  0D94  0836               	movf	hdrProcess@t32+1,w
  5671  0D95  00A6               	movwf	??_hdrProcess+1
  5672  0D96  0837               	movf	hdrProcess@t32+2,w
  5673  0D97  00A7               	movwf	??_hdrProcess+2
  5674  0D98  0838               	movf	hdrProcess@t32+3,w
  5675  0D99  00A8               	movwf	??_hdrProcess+3
  5676  0D9A  35A5               	lslf	??_hdrProcess,f
  5677  0D9B  0DA6               	rlf	??_hdrProcess+1,f
  5678  0D9C  0DA7               	rlf	??_hdrProcess+2,f
  5679  0D9D  0DA8               	rlf	??_hdrProcess+3,f
  5680  0D9E  3040               	movlw	64
  5681  0D9F  0725               	addwf	??_hdrProcess,w
  5682  0DA0  00F6               	movwf	?___lldiv+4
  5683  0DA1  308A               	movlw	138
  5684  0DA2  3D26               	addwfc	??_hdrProcess+1,w
  5685  0DA3  00F7               	movwf	?___lldiv+5
  5686  0DA4  30F7               	movlw	247
  5687  0DA5  3D27               	addwfc	??_hdrProcess+2,w
  5688  0DA6  00F8               	movwf	?___lldiv+6
  5689  0DA7  3001               	movlw	1
  5690  0DA8  3D28               	addwfc	??_hdrProcess+3,w
  5691  0DA9  00F9               	movwf	?___lldiv+7
  5692  0DAA  3183  23CA  3188   	fcall	___lldiv
  5693  0DAD  0875               	movf	?___lldiv+3,w
  5694  0DAE  00B8               	movwf	hdrProcess@t32+3
  5695  0DAF  0874               	movf	?___lldiv+2,w
  5696  0DB0  00B7               	movwf	hdrProcess@t32+2
  5697  0DB1  0873               	movf	?___lldiv+1,w
  5698  0DB2  00B6               	movwf	hdrProcess@t32+1
  5699  0DB3  0872               	movf	?___lldiv,w
  5700  0DB4  00B5               	movwf	hdrProcess@t32
  5701                           
  5702                           ;main.c: 301: j = 0;
  5703  0DB5  01B9               	clrf	hdrProcess@j
  5704  0DB6                     l6173:	
  5705                           ;main.c: 302: while(t32 > 256){
  5706                           
  5707  0DB6  3000               	movlw	0
  5708  0DB7  0238               	subwf	hdrProcess@t32+3,w
  5709  0DB8  1D03               	skipz
  5710  0DB9  2DC0               	goto	u3985
  5711  0DBA  3000               	movlw	0
  5712  0DBB  0237               	subwf	hdrProcess@t32+2,w
  5713  0DBC  1D03               	skipz
  5714  0DBD  2DC0               	goto	u3985
  5715  0DBE  3002               	movlw	2
  5716  0DBF  0236               	subwf	hdrProcess@t32+1,w
  5717  0DC0                     u3985:	
  5718  0DC0  1C03               	btfss	3,0
  5719  0DC1  2DC8               	goto	l6175
  5720                           
  5721                           ;main.c: 304: j++;
  5722  0DC2  0AB9               	incf	hdrProcess@j,f
  5723                           
  5724                           ;main.c: 305: t32 >>= 1;
  5725  0DC3  36B8               	lsrf	hdrProcess@t32+3,f
  5726  0DC4  0CB7               	rrf	hdrProcess@t32+2,f
  5727  0DC5  0CB6               	rrf	hdrProcess@t32+1,f
  5728  0DC6  0CB5               	rrf	hdrProcess@t32,f
  5729  0DC7  2DB6               	goto	l6173
  5730  0DC8                     l6175:	
  5731                           
  5732                           ;main.c: 306: }
  5733                           ;main.c: 307: if(j >= 8) return 0;
  5734  0DC8  3008               	movlw	8
  5735  0DC9  0239               	subwf	hdrProcess@j,w
  5736  0DCA  1803               	btfsc	3,0
  5737  0DCB  3400               	retlw	0
  5738                           
  5739                           ;main.c: 309: OPTION_REG = (OPTION_REG & 0xF0) | (j ? (j - 1) : 8);
  5740  0DCC  3008               	movlw	8
  5741  0DCD  00B1               	movwf	_hdrProcess$2012
  5742  0DCE  01B2               	clrf	_hdrProcess$2012+1
  5743  0DCF  0839               	movf	hdrProcess@j,w
  5744  0DD0  1903               	btfsc	3,2
  5745  0DD1  2DD9               	goto	l6187
  5746  0DD2  0839               	movf	hdrProcess@j,w
  5747  0DD3  00B1               	movwf	_hdrProcess$2012
  5748  0DD4  01B2               	clrf	_hdrProcess$2012+1
  5749  0DD5  30FF               	movlw	-1
  5750  0DD6  07B1               	addwf	_hdrProcess$2012,f
  5751  0DD7  1C03               	skipc
  5752  0DD8  03B2               	decf	_hdrProcess$2012+1,f
  5753  0DD9                     l6187:	
  5754  0DD9  0021               	movlb	1	; select bank1
  5755  0DDA  0815               	movf	21,w
  5756  0DDB  39F0               	andlw	240
  5757  0DDC  0020               	movlb	0	; select bank0
  5758  0DDD  0431               	iorwf	_hdrProcess$2012,w
  5759  0DDE  0021               	movlb	1	; select bank1
  5760  0DDF  0095               	movwf	21	;volatile
  5761                           
  5762                           ;main.c: 310: tmrReload = 256 - t32;
  5763  0DE0  0020               	movlb	0	; select bank0
  5764  0DE1  0835               	movf	hdrProcess@t32,w
  5765  0DE2  3C00               	sublw	0
  5766  0DE3  00FA               	movwf	_tmrReload	;volatile
  5767                           
  5768                           ;main.c: 312: for(j = 0; j < 6; j++) sdSpiByte(0xFF);
  5769  0DE4  01B9               	clrf	hdrProcess@j
  5770  0DE5                     l6197:	
  5771  0DE5  30FF               	movlw	255
  5772  0DE6  2615  3188         	fcall	_sdSpiByte
  5773  0DE8  0020               	movlb	0	; select bank0
  5774  0DE9  0AB9               	incf	hdrProcess@j,f
  5775  0DEA  3006               	movlw	6
  5776  0DEB  0239               	subwf	hdrProcess@j,w
  5777  0DEC  1C03               	skipc
  5778  0DED  2DE5               	goto	l6197
  5779                           
  5780                           ;main.c: 313: i += 6;
  5781  0DEE  3006               	movlw	6
  5782  0DEF  07B4               	addwf	hdrProcess@i,f
  5783                           
  5784                           ;main.c: 315: if(sdSpiByte(0xFF) != 8 || sdSpiByte(0xFF) != 0) return 0;
  5785  0DF0  30FF               	movlw	255
  5786  0DF1  2615  3188         	fcall	_sdSpiByte
  5787  0DF3  3A08               	xorlw	8
  5788  0DF4  1D03               	skipz
  5789  0DF5  3400               	retlw	0
  5790  0DF6  30FF               	movlw	255
  5791  0DF7  2615  3188         	fcall	_sdSpiByte
  5792  0DF9  3A00               	xorlw	0
  5793  0DFA  1D03               	btfss	3,2
  5794  0DFB  3400               	retlw	0
  5795                           
  5796                           ;main.c: 316: i += 2;
  5797  0DFC  0020               	movlb	0	; select bank0
  5798  0DFD  0AB4               	incf	hdrProcess@i,f
  5799  0DFE  0AB4               	incf	hdrProcess@i,f
  5800                           
  5801                           ;main.c: 318: byteStride--;
  5802  0DFF  0021               	movlb	1	; select bank1
  5803  0E00  03D4               	decf	_byteStride^(0+128),f
  5804  0E01                     l6215:	
  5805                           
  5806                           ;main.c: 319: return i;
  5807  0E01  0020               	movlb	0	; select bank0
  5808  0E02  0834               	movf	hdrProcess@i,w
  5809  0E03  0008               	return
  5810  0E04                     l6221:	
  5811                           
  5812                           ;main.c: 321: else{
  5813                           ;main.c: 323: if(csz > 0x80) return 0;
  5814  0E04  3081               	movlw	129
  5815  0E05  0233               	subwf	hdrProcess@csz,w
  5816  0E06  1803               	btfsc	3,0
  5817  0E07  3400               	retlw	0
  5818                           
  5819                           ;main.c: 324: i += csz;
  5820  0E08  0833               	movf	hdrProcess@csz,w
  5821  0E09  07B4               	addwf	hdrProcess@i,f
  5822  0E0A                     l6231:	
  5823                           ;main.c: 325: while(csz--) byte();
  5824                           
  5825  0E0A  0020               	movlb	0	; select bank0
  5826  0E0B  03B3               	decf	hdrProcess@csz,f
  5827  0E0C  0833               	movf	hdrProcess@csz,w
  5828  0E0D  3AFF               	xorlw	255
  5829  0E0E  1903               	btfsc	3,2
  5830  0E0F  2CF2               	goto	l6233
  5831  0E10  2613  3188         	fcall	_byte
  5832  0E12  2E0A               	goto	l6231
  5833  0E13                     __end_of_hdrProcess:	
  5834  0E13                     __ptext1576:	
  5835 ;; =============== function _sdNextSec ends ============
  5836                           
  5837                           
  5838 ;; *************** function _byte *****************
  5839 ;; Defined at:
  5840 ;;		line 238 in file "C:\Program Files\Microchip\Project\SingleChipPlayer\main.c"
  5841 ;; Parameters:    Size  Location     Type
  5842 ;;		None
  5843 ;; Auto vars:     Size  Location     Type
  5844 ;;		None
  5845 ;; Return value:  Size  Location     Type
  5846 ;;                  1    wreg      unsigned char 
  5847 ;; Registers used:
  5848 ;;		wreg, pclath, cstack
  5849 ;; Tracked objects:
  5850 ;;		On entry : 1A/0
  5851 ;;		On exit  : 1F/4
  5852 ;;		Unchanged: FFFE0/0
  5853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5854 ;;      Params:         0       0       0       0
  5855 ;;      Locals:         0       0       0       0
  5856 ;;      Temps:          0       0       0       0
  5857 ;;      Totals:         0       0       0       0
  5858 ;;Total ram usage:        0 bytes
  5859 ;; Hardware stack levels used:    1
  5860 ;; Hardware stack levels required when called:    2
  5861 ;; This function calls:
  5862 ;;		_sdSpiByte
  5863 ;; This function is called by:
  5864 ;;		_spiCmp
  5865 ;;		_hdrProcess
  5866 ;; This function uses a non-reentrant model
  5867 ;;
  5868  0E13                     _byte:	
  5869                           
  5870                           ;main.c: 240: return sdSpiByte(0xFF);
  5871                           
  5872                           ; Regs used in _byte: [wreg+pclath+cstack]
  5873  0E13  30FF               	movlw	255
  5874  0E14  2E15               	ljmp	_sdSpiByte
  5875  0E15                     __end_of_byte:	
  5876  0E15                     __ptext1595:	
  5877 ;; =============== function _ufatInit ends ============
  5878                           
  5879                           
  5880 ;; *************** function _sdSpiByte *****************
  5881 ;; Defined at:
  5882 ;;		line 28 in file "C:\Program Files\Microchip\Project\SingleChipPlayer\SD.c"
  5883 ;; Parameters:    Size  Location     Type
  5884 ;;  byte            1    wreg     unsigned char 
  5885 ;; Auto vars:     Size  Location     Type
  5886 ;;  byte            1    2[COMMON] unsigned char 
  5887 ;; Return value:  Size  Location     Type
  5888 ;;                  1    wreg      unsigned char 
  5889 ;; Registers used:
  5890 ;;		wreg
  5891 ;; Tracked objects:
  5892 ;;		On entry : 1A/0
  5893 ;;		On exit  : 1F/4
  5894 ;;		Unchanged: FFFE0/0
  5895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5896 ;;      Params:         0       0       0       0
  5897 ;;      Locals:         1       0       0       0
  5898 ;;      Temps:          0       0       0       0
  5899 ;;      Totals:         1       0       0       0
  5900 ;;Total ram usage:        1 bytes
  5901 ;; Hardware stack levels used:    1
  5902 ;; Hardware stack levels required when called:    1
  5903 ;; This function calls:
  5904 ;;		Nothing
  5905 ;; This function is called by:
  5906 ;;		_ufatExtRead
  5907 ;;		_byte
  5908 ;;		_hdrProcess
  5909 ;;		_play
  5910 ;;		_sdPrvSendCmd
  5911 ;;		_sdPrvReadResp
  5912 ;;		_sdPrvSimpleCommand
  5913 ;;		_sdInit
  5914 ;;		_sdReadStart
  5915 ;;		_sdNextSec
  5916 ;; This function uses a non-reentrant model
  5917 ;;
  5918  0E15                     _sdSpiByte:	
  5919                           
  5920                           ; Regs used in _sdSpiByte: [wreg]
  5921                           ;sdSpiByte@byte stored from wreg
  5922  0E15  00F2               	movwf	sdSpiByte@byte
  5923                           
  5924                           ;SD.c: 30: SSP1BUF = byte;
  5925  0E16  0872               	movf	sdSpiByte@byte,w
  5926  0E17  0024               	movlb	4	; select bank4
  5927  0E18  0091               	movwf	17	;volatile
  5928  0E19                     l2350:	
  5929                           ;SD.c: 31: while(!SSP1STATbits.BF);
  5930                           
  5931  0E19  1C14               	btfss	20,0	;volatile
  5932  0E1A  2E19               	goto	l2350
  5933                           
  5934                           ;SD.c: 32: return SSP1BUF;
  5935  0E1B  0811               	movf	17,w	;volatile
  5936  0E1C  0008               	return
  5937  0E1D                     __end_of_sdSpiByte:	
  5938  0E1D                     __ptext1568:	
  5939 ;; =============== function _sdReadStart ends ============
  5940                           
  5941                           
  5942 ;; *************** function _sdSecReadStop *****************
  5943 ;; Defined at:
  5944 ;;		line 249 in file "C:\Program Files\Microchip\Project\SingleChipPlayer\SD.c"
  5945 ;; Parameters:    Size  Location     Type
  5946 ;;		None
  5947 ;; Auto vars:     Size  Location     Type
  5948 ;;		None
  5949 ;; Return value:  Size  Location     Type
  5950 ;;		None               void
  5951 ;; Registers used:
  5952 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5953 ;; Tracked objects:
  5954 ;;		On entry : 1E/0
  5955 ;;		On exit  : 1F/0
  5956 ;;		Unchanged: FFFE0/0
  5957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5958 ;;      Params:         0       0       0       0
  5959 ;;      Locals:         0       0       0       0
  5960 ;;      Temps:          0       0       0       0
  5961 ;;      Totals:         0       0       0       0
  5962 ;;Total ram usage:        0 bytes
  5963 ;; Hardware stack levels used:    1
  5964 ;; Hardware stack levels required when called:    4
  5965 ;; This function calls:
  5966 ;;		_sdPrvSimpleCommand
  5967 ;; This function is called by:
  5968 ;;		_ufatExtRead
  5969 ;;		_play
  5970 ;; This function uses a non-reentrant model
  5971 ;;
  5972  0E1D                     _sdSecReadStop:	
  5973                           
  5974                           ;SD.c: 252: sdPrvSimpleCommand(12, 0, 1);
  5975                           
  5976                           ; Regs used in _sdSecReadStop: [wreg+fsr1l-status,0+pclath+cstack]
  5977  0E1D  0020               	movlb	0	; select bank0
  5978  0E1E  01AB               	clrf	?_sdPrvSimpleCommand
  5979  0E1F  01AC               	clrf	?_sdPrvSimpleCommand+1
  5980  0E20  01AD               	clrf	?_sdPrvSimpleCommand+2
  5981  0E21  01AE               	clrf	?_sdPrvSimpleCommand+3
  5982  0E22  01AF               	clrf	?_sdPrvSimpleCommand+4
  5983  0E23  0AAF               	incf	?_sdPrvSimpleCommand+4,f
  5984  0E24  300C               	movlw	12
  5985  0E25  2E81               	ljmp	_sdPrvSimpleCommand
  5986  0E26                     __end_of_sdSecReadStop:	
  5987  0E26                     __ptext1560:	
  5988 ;; =============== function _ufatGetNthFile ends ============
  5989                           
  5990                           
  5991 ;; *************** function _sdInit *****************
  5992 ;; Defined at:
  5993 ;;		line 181 in file "C:\Program Files\Microchip\Project\SingleChipPlayer\SD.c"
  5994 ;; Parameters:    Size  Location     Type
  5995 ;;		None
  5996 ;; Auto vars:     Size  Location     Type
  5997 ;;  v               1   37[BANK0 ] unsigned char 
  5998 ;;  SD              1   36[BANK0 ] unsigned char 
  5999 ;;  tries           1   35[BANK0 ] unsigned char 
  6000 ;; Return value:  Size  Location     Type
  6001 ;;                  1    wreg      unsigned char 
  6002 ;; Registers used:
  6003 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6004 ;; Tracked objects:
  6005 ;;		On entry : 1F/0
  6006 ;;		On exit  : 1B/0
  6007 ;;		Unchanged: 0/0
  6008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6009 ;;      Params:         0       0       0       0
  6010 ;;      Locals:         0       3       0       0
  6011 ;;      Temps:          0       0       0       0
  6012 ;;      Totals:         0       3       0       0
  6013 ;;Total ram usage:        3 bytes
  6014 ;; Hardware stack levels used:    1
  6015 ;; Hardware stack levels required when called:    6
  6016 ;; This function calls:
  6017 ;;		_sdSpiInit
  6018 ;;		_sdClockSpeed
  6019 ;;		_sdSpiByte
  6020 ;;		_sdSpiResync
  6021 ;;		_sdPrvSimpleCommand
  6022 ;;		_sdPrvCardInit
  6023 ;; This function is called by:
  6024 ;;		_main
  6025 ;; This function uses a non-reentrant model
  6026 ;;
  6027  0E26                     _sdInit:	
  6028                           
  6029                           ;SD.c: 183: UInt8 v, tries = 0;
  6030                           
  6031                           ; Regs used in _sdInit: [wreg+fsr1l-status,0+pclath+cstack]
  6032  0E26  01C3               	clrf	sdInit@tries
  6033                           
  6034                           ;SD.c: 188: sdSpiInit();
  6035  0E27  3184  24B4  3188   	fcall	_sdSpiInit
  6036                           
  6037                           ;SD.c: 190: sdClockSpeed(0);
  6038  0E2A  3000               	movlw	0
  6039  0E2B  27C7  3188         	fcall	_sdClockSpeed
  6040                           
  6041                           ;SD.c: 191: ;
  6042                           ;SD.c: 192: for(v = 0; v < 20; v++) sdSpiByte(0xFF);
  6043  0E2D  0020               	movlb	0	; select bank0
  6044  0E2E  01C5               	clrf	sdInit@v
  6045  0E2F                     l6439:	
  6046  0E2F  30FF               	movlw	255
  6047  0E30  2615  3188         	fcall	_sdSpiByte
  6048  0E32  0020               	movlb	0	; select bank0
  6049  0E33  0AC5               	incf	sdInit@v,f
  6050  0E34  3014               	movlw	20
  6051  0E35  0245               	subwf	sdInit@v,w
  6052  0E36  1C03               	skipc
  6053  0E37  2E2F               	goto	l6439
  6054  0E38                     l6445:	
  6055                           
  6056                           ;SD.c: 196: sdSpiResync();
  6057  0E38  3184  2451  3188   	fcall	_sdSpiResync
  6058                           
  6059                           ;SD.c: 197: v = sdPrvSimpleCommand(0, 0, 1);
  6060  0E3B  0020               	movlb	0	; select bank0
  6061  0E3C  01AB               	clrf	?_sdPrvSimpleCommand
  6062  0E3D  01AC               	clrf	?_sdPrvSimpleCommand+1
  6063  0E3E  01AD               	clrf	?_sdPrvSimpleCommand+2
  6064  0E3F  01AE               	clrf	?_sdPrvSimpleCommand+3
  6065  0E40  01AF               	clrf	?_sdPrvSimpleCommand+4
  6066  0E41  0AAF               	incf	?_sdPrvSimpleCommand+4,f
  6067  0E42  3000               	movlw	0
  6068  0E43  2681  3188         	fcall	_sdPrvSimpleCommand
  6069  0E45  00C5               	movwf	sdInit@v
  6070                           
  6071                           ;SD.c: 199: tries++;
  6072  0E46  0AC3               	incf	sdInit@tries,f
  6073                           
  6074                           ;SD.c: 200: if(tries > 30) return 0;
  6075  0E47  301F               	movlw	31
  6076  0E48  0243               	subwf	sdInit@tries,w
  6077  0E49  1803               	btfsc	3,0
  6078  0E4A  3400               	retlw	0
  6079                           
  6080                           ;SD.c: 201: }while(v != 0x01);
  6081  0E4B  0B45               	decfsz	sdInit@v,w
  6082  0E4C  2E38               	goto	l6445
  6083                           
  6084                           ;SD.c: 203: v = sdPrvSimpleCommand(55, 0, 1);
  6085  0E4D  01AB               	clrf	?_sdPrvSimpleCommand
  6086  0E4E  01AC               	clrf	?_sdPrvSimpleCommand+1
  6087  0E4F  01AD               	clrf	?_sdPrvSimpleCommand+2
  6088  0E50  01AE               	clrf	?_sdPrvSimpleCommand+3
  6089  0E51  01AF               	clrf	?_sdPrvSimpleCommand+4
  6090  0E52  0AAF               	incf	?_sdPrvSimpleCommand+4,f
  6091  0E53  3037               	movlw	55
  6092  0E54  2681  3188         	fcall	_sdPrvSimpleCommand
  6093  0E56  00C5               	movwf	sdInit@v
  6094                           
  6095                           ;SD.c: 204: if(v & 0x80) return 0;
  6096  0E57  1BC5               	btfsc	sdInit@v,7
  6097  0E58  3400               	retlw	0
  6098                           
  6099                           ;SD.c: 205: SD = !(v & 0x04);
  6100  0E59  3000               	movlw	0
  6101  0E5A  1D45               	btfss	sdInit@v,2
  6102  0E5B  3001               	movlw	1
  6103  0E5C  00C4               	movwf	sdInit@SD
  6104                           
  6105                           ;SD.c: 207: if(!sdPrvCardInit(SD))return 0;
  6106  0E5D  3182  2292  3188   	fcall	_sdPrvCardInit
  6107  0E60  3800               	iorlw	0
  6108  0E61  1903               	btfsc	3,2
  6109  0E62  3400               	retlw	0
  6110                           
  6111                           ;SD.c: 209: v = sdPrvSimpleCommand(16, 512, 1);
  6112  0E63  01AE               	clrf	?_sdPrvSimpleCommand+3
  6113  0E64  01AD               	clrf	?_sdPrvSimpleCommand+2
  6114  0E65  3002               	movlw	2
  6115  0E66  00AC               	movwf	?_sdPrvSimpleCommand+1
  6116  0E67  01AB               	clrf	?_sdPrvSimpleCommand
  6117  0E68  01AF               	clrf	?_sdPrvSimpleCommand+4
  6118  0E69  0AAF               	incf	?_sdPrvSimpleCommand+4,f
  6119  0E6A  3010               	movlw	16
  6120  0E6B  2681  3188         	fcall	_sdPrvSimpleCommand
  6121  0E6D  00C5               	movwf	sdInit@v
  6122                           
  6123                           ;SD.c: 210: if(v) return 0;
  6124  0E6E  0845               	movf	sdInit@v,w
  6125  0E6F  1D03               	skipz
  6126  0E70  3400               	retlw	0
  6127                           
  6128                           ;SD.c: 212: v = sdPrvSimpleCommand(59, 0, 1);
  6129  0E71  01AB               	clrf	?_sdPrvSimpleCommand
  6130  0E72  01AC               	clrf	?_sdPrvSimpleCommand+1
  6131  0E73  01AD               	clrf	?_sdPrvSimpleCommand+2
  6132  0E74  01AE               	clrf	?_sdPrvSimpleCommand+3
  6133  0E75  01AF               	clrf	?_sdPrvSimpleCommand+4
  6134  0E76  0AAF               	incf	?_sdPrvSimpleCommand+4,f
  6135  0E77  303B               	movlw	59
  6136  0E78  2681  3188         	fcall	_sdPrvSimpleCommand
  6137  0E7A  00C5               	movwf	sdInit@v
  6138                           
  6139                           ;SD.c: 213: if(v) return 0;
  6140  0E7B  0845               	movf	sdInit@v,w
  6141  0E7C  1D03               	skipz
  6142  0E7D  3400               	retlw	0
  6143                           
  6144                           ;SD.c: 216: sdClockSpeed(1);
  6145  0E7E  3001               	movlw	1
  6146  0E7F  27C7               	fcall	_sdClockSpeed
  6147                           
  6148                           ;SD.c: 218: return 1;
  6149  0E80  3401               	retlw	1
  6150  0E81                     __end_of_sdInit:	
  6151  0E81                     __ptext1569:	
  6152 ;; =============== function _sdSecReadStop ends ============
  6153                           
  6154                           
  6155 ;; *************** function _sdPrvSimpleCommand *****************
  6156 ;; Defined at:
  6157 ;;		line 106 in file "C:\Program Files\Microchip\Project\SingleChipPlayer\SD.c"
  6158 ;; Parameters:    Size  Location     Type
  6159 ;;  cmd             1    wreg     unsigned char 
  6160 ;;  param           4   11[BANK0 ] unsigned long 
  6161 ;;  cmdDone         1   15[BANK0 ] unsigned char 
  6162 ;; Auto vars:     Size  Location     Type
  6163 ;;  cmd             1   16[BANK0 ] unsigned char 
  6164 ;;  ret             1   17[BANK0 ] unsigned char 
  6165 ;; Return value:  Size  Location     Type
  6166 ;;                  1    wreg      unsigned char 
  6167 ;; Registers used:
  6168 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6169 ;; Tracked objects:
  6170 ;;		On entry : 1F/0
  6171 ;;		On exit  : 1F/0
  6172 ;;		Unchanged: FFFE0/0
  6173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6174 ;;      Params:         0       5       0       0
  6175 ;;      Locals:         0       2       0       0
  6176 ;;      Temps:          0       0       0       0
  6177 ;;      Totals:         0       7       0       0
  6178 ;;Total ram usage:        7 bytes
  6179 ;; Hardware stack levels used:    1
  6180 ;; Hardware stack levels required when called:    3
  6181 ;; This function calls:
  6182 ;;		_sdSpiByte
  6183 ;;		_sdPrvSendCmd
  6184 ;;		_sdPrvReadResp
  6185 ;; This function is called by:
  6186 ;;		_sdPrvACMD
  6187 ;;		_sdPrvCardInit
  6188 ;;		_sdInit
  6189 ;;		_sdReadStart
  6190 ;;		_sdSecReadStop
  6191 ;; This function uses a non-reentrant model
  6192 ;;
  6193  0E81                     _sdPrvSimpleCommand:	
  6194                           
  6195                           ; Regs used in _sdPrvSimpleCommand: [wreg+fsr1l-status,0+pclath+cstack]
  6196                           ;sdPrvSimpleCommand@cmd stored from wreg
  6197  0E81  00B0               	movwf	sdPrvSimpleCommand@cmd
  6198                           
  6199                           ;SD.c: 108: UInt8 ret;
  6200                           ;SD.c: 110: ;
  6201                           ;SD.c: 111: sdSpiByte(0xFF);
  6202  0E82  30FF               	movlw	255
  6203  0E83  2615               	fcall	_sdSpiByte
  6204                           
  6205                           ;SD.c: 112: sdPrvSendCmd(cmd, param);
  6206  0E84  0020               	movlb	0	; select bank0
  6207  0E85  082E               	movf	sdPrvSimpleCommand@param+3,w
  6208  0E86  00A3               	movwf	?_sdPrvSendCmd+3
  6209  0E87  082D               	movf	sdPrvSimpleCommand@param+2,w
  6210  0E88  00A2               	movwf	?_sdPrvSendCmd+2
  6211  0E89  082C               	movf	sdPrvSimpleCommand@param+1,w
  6212  0E8A  00A1               	movwf	?_sdPrvSendCmd+1
  6213  0E8B  082B               	movf	sdPrvSimpleCommand@param,w
  6214  0E8C  00A0               	movwf	?_sdPrvSendCmd
  6215  0E8D  0830               	movf	sdPrvSimpleCommand@cmd,w
  6216  0E8E  3183  233C  3188   	fcall	_sdPrvSendCmd
  6217                           
  6218                           ;SD.c: 113: ret = sdPrvReadResp();
  6219  0E91  3184  247E         	fcall	_sdPrvReadResp
  6220  0E93  0020               	movlb	0	; select bank0
  6221  0E94  00B1               	movwf	sdPrvSimpleCommand@ret
  6222                           
  6223                           ;SD.c: 116: return ret;
  6224  0E95  0008               	return
  6225  0E96                     __end_of_sdPrvSimpleCommand:	
  6226  0E96                     __ptext1587:	
  6227 ;; =============== function ___wmul ends ============
  6228                           
  6229                           
  6230 ;; *************** function ___bmul *****************
  6231 ;; Defined at:
  6232 ;;		line 3 in file "bmul.c"
  6233 ;; Parameters:    Size  Location     Type
  6234 ;;  multiplier      1    wreg     unsigned char 
  6235 ;;  multiplicand    1    2[COMMON] unsigned char 
  6236 ;; Auto vars:     Size  Location     Type
  6237 ;;  multiplier      1    4[COMMON] unsigned char 
  6238 ;;  product         1    3[COMMON] unsigned char 
  6239 ;; Return value:  Size  Location     Type
  6240 ;;                  1    wreg      unsigned char 
  6241 ;; Registers used:
  6242 ;;		wreg, status,2, status,0
  6243 ;; Tracked objects:
  6244 ;;		On entry : 1F/0
  6245 ;;		On exit  : 1F/0
  6246 ;;		Unchanged: FFFE0/0
  6247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6248 ;;      Params:         1       0       0       0
  6249 ;;      Locals:         2       0       0       0
  6250 ;;      Temps:          0       0       0       0
  6251 ;;      Totals:         3       0       0       0
  6252 ;;Total ram usage:        3 bytes
  6253 ;; Hardware stack levels used:    1
  6254 ;; Hardware stack levels required when called:    1
  6255 ;; This function calls:
  6256 ;;		Nothing
  6257 ;; This function is called by:
  6258 ;;		_secListRead
  6259 ;;		_secListWrite
  6260 ;;		_hdrProcess
  6261 ;; This function uses a non-reentrant model
  6262 ;;
  6263  0E96                     ___bmul:	
  6264                           
  6265                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  6266                           ;___bmul@multiplier stored from wreg
  6267  0E96  00F4               	movwf	___bmul@multiplier
  6268  0E97  01F3               	clrf	___bmul@product
  6269  0E98                     l5797:	
  6270  0E98  0872               	movf	___bmul@multiplicand,w
  6271  0E99  1874               	btfsc	___bmul@multiplier,0
  6272  0E9A  07F3               	addwf	___bmul@product,f
  6273  0E9B  35F2               	lslf	___bmul@multiplicand,f
  6274  0E9C  36F4               	lsrf	___bmul@multiplier,f
  6275  0E9D  08F4               	movf	___bmul@multiplier,f
  6276  0E9E  1D03               	skipz
  6277  0E9F  2E98               	goto	l5797
  6278  0EA0  0873               	movf	___bmul@product,w
  6279  0EA1  0008               	return
  6280  0EA2                     __end_of___bmul:	
  6281  0EA2                     __ptext1570:	
  6282 ;; =============== function _sdPrvSimpleCommand ends ============
  6283                           
  6284                           
  6285 ;; *************** function _spiCmp *****************
  6286 ;; Defined at:
  6287 ;;		line 243 in file "C:\Program Files\Microchip\Project\SingleChipPlayer\main.c"
  6288 ;; Parameters:    Size  Location     Type
  6289 ;;  with            1    wreg     PTR const unsigned char 
  6290 ;;		 -> hdrProcess@wave(4), hdrProcess@riff(4), 
  6291 ;;  len             1    3[COMMON] unsigned char 
  6292 ;; Auto vars:     Size  Location     Type
  6293 ;;  with            1    5[COMMON] PTR const unsigned char 
  6294 ;;		 -> hdrProcess@wave(4), hdrProcess@riff(4), 
  6295 ;; Return value:  Size  Location     Type
  6296 ;;                  1    wreg      unsigned char 
  6297 ;; Registers used:
  6298 ;;		wreg, status,2, status,0, pclath, cstack
  6299 ;; Tracked objects:
  6300 ;;		On entry : 1F/0
  6301 ;;		On exit  : 1B/0
  6302 ;;		Unchanged: FFFE0/0
  6303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6304 ;;      Params:         1       0       0       0
  6305 ;;      Locals:         1       0       0       0
  6306 ;;      Temps:          1       0       0       0
  6307 ;;      Totals:         3       0       0       0
  6308 ;;Total ram usage:        3 bytes
  6309 ;; Hardware stack levels used:    1
  6310 ;; Hardware stack levels required when called:    3
  6311 ;; This function calls:
  6312 ;;		_byte
  6313 ;; This function is called by:
  6314 ;;		_hdrProcess
  6315 ;; This function uses a non-reentrant model
  6316 ;;
  6317  0EA2                     _spiCmp:	
  6318                           
  6319                           ; Regs used in _spiCmp: [wreg+status,2+status,0+pclath+cstack]
  6320                           ;spiCmp@with stored from wreg
  6321  0EA2  00F5               	movwf	spiCmp@with
  6322  0EA3                     l6013:	
  6323                           ;main.c: 245: while(len--) if(byte() != *with++) return 0;
  6324                           
  6325  0EA3  03F3               	decf	spiCmp@len,f
  6326  0EA4  0873               	movf	spiCmp@len,w
  6327  0EA5  3AFF               	xorlw	255
  6328  0EA6  1903               	btfsc	3,2
  6329  0EA7  3401               	retlw	1
  6330  0EA8  0875               	movf	spiCmp@with,w
  6331  0EA9  0AF5               	incf	spiCmp@with,f
  6332  0EAA  3180               	movlp	high __stringtab
  6333  0EAB  000A               	callw
  6334  0EAC  3188               	pagesel	$
  6335  0EAD  00F4               	movwf	??_spiCmp
  6336  0EAE  2613  3188         	fcall	_byte
  6337  0EB0  0674               	xorwf	??_spiCmp,w
  6338  0EB1  1D03               	btfss	3,2
  6339  0EB2  3400               	retlw	0
  6340  0EB3  2EA3               	goto	l6013
  6341  0EB4                     __end_of_spiCmp:	
  6342                           ;main.c: 247: return 1;
  6343                           
  6344  0EB4                     __ptext1567:	
  6345 ;; =============== function _hdrProcess ends ============
  6346                           
  6347                           
  6348 ;; *************** function _sdReadStart *****************
  6349 ;; Defined at:
  6350 ;;		line 222 in file "C:\Program Files\Microchip\Project\SingleChipPlayer\SD.c"
  6351 ;; Parameters:    Size  Location     Type
  6352 ;;  sec             3   18[BANK0 ] unsigned um
  6353 ;; Auto vars:     Size  Location     Type
  6354 ;;  v               1   21[BANK0 ] unsigned char 
  6355 ;; Return value:  Size  Location     Type
  6356 ;;                  1    wreg      unsigned char 
  6357 ;; Registers used:
  6358 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6359 ;; Tracked objects:
  6360 ;;		On entry : 1F/0
  6361 ;;		On exit  : 1E/0
  6362 ;;		Unchanged: FFFE0/0
  6363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6364 ;;      Params:         0       3       0       0
  6365 ;;      Locals:         0       1       0       0
  6366 ;;      Temps:          0       0       0       0
  6367 ;;      Totals:         0       4       0       0
  6368 ;;Total ram usage:        4 bytes
  6369 ;; Hardware stack levels used:    1
  6370 ;; Hardware stack levels required when called:    4
  6371 ;; This function calls:
  6372 ;;		_sdPrvSimpleCommand
  6373 ;;		_log
  6374 ;;		_sdSpiByte
  6375 ;; This function is called by:
  6376 ;;		_ufatExtRead
  6377 ;;		_play
  6378 ;; This function uses a non-reentrant model
  6379 ;;
  6380  0EB4                     _sdReadStart:	
  6381                           
  6382                           ;SD.c: 224: UInt8 v;
  6383                           ;SD.c: 226: v = sdPrvSimpleCommand(18, ((UInt32)sec) << 9, 0);
  6384                           
  6385                           ; Regs used in _sdReadStart: [wreg+fsr1l-status,0+pclath+cstack]
  6386  0EB4  0832               	movf	sdReadStart@sec,w
  6387  0EB5  00AB               	movwf	?_sdPrvSimpleCommand
  6388  0EB6  0833               	movf	sdReadStart@sec+1,w
  6389  0EB7  00AC               	movwf	?_sdPrvSimpleCommand+1
  6390  0EB8  0834               	movf	sdReadStart@sec+2,w
  6391  0EB9  00AD               	movwf	?_sdPrvSimpleCommand+2
  6392  0EBA  01AE               	clrf	?_sdPrvSimpleCommand+3
  6393  0EBB  3009               	movlw	9
  6394  0EBC                     u3775:	
  6395  0EBC  35AB               	lslf	?_sdPrvSimpleCommand,f
  6396  0EBD  0DAC               	rlf	?_sdPrvSimpleCommand+1,f
  6397  0EBE  0DAD               	rlf	?_sdPrvSimpleCommand+2,f
  6398  0EBF  0DAE               	rlf	?_sdPrvSimpleCommand+3,f
  6399  0EC0  0B89               	decfsz	9,f
  6400  0EC1  2EBC               	goto	u3775
  6401  0EC2  01AF               	clrf	?_sdPrvSimpleCommand+4
  6402  0EC3  3012               	movlw	18
  6403  0EC4  2681  3188         	fcall	_sdPrvSimpleCommand
  6404  0EC6  00B5               	movwf	sdReadStart@v
  6405                           
  6406                           ;SD.c: 227: if(v & 0x80) {log(0xEF); return 0; }
  6407  0EC7  1FB5               	btfss	sdReadStart@v,7
  6408  0EC8  2ECD               	goto	l6043
  6409  0EC9  30EF               	movlw	239
  6410  0ECA                     L2:	
  6411  0ECA  3184  2490         	fcall	_log
  6412  0ECC  3400               	retlw	0
  6413  0ECD                     l6043:	
  6414                           
  6415                           ;SD.c: 230: v = sdSpiByte(0xFF);
  6416  0ECD  30FF               	movlw	255
  6417  0ECE  2615  3188         	fcall	_sdSpiByte
  6418  0ED0  0020               	movlb	0	; select bank0
  6419  0ED1  00B5               	movwf	sdReadStart@v
  6420                           
  6421                           ;SD.c: 231: }while(v == 0xFF);
  6422  0ED2  3AFF               	xorlw	255
  6423  0ED3  1903               	skipnz
  6424  0ED4  2ECD               	goto	l6043
  6425                           
  6426                           ;SD.c: 232: if(v != 0xFE) {log(0xEE); return 0;}
  6427  0ED5  0835               	movf	sdReadStart@v,w
  6428  0ED6  3AFE               	xorlw	254
  6429  0ED7  1903               	skipnz
  6430  0ED8  3401               	retlw	1
  6431  0ED9  30EE               	movlw	238
  6432  0EDA  2ECA               	goto	L2
  6433  0EDB                     __end_of_sdReadStart:	
  6434                           ;SD.c: 234: return 1;
  6435                           
  6436  0EDB                     __ptext1556:	
  6437 ;; =============== function _ufatGetNextSectorRange ends ============
  6438                           
  6439                           
  6440 ;; *************** function _ufatMount *****************
  6441 ;; Defined at:
  6442 ;;		line 64 in file "C:\Program Files\Microchip\Project\SingleChipPlayer\ufat\ufat.c"
  6443 ;; Parameters:    Size  Location     Type
  6444 ;;		None
  6445 ;; Auto vars:     Size  Location     Type
  6446 ;;  buf            13   60[BANK0 ] unsigned char [13]
  6447 ;; Return value:  Size  Location     Type
  6448 ;;                  1    wreg      unsigned char 
  6449 ;; Registers used:
  6450 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+0, btemp+1, pclath, cstack
  6451 ;; Tracked objects:
  6452 ;;		On entry : 1F/0
  6453 ;;		On exit  : 0/0
  6454 ;;		Unchanged: 0/0
  6455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6456 ;;      Params:         0       0       0       0
  6457 ;;      Locals:         0      13       0       0
  6458 ;;      Temps:          0       8       0       0
  6459 ;;      Totals:         0      21       0       0
  6460 ;;Total ram usage:       21 bytes
  6461 ;; Hardware stack levels used:    1
  6462 ;; Hardware stack levels required when called:    7
  6463 ;; This function calls:
  6464 ;;		_ufatExtRead
  6465 ;;		_ufatParsePartitionTable
  6466 ;;		_ufatGetU16
  6467 ;;		___wmul
  6468 ;; This function is called by:
  6469 ;;		_main
  6470 ;;		_ufatParsePartitionTable
  6471 ;; This function uses a non-reentrant model
  6472 ;;
  6473  0EDB                     _ufatMount:	
  6474                           
  6475                           ;ufat.c: 66: char buf[13];
  6476                           ;ufat.c: 68: if(!ufatExtRead(diskOffset, 0x36, 4, buf)) return 0;
  6477                           
  6478                           ; Regs used in _ufatMount: [allreg]
  6479  0EDB  27BE  3188         	fcall	PL11	;call to abstracted procedure
  6480  0EDD  3036               	movlw	54
  6481  0EDE  00BA               	movwf	?_ufatExtRead+4
  6482  0EDF  01BB               	clrf	?_ufatExtRead+5
  6483  0EE0  3004               	movlw	4
  6484  0EE1  00BC               	movwf	?_ufatExtRead+6
  6485  0EE2  305C               	movlw	ufatMount@buf& (0+255)
  6486  0EE3  00BD               	movwf	?_ufatExtRead+7
  6487  0EE4  2436  3188         	fcall	_ufatExtRead
  6488  0EE6  3800               	iorlw	0
  6489  0EE7  1903               	btfsc	3,2
  6490  0EE8  3400               	retlw	0
  6491                           
  6492                           ;ufat.c: 69: if(buf[0] !='F' || buf[1] !='A' || buf[2] != 'T' || buf[3] != '1'){
  6493  0EE9  0020               	movlb	0	; select bank0
  6494  0EEA  085C               	movf	ufatMount@buf,w
  6495  0EEB  3A46               	xorlw	70
  6496  0EEC  1D03               	skipz
  6497  0EED  2EFA               	goto	l6655
  6498  0EEE  085D               	movf	ufatMount@buf+1,w
  6499  0EEF  3A41               	xorlw	65
  6500  0EF0  1D03               	skipz
  6501  0EF1  2EFA               	goto	l6655
  6502  0EF2  085E               	movf	ufatMount@buf+2,w
  6503  0EF3  3A54               	xorlw	84
  6504  0EF4  1D03               	skipz
  6505  0EF5  2EFA               	goto	l6655
  6506  0EF6  085F               	movf	ufatMount@buf+3,w
  6507  0EF7  3A31               	xorlw	49
  6508  0EF8  1903               	skipnz
  6509  0EF9  2EFC               	goto	l6659
  6510  0EFA                     l6655:	
  6511                           
  6512                           ;ufat.c: 71: return ufatParsePartitionTable();
  6513  0EFA  3182  2A18         	ljmp	l6579
  6514  0EFC                     l6659:	
  6515                           
  6516                           ;ufat.c: 72: }
  6517                           ;ufat.c: 74: if(!ufatExtRead(diskOffset, 0x0B, 13, buf)) return 0;
  6518  0EFC  27BE  3188         	fcall	PL11	;call to abstracted procedure
  6519  0EFE  300B               	movlw	11
  6520  0EFF  00BA               	movwf	?_ufatExtRead+4
  6521  0F00  01BB               	clrf	?_ufatExtRead+5
  6522  0F01  300D               	movlw	13
  6523  0F02  00BC               	movwf	?_ufatExtRead+6
  6524  0F03  305C               	movlw	ufatMount@buf& (0+255)
  6525  0F04  00BD               	movwf	?_ufatExtRead+7
  6526  0F05  2436  3188         	fcall	_ufatExtRead
  6527  0F07  3800               	iorlw	0
  6528  0F08  1903               	btfsc	3,2
  6529  0F09  3400               	retlw	0
  6530                           
  6531                           ;ufat.c: 75: if(ufatGetU16(buf, 0x0B - 0x0B) != 512) return 0;
  6532  0F0A  01F2               	clrf	?_ufatGetU16
  6533  0F0B  305C               	movlw	ufatMount@buf& (0+255)
  6534  0F0C  2778  3188         	fcall	_ufatGetU16
  6535  0F0E  0873               	movf	?_ufatGetU16+1,w
  6536  0F0F  3A02               	xorlw	2
  6537  0F10  0472               	iorwf	?_ufatGetU16,w
  6538  0F11  1D03               	btfss	3,2
  6539  0F12  3400               	retlw	0
  6540                           
  6541                           ;ufat.c: 76: secPerClus = buf[0x0D - 0x0B];
  6542  0F13  0020               	movlb	0	; select bank0
  6543  0F14  085E               	movf	ufatMount@buf+2,w
  6544  0F15  0021               	movlb	1	; select bank1
  6545  0F16  00D5               	movwf	_secPerClus^(0+128)
  6546                           
  6547                           ;ufat.c: 77: fatSec = ufatGetU16(buf, 0x0E - 0x0B);
  6548  0F17  3003               	movlw	3
  6549  0F18  00F2               	movwf	?_ufatGetU16
  6550  0F19  305C               	movlw	ufatMount@buf& (0+255)
  6551  0F1A  2778  3188         	fcall	_ufatGetU16
  6552  0F1C  0873               	movf	?_ufatGetU16+1,w
  6553  0F1D  00CB               	movwf	(_fatSec+1)^(0+128)
  6554  0F1E  0872               	movf	?_ufatGetU16,w
  6555  0F1F  00CA               	movwf	_fatSec^(0+128)
  6556                           
  6557                           ;ufat.c: 78: rootDirEntries = ufatGetU16(buf, 0x11 - 0x0B);
  6558  0F20  3006               	movlw	6
  6559  0F21  00F2               	movwf	?_ufatGetU16
  6560  0F22  305C               	movlw	ufatMount@buf& (0+255)
  6561  0F23  2778  3188         	fcall	_ufatGetU16
  6562  0F25  0873               	movf	?_ufatGetU16+1,w
  6563  0F26  00CD               	movwf	(_rootDirEntries+1)^(0+128)
  6564  0F27  0872               	movf	?_ufatGetU16,w
  6565  0F28  00CC               	movwf	_rootDirEntries^(0+128)
  6566                           
  6567                           ;ufat.c: 79: sectorsPerFat = ufatGetU16(buf, 0x16 - 0x0B);
  6568  0F29  300B               	movlw	11
  6569  0F2A  00F2               	movwf	?_ufatGetU16
  6570  0F2B  305C               	movlw	ufatMount@buf& (0+255)
  6571  0F2C  2778               	fcall	_ufatGetU16
  6572  0F2D  0873               	movf	?_ufatGetU16+1,w
  6573  0F2E  00D1               	movwf	(_sectorsPerFat+1)^(0+128)
  6574  0F2F  0872               	movf	?_ufatGetU16,w
  6575  0F30  00D0               	movwf	_sectorsPerFat^(0+128)
  6576                           
  6577                           ;ufat.c: 81: rootSec = fatSec + sectorsPerFat * (u16)(buf[0x10 - 0x0B]);
  6578  0F31  0020               	movlb	0	; select bank0
  6579  0F32  0861               	movf	ufatMount@buf+5,w
  6580  0F33  00F2               	movwf	?___wmul
  6581  0F34  01F3               	clrf	?___wmul+1
  6582  0F35  0021               	movlb	1	; select bank1
  6583  0F36  0851               	movf	(_sectorsPerFat+1)^(0+128),w
  6584  0F37  00F5               	movwf	?___wmul+3
  6585  0F38  0850               	movf	_sectorsPerFat^(0+128),w
  6586  0F39  00F4               	movwf	?___wmul+2
  6587  0F3A  3184  2469  3188   	fcall	___wmul
  6588  0F3D  0873               	movf	?___wmul+1,w
  6589  0F3E  00CF               	movwf	(_rootSec+1)^(0+128)
  6590  0F3F  0872               	movf	?___wmul,w
  6591  0F40  00CE               	movwf	_rootSec^(0+128)
  6592  0F41  084A               	movf	_fatSec^(0+128),w
  6593  0F42  07CE               	addwf	_rootSec^(0+128),f
  6594  0F43  084B               	movf	(_fatSec+1)^(0+128),w
  6595  0F44  3DCF               	addwfc	(_rootSec+1)^(0+128),f
  6596                           
  6597                           ;ufat.c: 82: dataSec = rootSec + (((u32)rootDirEntries) * 32 + 512 - 1) / 512;
  6598  0F45  30FF               	movlw	255
  6599  0F46  0020               	movlb	0	; select bank0
  6600  0F47  00D4               	movwf	??_ufatMount
  6601  0F48  3001               	movlw	1
  6602  0F49  00D5               	movwf	??_ufatMount+1
  6603  0F4A  01D6               	clrf	??_ufatMount+2
  6604  0F4B  01D7               	clrf	??_ufatMount+3
  6605  0F4C  0021               	movlb	1	; select bank1
  6606  0F4D  084C               	movf	_rootDirEntries^(0+128),w
  6607  0F4E  0020               	movlb	0	; select bank0
  6608  0F4F  00D8               	movwf	??_ufatMount+4
  6609  0F50  0021               	movlb	1	; select bank1
  6610  0F51  084D               	movf	(_rootDirEntries+1)^(0+128),w
  6611  0F52  0020               	movlb	0	; select bank0
  6612  0F53  00D9               	movwf	??_ufatMount+5
  6613  0F54  01DA               	clrf	??_ufatMount+6
  6614  0F55  01DB               	clrf	??_ufatMount+7
  6615  0F56  3005               	movlw	5
  6616  0F57                     u4775:	
  6617  0F57  35D8               	lslf	??_ufatMount+4,f
  6618  0F58  0DD9               	rlf	??_ufatMount+5,f
  6619  0F59  0DDA               	rlf	??_ufatMount+6,f
  6620  0F5A  0DDB               	rlf	??_ufatMount+7,f
  6621  0F5B  0B89               	decfsz	9,f
  6622  0F5C  2F57               	goto	u4775
  6623  0F5D  0858               	movf	??_ufatMount+4,w
  6624  0F5E  07D4               	addwf	??_ufatMount,f
  6625  0F5F  0859               	movf	??_ufatMount+5,w
  6626  0F60  3DD5               	addwfc	??_ufatMount+1,f
  6627  0F61  085A               	movf	??_ufatMount+6,w
  6628  0F62  3DD6               	addwfc	??_ufatMount+2,f
  6629  0F63  085B               	movf	??_ufatMount+7,w
  6630  0F64  3DD7               	addwfc	??_ufatMount+3,f
  6631  0F65  3009               	movlw	9
  6632  0F66                     u4785:	
  6633  0F66  36D7               	lsrf	??_ufatMount+3,f
  6634  0F67  0CD6               	rrf	??_ufatMount+2,f
  6635  0F68  0CD5               	rrf	??_ufatMount+1,f
  6636  0F69  0CD4               	rrf	??_ufatMount,f
  6637  0F6A  0B89               	decfsz	9,f
  6638  0F6B  2F66               	goto	u4785
  6639  0F6C  0855               	movf	??_ufatMount+1,w
  6640  0F6D  0021               	movlb	1	; select bank1
  6641  0F6E  00C9               	movwf	(_dataSec+1)^(0+128)
  6642  0F6F  0020               	movlb	0	; select bank0
  6643  0F70  0854               	movf	??_ufatMount,w
  6644  0F71  0021               	movlb	1	; select bank1
  6645  0F72  00C8               	movwf	_dataSec^(0+128)
  6646  0F73  084E               	movf	_rootSec^(0+128),w
  6647  0F74  07C8               	addwf	_dataSec^(0+128),f
  6648  0F75  084F               	movf	(_rootSec+1)^(0+128),w
  6649  0F76  3DC9               	addwfc	(_dataSec+1)^(0+128),f
  6650                           
  6651                           ;ufat.c: 84: return 1;
  6652  0F77  3401               	retlw	1
  6653  0F78                     __end_of_ufatMount:	
  6654  0F78                     __ptext1589:	
  6655 ;; =============== function _ufatGetU32 ends ============
  6656                           
  6657                           
  6658 ;; *************** function _ufatGetU16 *****************
  6659 ;; Defined at:
  6660 ;;		line 47 in file "C:\Program Files\Microchip\Project\SingleChipPlayer\ufat\ufat.c"
  6661 ;; Parameters:    Size  Location     Type
  6662 ;;  v               1    wreg     PTR const unsigned char 
  6663 ;;		 -> ufatGetNextClus@buf(2), ufatGetNthFile@buf(4), ufatMount@buf(13), 
  6664 ;;  idx             1    2[COMMON] unsigned char 
  6665 ;; Auto vars:     Size  Location     Type
  6666 ;;  v               1    4[COMMON] PTR const unsigned char 
  6667 ;;		 -> ufatGetNextClus@buf(2), ufatGetNthFile@buf(4), ufatMount@buf(13), 
  6668 ;; Return value:  Size  Location     Type
  6669 ;;                  2    2[COMMON] unsigned short 
  6670 ;; Registers used:
  6671 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  6672 ;; Tracked objects:
  6673 ;;		On entry : 1E/0
  6674 ;;		On exit  : 1E/0
  6675 ;;		Unchanged: FFFE1/0
  6676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6677 ;;      Params:         2       0       0       0
  6678 ;;      Locals:         1       0       0       0
  6679 ;;      Temps:          0       0       0       0
  6680 ;;      Totals:         3       0       0       0
  6681 ;;Total ram usage:        3 bytes
  6682 ;; Hardware stack levels used:    1
  6683 ;; Hardware stack levels required when called:    1
  6684 ;; This function calls:
  6685 ;;		Nothing
  6686 ;; This function is called by:
  6687 ;;		_ufatMount
  6688 ;;		_ufatGetNthFile
  6689 ;;		_ufatGetNextClus
  6690 ;; This function uses a non-reentrant model
  6691 ;;
  6692  0F78                     _ufatGetU16:	
  6693                           
  6694                           ; Regs used in _ufatGetU16: [wreg-status,0]
  6695                           ;ufatGetU16@v stored from wreg
  6696  0F78  00F4               	movwf	ufatGetU16@v
  6697                           
  6698                           ;ufat.c: 49: v += idx;
  6699  0F79  0872               	movf	ufatGetU16@idx,w
  6700  0F7A  07F4               	addwf	ufatGetU16@v,f
  6701                           
  6702                           ;ufat.c: 50: return (((u16)v[1]) << 8) | ((u16)v[0]);
  6703  0F7B  0874               	movf	ufatGetU16@v,w
  6704  0F7C  0086               	movwf	6
  6705  0F7D  0187               	clrf	7
  6706  0F7E  0874               	movf	ufatGetU16@v,w
  6707  0F7F  3E01               	addlw	1
  6708  0F80  0084               	movwf	4
  6709  0F81  0185               	clrf	5
  6710  0F82  0800               	movf	0,w
  6711  0F83  00F3               	movwf	?_ufatGetU16+1
  6712  0F84  0801               	movf	1,w
  6713  0F85  00F2               	movwf	?_ufatGetU16
  6714  0F86  0008               	return
  6715  0F87                     __end_of_ufatGetU16:	
  6716  0F87                     __ptext1594:	
  6717 ;; =============== function _ufatOpen ends ============
  6718                           
  6719                           
  6720 ;; *************** function _ufatInit *****************
  6721 ;; Defined at:
  6722 ;;		line 59 in file "C:\Program Files\Microchip\Project\SingleChipPlayer\ufat\ufat.c"
  6723 ;; Parameters:    Size  Location     Type
  6724 ;;		None
  6725 ;; Auto vars:     Size  Location     Type
  6726 ;;		None
  6727 ;; Return value:  Size  Location     Type
  6728 ;;		None               void
  6729 ;; Registers used:
  6730 ;;		None
  6731 ;; Tracked objects:
  6732 ;;		On entry : 1E/1
  6733 ;;		On exit  : 1F/0
  6734 ;;		Unchanged: FFFE0/0
  6735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6736 ;;      Params:         0       0       0       0
  6737 ;;      Locals:         0       0       0       0
  6738 ;;      Temps:          0       0       0       0
  6739 ;;      Totals:         0       0       0       0
  6740 ;;Total ram usage:        0 bytes
  6741 ;; Hardware stack levels used:    1
  6742 ;; Hardware stack levels required when called:    1
  6743 ;; This function calls:
  6744 ;;		Nothing
  6745 ;; This function is called by:
  6746 ;;		_main
  6747 ;; This function uses a non-reentrant model
  6748 ;;
  6749  0F87                     _ufatInit:	
  6750                           
  6751                           ;ufat.c: 61: diskOffset = 0;
  6752                           
  6753                           ; Regs used in _ufatInit: []
  6754  0F87  0020               	movlb	0	; select bank0
  6755  0F88  01E9               	clrf	_diskOffset
  6756  0F89  01EA               	clrf	_diskOffset+1
  6757  0F8A  01EB               	clrf	_diskOffset+2
  6758  0F8B  01EC               	clrf	_diskOffset+3
  6759  0F8C  0008               	return
  6760  0F8D                     __end_of_ufatInit:	
  6761  0F8D                     PL2:	
  6762  0F8D  00AB               	movwf	??_rnd
  6763  0F8E  0830               	movf	rnd@x+1,w
  6764  0F8F  00AC               	movwf	??_rnd+1
  6765  0F90  0831               	movf	rnd@x+2,w
  6766  0F91  00AD               	movwf	??_rnd+2
  6767  0F92  0832               	movf	rnd@x+3,w
  6768  0F93  00AE               	movwf	??_rnd+3
  6769  0F94  082D               	movf	??_rnd+2,w
  6770  0F95  00AE               	movwf	??_rnd+3
  6771  0F96  082C               	movf	??_rnd+1,w
  6772  0F97  00AD               	movwf	??_rnd+2
  6773  0F98  082B               	movf	??_rnd,w
  6774  0F99  00AC               	movwf	??_rnd+1
  6775  0F9A  01AB               	clrf	??_rnd
  6776  0F9B  0008               	return
  6777  0F9C                     PL4:	
  6778  0F9C  00AF               	movwf	rnd@x
  6779  0F9D  082C               	movf	??_rnd+1,w
  6780  0F9E  00B0               	movwf	rnd@x+1
  6781  0F9F  082D               	movf	??_rnd+2,w
  6782  0FA0  00B1               	movwf	rnd@x+2
  6783  0FA1  082E               	movf	??_rnd+3,w
  6784  0FA2  00B2               	movwf	rnd@x+3
  6785  0FA3  082F               	movf	rnd@x,w
  6786  0FA4  0008               	return
  6787  0FA5                     PL7:	
  6788  0FA5  00B9               	movwf	?_ufatExtRead+3
  6789  0FA6  084E               	movf	ufatGetNthFile@sec+2,w
  6790  0FA7  00B8               	movwf	?_ufatExtRead+2
  6791  0FA8  084D               	movf	ufatGetNthFile@sec+1,w
  6792  0FA9  00B7               	movwf	?_ufatExtRead+1
  6793  0FAA  084C               	movf	ufatGetNthFile@sec,w
  6794  0FAB  00B6               	movwf	?_ufatExtRead
  6795  0FAC  0850               	movf	ufatGetNthFile@offset,w
  6796  0FAD  0008               	return
  6797  0FAE                     PL8:	
  6798  0FAE  083B               	movf	(main@i+1)^(0+128),w
  6799  0FAF  0020               	movlb	0	; select bank0
  6800  0FB0  00BF               	movwf	?_ufatGetNthFile+1
  6801  0FB1  0021               	movlb	1	; select bank1
  6802  0FB2  083A               	movf	main@i^(0+128),w
  6803  0FB3  0020               	movlb	0	; select bank0
  6804  0FB4  00BE               	movwf	?_ufatGetNthFile
  6805  0FB5  30A4               	movlw	main@name& (0+255)
  6806  0FB6  00C0               	movwf	?_ufatGetNthFile+2
  6807  0FB7  30C4               	movlw	main@sz& (0+255)
  6808  0FB8  00C1               	movwf	?_ufatGetNthFile+3
  6809  0FB9  30C3               	movlw	main@flags& (0+255)
  6810  0FBA  00C2               	movwf	?_ufatGetNthFile+4
  6811  0FBB  30C0               	movlw	main@id& (0+255)
  6812  0FBC  00C3               	movwf	?_ufatGetNthFile+5
  6813  0FBD  0008               	return
  6814  0FBE                     PL11:	
  6815  0FBE  086C               	movf	_diskOffset+3,w
  6816  0FBF  00B9               	movwf	?_ufatExtRead+3
  6817  0FC0  086B               	movf	_diskOffset+2,w
  6818  0FC1  00B8               	movwf	?_ufatExtRead+2
  6819  0FC2  086A               	movf	_diskOffset+1,w
  6820  0FC3  00B7               	movwf	?_ufatExtRead+1
  6821  0FC4  0869               	movf	_diskOffset,w
  6822  0FC5  00B6               	movwf	?_ufatExtRead
  6823  0FC6  0008               	return
  6824  0FC7                     __ptext1592:	
  6825 ;; =============== function _sdSpiInit ends ============
  6826                           
  6827                           
  6828 ;; *************** function _sdClockSpeed *****************
  6829 ;; Defined at:
  6830 ;;		line 20 in file "C:\Program Files\Microchip\Project\SingleChipPlayer\SD.c"
  6831 ;; Parameters:    Size  Location     Type
  6832 ;;  fast            1    wreg     unsigned char 
  6833 ;; Auto vars:     Size  Location     Type
  6834 ;;  fast            1    2[COMMON] unsigned char 
  6835 ;; Return value:  Size  Location     Type
  6836 ;;		None               void
  6837 ;; Registers used:
  6838 ;;		wreg, status,2, status,0
  6839 ;; Tracked objects:
  6840 ;;		On entry : 1B/4
  6841 ;;		On exit  : 1F/4
  6842 ;;		Unchanged: FFFE0/0
  6843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6844 ;;      Params:         0       0       0       0
  6845 ;;      Locals:         3       0       0       0
  6846 ;;      Temps:          0       0       0       0
  6847 ;;      Totals:         3       0       0       0
  6848 ;;Total ram usage:        3 bytes
  6849 ;; Hardware stack levels used:    1
  6850 ;; Hardware stack levels required when called:    1
  6851 ;; This function calls:
  6852 ;;		Nothing
  6853 ;; This function is called by:
  6854 ;;		_sdInit
  6855 ;; This function uses a non-reentrant model
  6856 ;;
  6857  0FC7                     _sdClockSpeed:	
  6858                           
  6859                           ; Regs used in _sdClockSpeed: [wreg+status,2+status,0]
  6860                           ;sdClockSpeed@fast stored from wreg
  6861  0FC7  00F2               	movwf	sdClockSpeed@fast
  6862                           
  6863                           ;SD.c: 22: SSP1CON1 = (SSP1CON1 & 0b11110000) | (fast ? 0b0000 : 0b1010);
  6864  0FC8  300A               	movlw	10
  6865  0FC9  00F3               	movwf	_sdClockSpeed$3322
  6866  0FCA  01F4               	clrf	_sdClockSpeed$3322+1
  6867  0FCB  0872               	movf	sdClockSpeed@fast,w
  6868  0FCC  1903               	btfsc	3,2
  6869  0FCD  2FD0               	goto	l4503
  6870  0FCE  01F3               	clrf	_sdClockSpeed$3322
  6871  0FCF  01F4               	clrf	_sdClockSpeed$3322+1
  6872  0FD0                     l4503:	
  6873  0FD0  0024               	movlb	4	; select bank4
  6874  0FD1  0815               	movf	21,w
  6875  0FD2  39F0               	andlw	240
  6876  0FD3  0473               	iorwf	_sdClockSpeed$3322,w
  6877  0FD4  0095               	movwf	21	;volatile
  6878  0FD5  0008               	return
  6879  0FD6                     __end_of_sdClockSpeed:	
  6880  0FD6                     __ptext1598:	
  6881 ;; =============== function _audioOff ends ============
  6882                           
  6883                           
  6884 ;; *************** function _audioOn *****************
  6885 ;; Defined at:
  6886 ;;		line 135 in file "C:\Program Files\Microchip\Project\SingleChipPlayer\main.c"
  6887 ;; Parameters:    Size  Location     Type
  6888 ;;		None
  6889 ;; Auto vars:     Size  Location     Type
  6890 ;;  i               1    5[COMMON] unsigned char 
  6891 ;; Return value:  Size  Location     Type
  6892 ;;		None               void
  6893 ;; Registers used:
  6894 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6895 ;; Tracked objects:
  6896 ;;		On entry : 1F/0
  6897 ;;		On exit  : 1F/0
  6898 ;;		Unchanged: FFFE0/0
  6899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6900 ;;      Params:         0       0       0       0
  6901 ;;      Locals:         1       0       0       0
  6902 ;;      Temps:          3       0       0       0
  6903 ;;      Totals:         4       0       0       0
  6904 ;;Total ram usage:        4 bytes
  6905 ;; Hardware stack levels used:    1
  6906 ;; Hardware stack levels required when called:    1
  6907 ;; This function calls:
  6908 ;;		Nothing
  6909 ;; This function is called by:
  6910 ;;		_play
  6911 ;; This function uses a non-reentrant model
  6912 ;;
  6913  0FD6                     _audioOn:	
  6914                           
  6915                           ;main.c: 137: UInt8 i;
  6916                           ;main.c: 139: for(i = 0; i < 90; i++) gBuffer[i] = 0x80;
  6917                           
  6918                           ; Regs used in _audioOn: [wreg+fsr1l-status,0]
  6919  0FD6  01F5               	clrf	audioOn@i
  6920  0FD7                     l4417:	
  6921  0FD7  3080               	movlw	128
  6922  0FD8  00F2               	movwf	??_audioOn
  6923  0FD9  0875               	movf	audioOn@i,w
  6924  0FDA  3E96               	addlw	150
  6925  0FDB  00F3               	movwf	??_audioOn+1
  6926  0FDC  3020               	movlw	32
  6927  0FDD  1803               	skipnc
  6928  0FDE  3021               	movlw	33
  6929  0FDF  00F4               	movwf	??_audioOn+2
  6930  0FE0  0873               	movf	??_audioOn+1,w
  6931  0FE1  0086               	movwf	6
  6932  0FE2  0874               	movf	??_audioOn+2,w
  6933  0FE3  0087               	movwf	7
  6934  0FE4  0872               	movf	??_audioOn,w
  6935  0FE5  0081               	movwf	1
  6936  0FE6  0AF5               	incf	audioOn@i,f
  6937  0FE7  305A               	movlw	90
  6938  0FE8  0275               	subwf	audioOn@i,w
  6939  0FE9  1C03               	skipc
  6940  0FEA  2FD7               	goto	l4417
  6941                           
  6942                           ;main.c: 141: T2CON = 0b00000100;
  6943  0FEB  3004               	movlw	4
  6944  0FEC  009C               	movwf	28	;volatile
  6945                           
  6946                           ;main.c: 142: PR2 = 31;
  6947  0FED  301F               	movlw	31
  6948  0FEE  009B               	movwf	27	;volatile
  6949                           
  6950                           ;main.c: 143: CCP1CON = 0b00001100;
  6951  0FEF  300C               	movlw	12
  6952  0FF0  0025               	movlb	5	; select bank5
  6953  0FF1  0093               	movwf	19	;volatile
  6954                           
  6955                           ;main.c: 144: CCPR1H = 0;
  6956  0FF2  0192               	clrf	18	;volatile
  6957                           
  6958                           ;main.c: 145: CCPR1L = 0;
  6959  0FF3  0191               	clrf	17	;volatile
  6960                           
  6961                           ;main.c: 147: TRISAbits.TRISA5 = 0;
  6962  0FF4  0021               	movlb	1	; select bank1
  6963  0FF5  128C               	bcf	12,5	;volatile
  6964                           
  6965                           ;main.c: 149: TMR0 = 0;
  6966  0FF6  0020               	movlb	0	; select bank0
  6967  0FF7  0195               	clrf	21	;volatile
  6968                           
  6969                           ;main.c: 150: INTCONbits.TMR0IF = 0;
  6970  0FF8  110B               	bcf	11,2	;volatile
  6971                           
  6972                           ;main.c: 151: INTCONbits.TMR0IE = 1;
  6973  0FF9  168B               	bsf	11,5	;volatile
  6974  0FFA  0008               	return
  6975  0FFB                     __end_of_audioOn:	
  6976  0FFB                     __ptext1593:	
  6977 ;; =============== function _sdClockSpeed ends ============
  6978                           
  6979                           
  6980 ;; *************** function _ufatOpen *****************
  6981 ;; Defined at:
  6982 ;;		line 139 in file "C:\Program Files\Microchip\Project\SingleChipPlayer\ufat\ufat.c"
  6983 ;; Parameters:    Size  Location     Type
  6984 ;;  id              2    2[COMMON] unsigned short 
  6985 ;; Auto vars:     Size  Location     Type
  6986 ;;		None
  6987 ;; Return value:  Size  Location     Type
  6988 ;;                  1    wreg      unsigned char 
  6989 ;; Registers used:
  6990 ;;		wreg
  6991 ;; Tracked objects:
  6992 ;;		On entry : 1F/1
  6993 ;;		On exit  : 1F/1
  6994 ;;		Unchanged: FFFE0/0
  6995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6996 ;;      Params:         2       0       0       0
  6997 ;;      Locals:         0       0       0       0
  6998 ;;      Temps:          0       0       0       0
  6999 ;;      Totals:         2       0       0       0
  7000 ;;Total ram usage:        2 bytes
  7001 ;; Hardware stack levels used:    1
  7002 ;; Hardware stack levels required when called:    1
  7003 ;; This function calls:
  7004 ;;		Nothing
  7005 ;; This function is called by:
  7006 ;;		_main
  7007 ;; This function uses a non-reentrant model
  7008 ;;
  7009  0FFB                     _ufatOpen:	
  7010                           
  7011                           ;ufat.c: 141: curClus = id;
  7012                           
  7013                           ; Regs used in _ufatOpen: [wreg]
  7014  0FFB  0873               	movf	ufatOpen@id+1,w
  7015  0FFC  00DC               	movwf	(_curClus+1)^(0+128)
  7016  0FFD  0872               	movf	ufatOpen@id,w
  7017  0FFE  00DB               	movwf	_curClus^(0+128)
  7018                           
  7019                           ;ufat.c: 142: return 1;
  7020  0FFF  3401               	retlw	1
  7021  1000                     __end_of_ufatOpen:	
  7022                           
  7023                           	psect	text1580
  7024  0490                     __ptext1580:	
  7025 ;; =============== function _secListRead ends ============
  7026                           
  7027                           
  7028 ;; *************** function _log *****************
  7029 ;; Defined at:
  7030 ;;		line 51 in file "C:\Program Files\Microchip\Project\SingleChipPlayer\main.c"
  7031 ;; Parameters:    Size  Location     Type
  7032 ;;  val             1    wreg     unsigned char 
  7033 ;; Auto vars:     Size  Location     Type
  7034 ;;  val             1    4[COMMON] unsigned char 
  7035 ;; Return value:  Size  Location     Type
  7036 ;;		None               void
  7037 ;; Registers used:
  7038 ;;		wreg, status,2, status,0, pclath, cstack
  7039 ;; Tracked objects:
  7040 ;;		On entry : 1F/0
  7041 ;;		On exit  : 1F/1
  7042 ;;		Unchanged: FFFE0/0
  7043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7044 ;;      Params:         0       0       0       0
  7045 ;;      Locals:         1       0       0       0
  7046 ;;      Temps:          0       0       0       0
  7047 ;;      Totals:         1       0       0       0
  7048 ;;Total ram usage:        1 bytes
  7049 ;; Hardware stack levels used:    1
  7050 ;; Hardware stack levels required when called:    2
  7051 ;; This function calls:
  7052 ;;		_eeWrite
  7053 ;; This function is called by:
  7054 ;;		_sdReadStart
  7055 ;; This function uses a non-reentrant model
  7056 ;;
  7057  0490                     _log:	
  7058                           
  7059                           ; Regs used in _log: [wreg+status,2+status,0+pclath+cstack]
  7060                           ;log@val stored from wreg
  7061  0490  00F4               	movwf	log@val
  7062                           
  7063                           ;main.c: 53: static UInt8 addr = 0;
  7064                           ;main.c: 55: eeWrite(addr++, val);
  7065  0491  00F2               	movwf	?_eeWrite
  7066  0492  0021               	movlb	1	; select bank1
  7067  0493  0856               	movf	log@addr^(0+128),w
  7068  0494  318A  22A8  3184   	fcall	_eeWrite
  7069  0497  0021               	movlb	1	; select bank1
  7070  0498  0AD6               	incf	log@addr^(0+128),f
  7071  0499                     l5851:	
  7072                           ;main.c: 57: while(!addr);
  7073                           
  7074  0499  0856               	movf	log@addr^(0+128),w
  7075  049A  1D03               	skipz
  7076  049B  0008               	return
  7077  049C  2C99               	goto	l5851
  7078  049D                     __end_of_log:	
  7079                           
  7080                           	psect	text1583
  7081  03CA                     __ptext1583:	
  7082 ;; =============== function ___aldiv ends ============
  7083                           
  7084                           
  7085 ;; *************** function ___lldiv *****************
  7086 ;; Defined at:
  7087 ;;		line 5 in file "C:\Program Files\HI-TECH Software\PICC\9.71a\sources\lldiv.c"
  7088 ;; Parameters:    Size  Location     Type
  7089 ;;  divisor         4    2[COMMON] unsigned long 
  7090 ;;  dividend        4    6[COMMON] unsigned long 
  7091 ;; Auto vars:     Size  Location     Type
  7092 ;;  quotient        4    0[BANK0 ] unsigned long 
  7093 ;;  counter         1    4[BANK0 ] unsigned char 
  7094 ;; Return value:  Size  Location     Type
  7095 ;;                  4    2[COMMON] unsigned long 
  7096 ;; Registers used:
  7097 ;;		wreg, status,2, status,0
  7098 ;; Tracked objects:
  7099 ;;		On entry : 1F/0
  7100 ;;		On exit  : 1F/0
  7101 ;;		Unchanged: FFFE0/0
  7102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7103 ;;      Params:         8       0       0       0
  7104 ;;      Locals:         0       5       0       0
  7105 ;;      Temps:          0       0       0       0
  7106 ;;      Totals:         8       5       0       0
  7107 ;;Total ram usage:       13 bytes
  7108 ;; Hardware stack levels used:    1
  7109 ;; Hardware stack levels required when called:    1
  7110 ;; This function calls:
  7111 ;;		Nothing
  7112 ;; This function is called by:
  7113 ;;		_hdrProcess
  7114 ;; This function uses a non-reentrant model
  7115 ;;
  7116  03CA                     ___lldiv:	
  7117                           
  7118                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  7119  03CA  01A0               	clrf	___lldiv@quotient
  7120  03CB  01A1               	clrf	___lldiv@quotient+1
  7121  03CC  01A2               	clrf	___lldiv@quotient+2
  7122  03CD  01A3               	clrf	___lldiv@quotient+3
  7123  03CE  0875               	movf	___lldiv@divisor+3,w
  7124  03CF  0474               	iorwf	___lldiv@divisor+2,w
  7125  03D0  0473               	iorwf	___lldiv@divisor+1,w
  7126  03D1  0472               	iorwf	___lldiv@divisor,w
  7127  03D2  1903               	skipnz
  7128  03D3  2C00               	goto	l4631
  7129  03D4  01A4               	clrf	___lldiv@counter
  7130  03D5                     L4:	
  7131  03D5  0AA4               	incf	___lldiv@counter,f
  7132  03D6  1BF5               	btfsc	___lldiv@divisor+3,7
  7133  03D7  2BDD               	goto	l4619
  7134  03D8  35F2               	lslf	___lldiv@divisor,f
  7135  03D9  0DF3               	rlf	___lldiv@divisor+1,f
  7136  03DA  0DF4               	rlf	___lldiv@divisor+2,f
  7137  03DB  0DF5               	rlf	___lldiv@divisor+3,f
  7138  03DC  2BD5               	goto	L4
  7139  03DD                     l4619:	
  7140  03DD  35A0               	lslf	___lldiv@quotient,f
  7141  03DE  0DA1               	rlf	___lldiv@quotient+1,f
  7142  03DF  0DA2               	rlf	___lldiv@quotient+2,f
  7143  03E0  0DA3               	rlf	___lldiv@quotient+3,f
  7144  03E1  0875               	movf	___lldiv@divisor+3,w
  7145  03E2  0279               	subwf	___lldiv@dividend+3,w
  7146  03E3  1D03               	skipz
  7147  03E4  2BEF               	goto	u1985
  7148  03E5  0874               	movf	___lldiv@divisor+2,w
  7149  03E6  0278               	subwf	___lldiv@dividend+2,w
  7150  03E7  1D03               	skipz
  7151  03E8  2BEF               	goto	u1985
  7152  03E9  0873               	movf	___lldiv@divisor+1,w
  7153  03EA  0277               	subwf	___lldiv@dividend+1,w
  7154  03EB  1D03               	skipz
  7155  03EC  2BEF               	goto	u1985
  7156  03ED  0872               	movf	___lldiv@divisor,w
  7157  03EE  0276               	subwf	___lldiv@dividend,w
  7158  03EF                     u1985:	
  7159  03EF  1C03               	skipc
  7160  03F0  2BFA               	goto	l4627
  7161  03F1  0872               	movf	___lldiv@divisor,w
  7162  03F2  02F6               	subwf	___lldiv@dividend,f
  7163  03F3  0873               	movf	___lldiv@divisor+1,w
  7164  03F4  3BF7               	subwfb	___lldiv@dividend+1,f
  7165  03F5  0874               	movf	___lldiv@divisor+2,w
  7166  03F6  3BF8               	subwfb	___lldiv@dividend+2,f
  7167  03F7  0875               	movf	___lldiv@divisor+3,w
  7168  03F8  3BF9               	subwfb	___lldiv@dividend+3,f
  7169  03F9  1420               	bsf	___lldiv@quotient,0
  7170  03FA                     l4627:	
  7171  03FA  36F5               	lsrf	___lldiv@divisor+3,f
  7172  03FB  0CF4               	rrf	___lldiv@divisor+2,f
  7173  03FC  0CF3               	rrf	___lldiv@divisor+1,f
  7174  03FD  0CF2               	rrf	___lldiv@divisor,f
  7175  03FE  0BA4               	decfsz	___lldiv@counter,f
  7176  03FF  2BDD               	goto	l4619
  7177  0400                     l4631:	
  7178  0400  0823               	movf	___lldiv@quotient+3,w
  7179  0401  00F5               	movwf	?___lldiv+3
  7180  0402  0822               	movf	___lldiv@quotient+2,w
  7181  0403  00F4               	movwf	?___lldiv+2
  7182  0404  0821               	movf	___lldiv@quotient+1,w
  7183  0405  00F3               	movwf	?___lldiv+1
  7184  0406  0820               	movf	___lldiv@quotient,w
  7185  0407  00F2               	movwf	?___lldiv
  7186  0408  0008               	return
  7187  0409                     __end_of___lldiv:	
  7188                           
  7189                           	psect	text1585
  7190  0431                     __ptext1585:	
  7191 ;; =============== function ___lmul ends ============
  7192                           
  7193                           
  7194 ;; *************** function ___lwmod *****************
  7195 ;; Defined at:
  7196 ;;		line 5 in file "C:\Program Files\HI-TECH Software\PICC\9.71a\sources\lwmod.c"
  7197 ;; Parameters:    Size  Location     Type
  7198 ;;  divisor         2    4[BANK0 ] unsigned int 
  7199 ;;  dividend        2    6[BANK0 ] unsigned int 
  7200 ;; Auto vars:     Size  Location     Type
  7201 ;;  counter         1    8[BANK0 ] unsigned char 
  7202 ;; Return value:  Size  Location     Type
  7203 ;;                  2    4[BANK0 ] unsigned int 
  7204 ;; Registers used:
  7205 ;;		wreg, status,2, status,0
  7206 ;; Tracked objects:
  7207 ;;		On entry : 1F/0
  7208 ;;		On exit  : 1F/0
  7209 ;;		Unchanged: FFFE0/0
  7210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7211 ;;      Params:         0       4       0       0
  7212 ;;      Locals:         0       1       0       0
  7213 ;;      Temps:          0       0       0       0
  7214 ;;      Totals:         0       5       0       0
  7215 ;;Total ram usage:        5 bytes
  7216 ;; Hardware stack levels used:    1
  7217 ;; Hardware stack levels required when called:    1
  7218 ;; This function calls:
  7219 ;;		Nothing
  7220 ;; This function is called by:
  7221 ;;		_main
  7222 ;; This function uses a non-reentrant model
  7223 ;;
  7224  0431                     ___lwmod:	
  7225                           
  7226                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  7227  0431  0825               	movf	___lwmod@divisor+1,w
  7228  0432  0424               	iorwf	___lwmod@divisor,w
  7229  0433  1903               	skipnz
  7230  0434  2C4C               	goto	l5827
  7231  0435  01A8               	clrf	___lwmod@counter
  7232  0436                     L5:	
  7233  0436  0AA8               	incf	___lwmod@counter,f
  7234  0437  1BA5               	btfsc	___lwmod@divisor+1,7
  7235  0438  2C3C               	goto	l5819
  7236  0439  35A4               	lslf	___lwmod@divisor,f
  7237  043A  0DA5               	rlf	___lwmod@divisor+1,f
  7238  043B  2C36               	goto	L5
  7239  043C                     l5819:	
  7240  043C  0825               	movf	___lwmod@divisor+1,w
  7241  043D  0227               	subwf	___lwmod@dividend+1,w
  7242  043E  1D03               	skipz
  7243  043F  2C42               	goto	u3605
  7244  0440  0824               	movf	___lwmod@divisor,w
  7245  0441  0226               	subwf	___lwmod@dividend,w
  7246  0442                     u3605:	
  7247  0442  1C03               	skipc
  7248  0443  2C48               	goto	l5823
  7249  0444  0824               	movf	___lwmod@divisor,w
  7250  0445  02A6               	subwf	___lwmod@dividend,f
  7251  0446  0825               	movf	___lwmod@divisor+1,w
  7252  0447  3BA7               	subwfb	___lwmod@dividend+1,f
  7253  0448                     l5823:	
  7254  0448  36A5               	lsrf	___lwmod@divisor+1,f
  7255  0449  0CA4               	rrf	___lwmod@divisor,f
  7256  044A  0BA8               	decfsz	___lwmod@counter,f
  7257  044B  2C3C               	goto	l5819
  7258  044C                     l5827:	
  7259  044C  0827               	movf	___lwmod@dividend+1,w
  7260  044D  00A5               	movwf	?___lwmod+1
  7261  044E  0826               	movf	___lwmod@dividend,w
  7262  044F  00A4               	movwf	?___lwmod
  7263  0450  0008               	return
  7264  0451                     __end_of___lwmod:	
  7265                           
  7266                           	psect	text1586
  7267  0469                     __ptext1586:	
  7268 ;; =============== function ___lwmod ends ============
  7269                           
  7270                           
  7271 ;; *************** function ___wmul *****************
  7272 ;; Defined at:
  7273 ;;		line 3 in file "C:\Program Files\HI-TECH Software\PICC\9.71a\sources\wmul.c"
  7274 ;; Parameters:    Size  Location     Type
  7275 ;;  multiplier      2    2[COMMON] unsigned int 
  7276 ;;  multiplicand    2    4[COMMON] unsigned int 
  7277 ;; Auto vars:     Size  Location     Type
  7278 ;;  product         2    6[COMMON] unsigned int 
  7279 ;; Return value:  Size  Location     Type
  7280 ;;                  2    2[COMMON] unsigned int 
  7281 ;; Registers used:
  7282 ;;		wreg, status,2, status,0
  7283 ;; Tracked objects:
  7284 ;;		On entry : 1F/1
  7285 ;;		On exit  : 1F/1
  7286 ;;		Unchanged: FFFE0/0
  7287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7288 ;;      Params:         4       0       0       0
  7289 ;;      Locals:         2       0       0       0
  7290 ;;      Temps:          0       0       0       0
  7291 ;;      Totals:         6       0       0       0
  7292 ;;Total ram usage:        6 bytes
  7293 ;; Hardware stack levels used:    1
  7294 ;; Hardware stack levels required when called:    1
  7295 ;; This function calls:
  7296 ;;		Nothing
  7297 ;; This function is called by:
  7298 ;;		_ufatMount
  7299 ;; This function uses a non-reentrant model
  7300 ;;
  7301  0469                     ___wmul:	
  7302                           
  7303                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7304  0469  01F6               	clrf	___wmul@product
  7305  046A  01F7               	clrf	___wmul@product+1
  7306  046B                     l4563:	
  7307  046B  1C72               	btfss	___wmul@multiplier,0
  7308  046C  2C71               	goto	l4567
  7309  046D  0874               	movf	___wmul@multiplicand,w
  7310  046E  07F6               	addwf	___wmul@product,f
  7311  046F  0875               	movf	___wmul@multiplicand+1,w
  7312  0470  3DF7               	addwfc	___wmul@product+1,f
  7313  0471                     l4567:	
  7314  0471  35F4               	lslf	___wmul@multiplicand,f
  7315  0472  0DF5               	rlf	___wmul@multiplicand+1,f
  7316  0473  36F3               	lsrf	___wmul@multiplier+1,f
  7317  0474  0CF2               	rrf	___wmul@multiplier,f
  7318  0475  0873               	movf	___wmul@multiplier+1,w
  7319  0476  0472               	iorwf	___wmul@multiplier,w
  7320  0477  1D03               	skipz
  7321  0478  2C6B               	goto	l4563
  7322  0479  0877               	movf	___wmul@product+1,w
  7323  047A  00F3               	movwf	?___wmul+1
  7324  047B  0876               	movf	___wmul@product,w
  7325  047C  00F2               	movwf	?___wmul
  7326  047D  0008               	return
  7327  047E                     __end_of___wmul:	
  7328                           
  7329                           	psect	text1588
  7330  0384                     __ptext1588:	
  7331 ;; =============== function ___bmul ends ============
  7332                           
  7333                           
  7334 ;; *************** function _ufatGetU32 *****************
  7335 ;; Defined at:
  7336 ;;		line 53 in file "C:\Program Files\Microchip\Project\SingleChipPlayer\ufat\ufat.c"
  7337 ;; Parameters:    Size  Location     Type
  7338 ;;  v               1    wreg     PTR const unsigned char 
  7339 ;;		 -> ufatGetNthFile@buf(4), 
  7340 ;;  idx             1    2[COMMON] unsigned char 
  7341 ;; Auto vars:     Size  Location     Type
  7342 ;;  v               1    6[COMMON] PTR const unsigned char 
  7343 ;;		 -> ufatGetNthFile@buf(4), 
  7344 ;; Return value:  Size  Location     Type
  7345 ;;                  4    2[COMMON] unsigned long 
  7346 ;; Registers used:
  7347 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7348 ;; Tracked objects:
  7349 ;;		On entry : 1E/0
  7350 ;;		On exit  : 1F/0
  7351 ;;		Unchanged: FFFE0/0
  7352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7353 ;;      Params:         4       0       0       0
  7354 ;;      Locals:         1       0       0       0
  7355 ;;      Temps:          0      12       0       0
  7356 ;;      Totals:         5      12       0       0
  7357 ;;Total ram usage:       17 bytes
  7358 ;; Hardware stack levels used:    1
  7359 ;; Hardware stack levels required when called:    1
  7360 ;; This function calls:
  7361 ;;		Nothing
  7362 ;; This function is called by:
  7363 ;;		_ufatGetNthFile
  7364 ;; This function uses a non-reentrant model
  7365 ;;
  7366  0384                     _ufatGetU32:	
  7367                           
  7368                           ; Regs used in _ufatGetU32: [wreg+fsr1l-status,0]
  7369                           ;ufatGetU32@v stored from wreg
  7370  0384  00F6               	movwf	ufatGetU32@v
  7371                           
  7372                           ;ufat.c: 55: v += idx;
  7373  0385  0872               	movf	ufatGetU32@idx,w
  7374  0386  07F6               	addwf	ufatGetU32@v,f
  7375                           
  7376                           ;ufat.c: 56: return (((u32)v[3]) << 24) | (((u32)v[2]) << 16) | (((u32)v[1]) << 8) | ((u
      +                          32)v[0]);
  7377  0387  0876               	movf	ufatGetU32@v,w
  7378  0388  3E01               	addlw	1
  7379  0389  0086               	movwf	6
  7380  038A  0187               	clrf	7
  7381  038B  0801               	movf	1,w
  7382  038C  0020               	movlb	0	; select bank0
  7383  038D  00A0               	movwf	??_ufatGetU32
  7384  038E  01A1               	clrf	??_ufatGetU32+1
  7385  038F  01A2               	clrf	??_ufatGetU32+2
  7386  0390  01A3               	clrf	??_ufatGetU32+3
  7387  0391  0822               	movf	??_ufatGetU32+2,w
  7388  0392  00A3               	movwf	??_ufatGetU32+3
  7389  0393  0821               	movf	??_ufatGetU32+1,w
  7390  0394  00A2               	movwf	??_ufatGetU32+2
  7391  0395  0820               	movf	??_ufatGetU32,w
  7392  0396  00A1               	movwf	??_ufatGetU32+1
  7393  0397  01A0               	clrf	??_ufatGetU32
  7394  0398  0876               	movf	ufatGetU32@v,w
  7395  0399  3E02               	addlw	2
  7396  039A  0086               	movwf	6
  7397  039B  0801               	movf	1,w
  7398  039C  00A4               	movwf	??_ufatGetU32+4
  7399  039D  01A5               	clrf	??_ufatGetU32+5
  7400  039E  01A6               	clrf	??_ufatGetU32+6
  7401  039F  01A7               	clrf	??_ufatGetU32+7
  7402  03A0  0825               	movf	??_ufatGetU32+5,w
  7403  03A1  00A7               	movwf	??_ufatGetU32+7
  7404  03A2  0824               	movf	??_ufatGetU32+4,w
  7405  03A3  00A6               	movwf	??_ufatGetU32+6
  7406  03A4  01A5               	clrf	??_ufatGetU32+5
  7407  03A5  01A4               	clrf	??_ufatGetU32+4
  7408  03A6  0876               	movf	ufatGetU32@v,w
  7409  03A7  3E03               	addlw	3
  7410  03A8  0086               	movwf	6
  7411  03A9  0801               	movf	1,w
  7412  03AA  00AB               	movwf	??_ufatGetU32+11
  7413  03AB  01AA               	clrf	??_ufatGetU32+10
  7414  03AC  01A9               	clrf	??_ufatGetU32+9
  7415  03AD  01A8               	clrf	??_ufatGetU32+8
  7416  03AE  0828               	movf	??_ufatGetU32+8,w
  7417  03AF  04A4               	iorwf	??_ufatGetU32+4,f
  7418  03B0  0829               	movf	??_ufatGetU32+9,w
  7419  03B1  04A5               	iorwf	??_ufatGetU32+5,f
  7420  03B2  082A               	movf	??_ufatGetU32+10,w
  7421  03B3  04A6               	iorwf	??_ufatGetU32+6,f
  7422  03B4  082B               	movf	??_ufatGetU32+11,w
  7423  03B5  04A7               	iorwf	??_ufatGetU32+7,f
  7424  03B6  0824               	movf	??_ufatGetU32+4,w
  7425  03B7  04A0               	iorwf	??_ufatGetU32,f
  7426  03B8  0825               	movf	??_ufatGetU32+5,w
  7427  03B9  04A1               	iorwf	??_ufatGetU32+1,f
  7428  03BA  0826               	movf	??_ufatGetU32+6,w
  7429  03BB  04A2               	iorwf	??_ufatGetU32+2,f
  7430  03BC  0827               	movf	??_ufatGetU32+7,w
  7431  03BD  04A3               	iorwf	??_ufatGetU32+3,f
  7432  03BE  0876               	movf	ufatGetU32@v,w
  7433  03BF  0086               	movwf	6
  7434  03C0  0801               	movf	1,w
  7435  03C1  0420               	iorwf	??_ufatGetU32,w
  7436  03C2  00F2               	movwf	?_ufatGetU32
  7437  03C3  0821               	movf	??_ufatGetU32+1,w
  7438  03C4  00F3               	movwf	?_ufatGetU32+1
  7439  03C5  0822               	movf	??_ufatGetU32+2,w
  7440  03C6  00F4               	movwf	?_ufatGetU32+2
  7441  03C7  0823               	movf	??_ufatGetU32+3,w
  7442  03C8  00F5               	movwf	?_ufatGetU32+3
  7443  03C9  0008               	return
  7444  03CA                     __end_of_ufatGetU32:	
  7445                           
  7446                           	psect	text1591
  7447  04B4                     __ptext1591:	
  7448 ;; =============== function _sdCrc7 ends ============
  7449                           
  7450                           
  7451 ;; *************** function _sdSpiInit *****************
  7452 ;; Defined at:
  7453 ;;		line 35 in file "C:\Program Files\Microchip\Project\SingleChipPlayer\SD.c"
  7454 ;; Parameters:    Size  Location     Type
  7455 ;;		None
  7456 ;; Auto vars:     Size  Location     Type
  7457 ;;		None
  7458 ;; Return value:  Size  Location     Type
  7459 ;;		None               void
  7460 ;; Registers used:
  7461 ;;		wreg
  7462 ;; Tracked objects:
  7463 ;;		On entry : 1F/0
  7464 ;;		On exit  : 1F/4
  7465 ;;		Unchanged: FFFE0/0
  7466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7467 ;;      Params:         0       0       0       0
  7468 ;;      Locals:         0       0       0       0
  7469 ;;      Temps:          0       0       0       0
  7470 ;;      Totals:         0       0       0       0
  7471 ;;Total ram usage:        0 bytes
  7472 ;; Hardware stack levels used:    1
  7473 ;; Hardware stack levels required when called:    1
  7474 ;; This function calls:
  7475 ;;		Nothing
  7476 ;; This function is called by:
  7477 ;;		_sdInit
  7478 ;; This function uses a non-reentrant model
  7479 ;;
  7480  04B4                     _sdSpiInit:	
  7481                           
  7482                           ;SD.c: 37: SSP1ADD = 21;
  7483                           
  7484                           ; Regs used in _sdSpiInit: [wreg]
  7485  04B4  3015               	movlw	21
  7486  04B5  0024               	movlb	4	; select bank4
  7487  04B6  0092               	movwf	18	;volatile
  7488                           
  7489                           ;SD.c: 38: SSP1CON1 = 0b00101010;
  7490  04B7  302A               	movlw	42
  7491  04B8  0095               	movwf	21	;volatile
  7492                           
  7493                           ;SD.c: 39: SSP1STAT = 0b11000000;
  7494  04B9  30C0               	movlw	192
  7495  04BA  0094               	movwf	20	;volatile
  7496  04BB  0008               	return
  7497  04BC                     __end_of_sdSpiInit:	
  7498                           
  7499                           	psect	text1596
  7500  02F1                     __ptext1596:	
  7501 ;; =============== function _sdSpiByte ends ============
  7502                           
  7503                           
  7504 ;; *************** function _sleep *****************
  7505 ;; Defined at:
  7506 ;;		line 163 in file "C:\Program Files\Microchip\Project\SingleChipPlayer\main.c"
  7507 ;; Parameters:    Size  Location     Type
  7508 ;;  ms              4    2[COMMON] unsigned long 
  7509 ;; Auto vars:     Size  Location     Type
  7510 ;;  v               4    2[BANK0 ] unsigned long 
  7511 ;;  i               1    6[BANK0 ] char 
  7512 ;;  oldTris         1    1[BANK0 ] unsigned char 
  7513 ;;  oldClkCfg       1    0[BANK0 ] unsigned char 
  7514 ;; Return value:  Size  Location     Type
  7515 ;;		None               void
  7516 ;; Registers used:
  7517 ;;		wreg, status,2, status,0
  7518 ;; Tracked objects:
  7519 ;;		On entry : 1F/0
  7520 ;;		On exit  : 1F/1
  7521 ;;		Unchanged: FFFE0/0
  7522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7523 ;;      Params:         4       0       0       0
  7524 ;;      Locals:         0       7       0       0
  7525 ;;      Temps:          0       0       0       0
  7526 ;;      Totals:         4       7       0       0
  7527 ;;Total ram usage:       11 bytes
  7528 ;; Hardware stack levels used:    1
  7529 ;; Hardware stack levels required when called:    1
  7530 ;; This function calls:
  7531 ;;		Nothing
  7532 ;; This function is called by:
  7533 ;;		_main
  7534 ;; This function uses a non-reentrant model
  7535 ;;
  7536  02F1                     _sleep:	
  7537                           
  7538                           ;main.c: 167: Int8 i;
  7539                           ;main.c: 168: UInt8 oldClkCfg, oldTris;
  7540                           ;main.c: 169: const UInt32 v_initializer = 1UL << 18;
  7541                           ;main.c: 170: UInt32 v = v_initializer;
  7542                           
  7543                           ; Regs used in _sleep: [wreg+status,2+status,0]
  7544  02F1  01A5               	clrf	sleep@v+3
  7545  02F2  3004               	movlw	4
  7546  02F3  00A4               	movwf	sleep@v+2
  7547  02F4  01A3               	clrf	sleep@v+1
  7548  02F5  01A2               	clrf	sleep@v
  7549                           
  7550                           ;main.c: 172: oldClkCfg = OSCCON;
  7551  02F6  0021               	movlb	1	; select bank1
  7552  02F7  0819               	movf	25,w	;volatile
  7553  02F8  0020               	movlb	0	; select bank0
  7554  02F9  00A0               	movwf	sleep@oldClkCfg
  7555                           
  7556                           ;main.c: 173: OSCCON = 0b00010011;
  7557  02FA  3013               	movlw	19
  7558  02FB  0021               	movlb	1	; select bank1
  7559  02FC  0099               	movwf	25	;volatile
  7560                           
  7561                           ;main.c: 174: RA5 = 0;
  7562  02FD  0020               	movlb	0	; select bank0
  7563  02FE  128C               	bcf	12,5
  7564                           
  7565                           ;main.c: 175: oldTris = TRISA;
  7566  02FF  0021               	movlb	1	; select bank1
  7567  0300  080C               	movf	12,w	;volatile
  7568  0301  0020               	movlb	0	; select bank0
  7569  0302  00A1               	movwf	sleep@oldTris
  7570                           
  7571                           ;main.c: 176: TRISA = 0b11011110;
  7572  0303  30DE               	movlw	222
  7573  0304  0021               	movlb	1	; select bank1
  7574  0305  008C               	movwf	12	;volatile
  7575                           
  7576                           ;main.c: 177: RA0 = 0;
  7577  0306  0020               	movlb	0	; select bank0
  7578  0307  100C               	bcf	12,0
  7579                           
  7580                           ;main.c: 179: for(i = 18; i >= 0; i--, v >>= 1){
  7581  0308  3012               	movlw	18
  7582  0309  00A6               	movwf	sleep@i
  7583  030A                     l1138:	
  7584  030A  0825               	movf	sleep@v+3,w
  7585  030B  0275               	subwf	sleep@ms+3,w
  7586  030C  1D03               	skipz
  7587  030D  2B18               	goto	u1785
  7588  030E  0824               	movf	sleep@v+2,w
  7589  030F  0274               	subwf	sleep@ms+2,w
  7590  0310  1D03               	skipz
  7591  0311  2B18               	goto	u1785
  7592  0312  0823               	movf	sleep@v+1,w
  7593  0313  0273               	subwf	sleep@ms+1,w
  7594  0314  1D03               	skipz
  7595  0315  2B18               	goto	u1785
  7596  0316  0822               	movf	sleep@v,w
  7597  0317  0272               	subwf	sleep@ms,w
  7598  0318                     u1785:	
  7599  0318  1C03               	btfss	3,0
  7600  0319  2B2A               	goto	l4461
  7601  031A  0064               	clrwdt	;#
  7602                           
  7603                           ;main.c: 185: WDTCON = (i << 1) | 1;
  7604  031B  1403               	setc
  7605  031C  0D26               	rlf	sleep@i,w
  7606  031D  0021               	movlb	1	; select bank1
  7607  031E  0097               	movwf	23	;volatile
  7608                           
  7609                           ;main.c: 186: ms -= v;
  7610  031F  0020               	movlb	0	; select bank0
  7611  0320  0822               	movf	sleep@v,w
  7612  0321  02F2               	subwf	sleep@ms,f
  7613  0322  0823               	movf	sleep@v+1,w
  7614  0323  3BF3               	subwfb	sleep@ms+1,f
  7615  0324  0824               	movf	sleep@v+2,w
  7616  0325  3BF4               	subwfb	sleep@ms+2,f
  7617  0326  0825               	movf	sleep@v+3,w
  7618  0327  3BF5               	subwfb	sleep@ms+3,f
  7619  0328  0063               	sleep	;#
  7620  0329  2B0A               	goto	l1138
  7621  032A                     l4461:	
  7622  032A  03A6               	decf	sleep@i,f
  7623  032B  36A5               	lsrf	sleep@v+3,f
  7624  032C  0CA4               	rrf	sleep@v+2,f
  7625  032D  0CA3               	rrf	sleep@v+1,f
  7626  032E  0CA2               	rrf	sleep@v,f
  7627  032F  1FA6               	btfss	sleep@i,7
  7628  0330  2B0A               	goto	l1138
  7629                           
  7630                           ;main.c: 190: }
  7631                           ;main.c: 191: }
  7632                           ;main.c: 192: SWDTEN = 0;
  7633  0331  0021               	movlb	1	; select bank1
  7634  0332  1017               	bcf	23,0
  7635                           
  7636                           ;main.c: 194: TRISA = oldTris;
  7637  0333  0020               	movlb	0	; select bank0
  7638  0334  0821               	movf	sleep@oldTris,w
  7639  0335  0021               	movlb	1	; select bank1
  7640  0336  008C               	movwf	12	;volatile
  7641                           
  7642                           ;main.c: 195: OSCCON = oldClkCfg;
  7643  0337  0020               	movlb	0	; select bank0
  7644  0338  0820               	movf	sleep@oldClkCfg,w
  7645  0339  0021               	movlb	1	; select bank1
  7646  033A  0099               	movwf	25	;volatile
  7647  033B  0008               	return
  7648  033C                     __end_of_sleep:	
  7649                           
  7650                           	psect	text1597
  7651  04BC                     __ptext1597:	
  7652 ;; =============== function _sleep ends ============
  7653                           
  7654                           
  7655 ;; *************** function _audioOff *****************
  7656 ;; Defined at:
  7657 ;;		line 154 in file "C:\Program Files\Microchip\Project\SingleChipPlayer\main.c"
  7658 ;; Parameters:    Size  Location     Type
  7659 ;;		None
  7660 ;; Auto vars:     Size  Location     Type
  7661 ;;		None
  7662 ;; Return value:  Size  Location     Type
  7663 ;;		None               void
  7664 ;; Registers used:
  7665 ;;		status,2
  7666 ;; Tracked objects:
  7667 ;;		On entry : 1F/0
  7668 ;;		On exit  : 1F/0
  7669 ;;		Unchanged: FFFE0/0
  7670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7671 ;;      Params:         0       0       0       0
  7672 ;;      Locals:         0       0       0       0
  7673 ;;      Temps:          0       0       0       0
  7674 ;;      Totals:         0       0       0       0
  7675 ;;Total ram usage:        0 bytes
  7676 ;; Hardware stack levels used:    1
  7677 ;; Hardware stack levels required when called:    1
  7678 ;; This function calls:
  7679 ;;		Nothing
  7680 ;; This function is called by:
  7681 ;;		_play
  7682 ;; This function uses a non-reentrant model
  7683 ;;
  7684  04BC                     _audioOff:	
  7685  04BC                     l4437:	
  7686                           ; Regs used in _audioOff: [status,2]
  7687                           
  7688                           
  7689                           ;main.c: 156: INTCONbits.TMR0IE = 0;
  7690  04BC  128B               	bcf	11,5	;volatile
  7691                           
  7692                           ;main.c: 157: CCP1CON = 0;
  7693  04BD  0025               	movlb	5	; select bank5
  7694  04BE  0193               	clrf	19	;volatile
  7695                           
  7696                           ;main.c: 158: TRISAbits.TRISA5 = 0;
  7697  04BF  0021               	movlb	1	; select bank1
  7698  04C0  128C               	bcf	12,5	;volatile
  7699                           
  7700                           ;main.c: 159: RA5 = 0;
  7701  04C1  0020               	movlb	0	; select bank0
  7702  04C2  128C               	bcf	12,5
  7703  04C3  0008               	return
  7704  04C4                     __end_of_audioOff:	
  7705                           
  7706                           	psect	intentry
  7707  0004                     __pintentry:	
  7708 ;; =============== function _eeRead ends ============
  7709                           
  7710                           
  7711 ;; *************** function _isr *****************
  7712 ;; Defined at:
  7713 ;;		line 511 in file "C:\Program Files\Microchip\Project\SingleChipPlayer\main.c"
  7714 ;; Parameters:    Size  Location     Type
  7715 ;;		None
  7716 ;; Auto vars:     Size  Location     Type
  7717 ;;  v               1    1[COMMON] unsigned char 
  7718 ;;  v1              1    0[COMMON] unsigned char 
  7719 ;; Return value:  Size  Location     Type
  7720 ;;		None               void
  7721 ;; Registers used:
  7722 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7723 ;; Tracked objects:
  7724 ;;		On entry : 0/0
  7725 ;;		On exit  : 1F/0
  7726 ;;		Unchanged: FFFE0/0
  7727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7728 ;;      Params:         0       0       0       0
  7729 ;;      Locals:         2       0       0       0
  7730 ;;      Temps:          0       0       0       0
  7731 ;;      Totals:         2       0       0       0
  7732 ;;Total ram usage:        2 bytes
  7733 ;; Hardware stack levels used:    1
  7734 ;; This function calls:
  7735 ;;		Nothing
  7736 ;; This function is called by:
  7737 ;;		Interrupt level 1
  7738 ;; This function uses a non-reentrant model
  7739 ;;
  7740  0004                     _isr:	
  7741                           
  7742                           ; Regs used in _isr: [wreg+fsr1l-status,0]
  7743  0004                     	pagesel	$
  7744                           
  7745                           ;main.c: 514: UInt8 v, v1;
  7746                           ;main.c: 516: TMR0 = tmrReload;
  7747  0004  087A               	movf	_tmrReload,w	;volatile
  7748  0005  0020               	movlb	0	; select bank0
  7749  0006  0095               	movwf	21	;volatile
  7750                           
  7751                           ;main.c: 518: v = gBuffer[gRead++];
  7752  0007  086D               	movf	_gRead,w
  7753  0008  3E96               	addlw	150
  7754  0009  0086               	movwf	6
  7755  000A  3020               	movlw	32
  7756  000B  1803               	skipnc
  7757  000C  3021               	movlw	33
  7758  000D  0087               	movwf	7
  7759  000E  0801               	movf	1,w
  7760  000F  00F1               	movwf	isr@v
  7761  0010  0AED               	incf	_gRead,f
  7762                           
  7763                           ;main.c: 520: v1 = (0b00001100 & 0xCF) | ((v & 3) << 4);
  7764  0011  0E71               	swapf	isr@v,w
  7765  0012  3930               	andlw	48
  7766  0013  380C               	iorlw	12
  7767  0014  00F0               	movwf	isr@v1
  7768                           
  7769                           ;main.c: 521: v = v >> 2;
  7770  0015  36F1               	lsrf	isr@v,f
  7771  0016  36F1               	lsrf	isr@v,f
  7772                           
  7773                           ;main.c: 522: CCPR1L = v;
  7774  0017  0871               	movf	isr@v,w
  7775  0018  0025               	movlb	5	; select bank5
  7776  0019  0091               	movwf	17	;volatile
  7777                           
  7778                           ;main.c: 523: CCP1CON = v1;
  7779  001A  0870               	movf	isr@v1,w
  7780  001B  0093               	movwf	19	;volatile
  7781                           
  7782                           ;main.c: 525: if(gRead == 90) gRead = 0;
  7783  001C  0020               	movlb	0	; select bank0
  7784  001D  086D               	movf	_gRead,w
  7785  001E  3A5A               	xorlw	90
  7786  001F  1903               	btfsc	3,2
  7787  0020  01ED               	clrf	_gRead
  7788                           
  7789                           ;main.c: 527: INTCONbits.TMR0IF = 0;
  7790  0021  110B               	bcf	11,2	;volatile
  7791  0022  0009               	retfie
  7792  0023                     __end_of_isr:	
  7793                           
  7794 ;; =============== function _isr ends ============
  7795  007E                     btemp	set	126	;btemp
  7796  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.71a build 6446 
Symbol Table                                                                                   Thu Jun 21 00:59:43 2012

       sdPrvSimpleCommand@cmdDone 002F                    ___bmul@product 0073               ___wmul@multiplicand 0074  
                   ?_sdClockSpeed 0070                               _RA0 0060                               _RA5 0065  
                             _PR2 001B                               _log 0490                               _isr 0004  
                             _rnd 0A40                               wreg 0009                   sdPrvSendCmd@cmd 002A  
                    ?_sdReadStart 0032                              l1102 0000                              l1120 0A0D  
                            l1131 0000                              l1141 0000                              l1117 09DD  
                            l1080 0AB7                              l1128 0000                              l1138 030A  
                            l1083 0000                              l1252 0000                              l1244 0000  
                            l1077 0000                              l1086 0000                              l1094 0000  
                            l1166 0000                              l1169 0000                              l1249 0163  
                            l1290 09C7                              l1283 096F                              l1267 0903  
                            l2350 0E19                              l2430 0000                              l2353 0000  
                            l2505 0000                              l2433 0000                              l2530 0000  
                            l2602 00A8                              l2347 0000                              l2356 0000  
                            l2364 036E                              l2524 0000                              l2380 0000  
                            l2605 0000                              l2373 0000                              l2550 0000  
                            l2359 0000                              l2472 0000                              l2368 0000  
                            l2384 0000                              l6001 048E                              l2466 0000  
                            l2706 0000                              l2722 01BC                              l4411 0000  
                            l2387 02E2                              l2732 0000                              l4421 0000  
                            l4501 0000                              l2469 0000                              l6013 0EA3  
                            l6005 0000                              l6021 0000                              l2398 02CF  
                            l4431 0000                              l4503 0FD0                              l6023 0000  
                            l6031 0000                              l6111 0000                              l4433 0000  
                            l4425 0000                              l4417 0FD7                              l4441 0000  
                            l4505 0000                              l4601 00B2                              l6033 0000  
                            l6201 0000                              l6121 0000                              l4435 0000  
                            l4427 0000                              l4419 0000                              l4443 0000  
                            l4603 0000                              l4611 0000                              l6027 0000  
                            l6019 0000                              l6043 0ECD                              l6035 0000  
                            l6131 0000                              l4429 0000                              l4437 04BC  
                            l4461 032A                              l4445 0000                              l4533 0000  
                            l4541 0000                              l4621 0000                              l6045 0000  
                            l6205 0000                              l6133 0000                              l6221 0E04  
                            l6061 0000                              l4439 0000                              l4463 0000  
                            l4455 0000                              l4447 0000                              l4535 0000  
                            l4631 0400                              l6231 0E0A                              l6215 0E01  
                            l6151 0000                              l6311 0000                              l6303 0000  
                            l4393 0000                              l4465 0000                              l4457 0000  
                            l4449 0000                              l4473 0000                              l4561 0000  
                            l4625 0000                              l4609 0000                              l4801 09FA  
                            l6161 0000                              l6233 0CF2                              l6073 0CDF  
                            l6241 0000                              l6321 0000                              l6313 0000  
                            l6305 0000                              l6401 0000                              l4395 0000  
                            l4459 0000                              l4475 0000                              l4539 0000  
                            l4571 0000                              l4563 046B                              l4627 03FA  
                            l4619 03DD                              l4643 0000                              l4635 0000  
                            l4803 0000                              l6147 0000                              l6075 0000  
                            l6059 0000                              l6243 02E0                              l6307 0000  
                            l6403 0000                              l4397 0000                              l4629 0000  
                            l4661 0000                              l4645 01CB                              l4637 0000  
                            l4805 0000                              l6173 0DB6                              l6165 0000  
                            l6157 0D58                              l6149 0000                              l6093 0CF7  
                            l6077 0000                              l6333 0AC2                              l6325 0B48  
                            l6309 0B27                              l6413 0000                              l6405 02C5  
                            l6421 029B                              l6501 0000                              l4399 0000  
                            l4567 0471                              l4671 020F                              l4663 01FB  
                            l4655 01DE                              l4647 0000                              l6191 0000  
                            l6183 0000                              l6175 0DC8                              l6167 0000  
                            l6159 0000                              l6095 0000                              l6239 0000  
                            l6263 0C65                              l6271 0C7A                              l6255 0C36  
                            l6351 0AE3                              l6343 0000                              l6327 0000  
                            l6335 0AC4                              l6319 0B38                              l6415 0000  
                            l6407 0000                              l6431 0000                              l4569 0000  
                            l4665 0000                              l4657 0000                              l6185 0000  
                            l6169 0000                              l6097 0000                              l6281 0000  
                            l6265 0C68                              l6361 0000                              l6353 0000  
                            l6345 0AE1                              l6337 0AC5                              l6329 0000  
                            l6441 0000                              l6433 0000                              l6521 0000  
                            l4499 0000                              l5803 0000                              l5811 0000  
                            l4667 0201                              l4851 0000                              l6187 0DD9  
                            l6291 0CB6                              l6283 0C9D                              l6259 0C5A  
                            l6371 0000                              l6363 0AF4                              l6427 0000  
                            l6451 0000                              l6443 0000                              l6611 0000  
                            l5805 0000                              l4597 0000                              l4669 0000  
                            l5901 0000                              l4773 0000                              l4853 0000  
                            l6197 0DE5                              l6189 0000                              l6293 0CC6  
                            l6285 0CB0                              l6269 0000                              l6381 0B1A  
                            l6357 0000                              l6461 0000                              l6445 0E38  
                            l6429 0000                              l6541 0BDA                              l6525 0BAF  
                            l6533 0BC5                              l6701 0000                              ?_log 0070  
                            l5823 0448                              l5831 0000                              l5911 0000  
                            l4791 0000                              l4783 0000                              l4855 0000  
                            l4847 0000                              l6199 0000                              l6383 0000  
                            l6367 0000                              l6359 0000                              l6391 0B54  
                            l6447 0000                              l6439 0E2F                              l6543 0000  
                            l6551 0BFB                              l6535 0000                              l6527 0000  
                            l6623 0000                              l6711 0000                              l6703 003F  
                            l5761 0000                              l5825 0000                              l5841 0000  
                            l5833 0000                              l5921 0A2F                              l5913 0000  
                            l4793 0000                              l4849 0000                              l6297 0000  
                            l6289 0000                              l6377 0000                              l6369 0000  
                            l6393 0000                              l6449 0000                              l6553 0000  
                            l6617 026D                              l6609 024C                              l6633 0108  
                            l6625 0000                              l6641 0000                              l6721 0000  
                            l6713 0000                              l6705 0060                              l5755 0000  
                            l5763 0000                              l5819 043C                              l5827 044C  
                            l5843 0000                              l5835 0000                              l5851 0499  
                            l5923 0000                              l5907 0A1C                              l4795 0000  
                            l4779 09CA                              l6379 0AE6                              l6387 0AC8  
                            l6395 0000                              l6459 0000                              l6571 0C32  
                            l6635 0000                              l6627 0000                              l6715 0000  
                            l6707 0000                              l6731 0000                              ?_isr 0070  
                            l5757 0000                              l5773 0000                              l5837 0000  
                            l5861 0000                              l5853 0000                              l5925 0000  
                            l5909 0000                              l4789 0000                              l5933 0000  
                            l5941 0000                              l6389 0B25                              l6397 0000  
                            l6493 0000                              l6485 0000                              l6477 0000  
                            l6469 0000                              l6565 0C20                              l6573 0B6C  
                            l6629 0103                              l6717 0000                              l6709 0000  
                            l6821 0000                              l6813 0951                              l6805 091C  
                            l6741 0000                              l6733 0000                              l6725 0000  
                            l5759 0000                              l5791 0381                              l5783 0379  
                            l5839 0000                              l5847 0000                              l5871 0000  
                            l5927 0000                              l4799 09CB                              l5935 086A  
                            l5951 0000                              l5943 0000                              l6655 0EFA  
                            l6719 0000                              l6823 0000                              l6815 0954  
                            l6807 0941                              l6751 08C3                              l6743 0000  
                            l6735 0000                              l6727 0000                              l5785 0000  
                            l5769 0000                              l5849 0000                              l5873 0000  
                            l5857 0811                              l5929 0000                              l5937 0000  
                            l5961 0000                              l6569 0000                              l6497 0000  
                            l6681 0000                              l6673 0000                              l6841 0000  
                            l6833 0000                              l6825 0000                              l6809 0944  
                            l6761 0000                              l6753 0000                              l6737 0000  
                            l6729 0000                              l5779 0000                              l5795 0000  
                            l5891 0000                              l5867 081B                              l5859 0000  
                            l5963 0000                              l5955 0000                              l5939 0000  
                            l5971 0000                              l6499 0000                              l6579 0218  
                            l6683 0000                              l6675 0000                              l6659 0EFC  
                            l6691 0000                              l6843 0000                              l6835 0000  
                            l6827 0997                              l6819 0000                              l6763 0000  
                            l6755 0000                              l6747 08B8                              l6739 0000  
                            l5789 0362                              l5797 0E98                              l5885 084B  
                            l5877 0000                              l5869 0000                              l5965 0000  
                            l5957 0000                              l5949 0159                              l5981 0000  
                            l5973 0000                              l6589 0222                              l6685 0000  
                            l6677 0000                              l6837 0000                              l6829 099D  
                            l6781 08DB                              l5887 0000                              l5879 0000  
                            l5895 0000                              l5991 0000                              l5975 0000  
                            l6687 0000                              l6679 0000                              l6839 0000  
                            l6791 0000                              l6783 08FB                              l6759 08CF  
                            ?_rnd 0029                              l5889 0000                              l5977 0000  
                            l5969 0000                              l5993 0000                              l6697 0044  
                            l6769 0000                              l5987 0351                              l5979 0000  
                            l5995 0484                              l6699 0000                              l6787 0000  
                            l5989 0000                              l5997 0000                              l5999 0480  
                            u2045 01F0                              u4105 0C58                              u4145 0CA7  
                            u5107 09D5                              u3605 0442                              u5117 09E3  
                            u5037 088F                              u5127 09EE                              u4095 0C4C  
                            u5047 089D                              u1785 0318                              u5137 0A00  
                            u5057 0458                              u5067 045E                              u5077 0464  
                            u5087 0152                              u4295 0AD7                              u1985 03EF  
                            u5097 015B                              u4805 005E                              u3775 0EBC  
                            u4575 0B76                              u4770 0000                              u4780 0000  
                            u3975 0D8C                              u4775 0F57                              u3985 0DC0  
                            u4785 0F66                              _TMR0 0015                    ufatExtRead@buf 003D  
                  ufatExtRead@len 003C                              _main 0872                              _byte 0E13  
                            _play 0ABA                              fsr0h 0005                              fsr1h 0007  
                            fsr0l 0004                              indf0 0000                              indf1 0001  
                            fsr1l 0006                              btemp 007E                              isr@v 0071  
                            rnd@x 002F                 sdPrvCardInit@resp 0042                 sdPrvCardInit@time 0039  
                            start 0023                 secListWrite@which 0020                 secListWrite@start 0075  
               ___bmul@multiplier 0074                      ?_sdSpiResync 0070                             ??_log 0074  
                           ??_isr 0070                             ??_rnd 002B   __end_of_ufatParsePartitionTable 027A  
                sdPrvSendCmd@send 0024                    ??_sdClockSpeed 0072                   __end_of___aldiv 0218  
                           ?_main 0070                             ?_byte 0070                             _ADRES 009B  
                           ?_play 0070                   __end_of___lldiv 0409                             _T2CON 001C  
                           _LATA1 0861                             _LATA4 0864                      ?_secListRead 0075  
                 __end_of___lwmod 0451                             _TRISA 008C                   __end_of_eeWrite 0ABA  
                           _SSPEN 10AD               ___lmul@multiplicand 0076                   __end_of_audioOn 0FFB  
                   _sdSecReadStop 0E1D                             _gRead 006D                      main@numFiles 00B3  
                           _fatal 09C8                       sdInit@tries 0043                             _sleep 02F1  
                           main@i 00BA                             main@j 00B9                             main@n 00BE  
                           isr@v1 0070            __size_of_sdPrvCardInit 0040                sdPrvCardInit@first 003D  
              sdPrvCardInit@param 003E                             play@i 0046                             play@j 0045  
                           play@t 0044                             status 0003                             wtemp0 007E  
                  sdPrvACMD@param 0032                      __end_of_main 09C8                      __end_of_byte 0E15  
                    __end_of_play 0B56            __size_of_sdPrvReadResp 0012                 ??_ufatGetNextClus 007A  
                          ??_main 00A0                            ??_byte 0073                            ??_play 003A  
                   ?_sdPrvSendCmd 0020                 sdPrvSendCmd@param 0020                    ?_sdSecReadStop 0070  
                          ?_fatal 0070                            _ADCON0 009D                            _ADCON1 009E  
                    ?_ufatExtRead 0036                            _EEADRL 0191                            _CCPR1H 0292  
                          _CCPR1L 0291                            _EEDATL 0193                            _EECON1 0195  
                          _EECON2 0196                            ?_sleep 0072                            _APFCON 011D  
                          _ANSELA 018C                            i1l1296 0000                            i1l4481 0000  
                          i1l4491 0000                            i1l4483 0000                            i1l4493 0000  
                          i1l4485 0000                            i1l4487 0000                            i1l4479 0000  
                          i1l4489 0000                            _INTCON 000B                            _FVRCON 0117  
                          _OSCCON 0099                     ?_secListWrite 0075                            _WDTCON 0097  
                          _SWDTEN 04B8                    _ufatGetNthFile 0B56                  __end_of_audioOff 04C4  
                          ___bmul 0E96                _sdPrvSimpleCommand 0E81                            _eeRead 0AA0  
                          ___lmul 00A4                         ??___aldiv 007A                            ___wmul 0469  
                          _gWrite 007B                            _fatSec 00CA                         ??___lldiv 007A  
                          _sdCrc7 0360                         ??___lwmod 007A                     _sdPrvCardInit 0292  
                          _sdInit 0E26                         ??_eeWrite 0073                            fatal@i 0077  
                          fatal@j 0078                            fatal@k 0076                            _spiCmp 0EA2  
                  ??_sdPrvSendCmd 0079                         ??_audioOn 0072                            main@id 00C0  
             ?_sdPrvSimpleCommand 002B                            main@sv 00BC                            main@sz 00C4  
                          clrloop 049E                            log@val 0074                  __end_of_ufatInit 0F8D  
                __end_of_ufatOpen 1000                      __pdataCOMMON 007B           __size_of_measureBattery 006B  
                          sleep@i 0026                            sleep@v 0022                     _sdPrvReadResp 047E  
                    sdReadStart@v 0035                    ??_secListWrite 007A              __size_of_sdReadStart 0027  
            ??_sdPrvSimpleCommand 007A              __end_of_sdClockSpeed 0FD6            __end_of_ufatGetNthFile 0C36  
             _ufatGetNthFile$3417 0046               ___bmul@multiplicand 0072          ??_ufatGetNextSectorRange 0049  
                  __pcstackCOMMON 0070                      __pidataBANK1 0000                    ?_sdPrvCardInit 0070  
                   __end_of_fatal 0A0F                     __end_of_sleep 033C      __end_of_ufatExtReadTerminate 04B4  
                    sdPrvACMD@cmd 0036                      sdPrvACMD@ret 0037              __size_of_sdSpiResync 0018  
                 ??_sdSecReadStop 007A              __size_of_secListRead 0064                    ?_sdPrvReadResp 0070  
      ufatGetNextSectorRange@next 004E        ufatGetNextSectorRange@prev 004C                           ??_fatal 0072  
                 _hdrProcess$2012 0031                           ??_sleep 0076                        __pbssBANK0 0069  
                      __pbssBANK1 00C8                __size_of_sdPrvACMD 001F                __size_of_sdNextSec 000E  
              __size_of_sdSpiByte 0008                __size_of_sdSpiInit 0008                   ?_ufatGetNthFile 003E  
                      eeRead@addr 0072                        __pmaintext 0872                           ?___bmul 0072  
                         ?___lmul 0072                           ?_eeRead 0070                           ?___wmul 0072  
                      __pintentry 0004                           ?_sdCrc7 0072                           _CCP1CON 0293  
                         ?_sdInit 0070                        __ptext1600 0AA0                        __ptext1560 0E26  
                      __ptext1561 04A9                        __ptext1570 0EA2                        __ptext1562 0292  
                      __ptext1571 047E                        __ptext1563 0ABA                        __ptext1555 002F  
                      __ptext1580 0490                        __ptext1572 033C                        __ptext1564 0C36  
                      __ptext1556 0EDB                        __ptext1581 0A40                        __ptext1573 0451  
                      __ptext1565 02D2                        __ptext1557 00C9                        __ptext1590 0360  
                      __ptext1582 01AC                        __ptext1574 0141                        __ptext1566 0CD4  
                      __ptext1558 0218                        __ptext1591 04B4                        __ptext1583 03CA  
                      __ptext1575 0864                        __ptext1567 0EB4                        __ptext1559 0B56  
                      __ptext1592 0FC7                        __ptext1584 00A4                        __ptext1576 0E13  
                      __ptext1568 0E1D                        __ptext1593 0FFB                        __ptext1585 0431  
                      __ptext1577 09C8                        __ptext1569 0E81                        __ptext1594 0F87  
                      __ptext1586 0469                        __ptext1578 0A0F                        __ptext1595 0E15  
                      __ptext1587 0E96                        __ptext1579 0800                        __ptext1596 02F1  
                      __ptext1588 0384                        __ptext1597 04BC                        __ptext1589 0F78  
                      __ptext1598 0FD6                        __ptext1599 0AA8                    ___lmul@product 0020  
              __size_of_ufatMount 009D                           ?_spiCmp 0073                        _diskOffset 0069  
                      _hdrProcess 0CD4                       ufatGetU32@v 0076                       ufatGetU16@v 0074  
                  sleep@oldClkCfg 0020          ?_ufatParsePartitionTable 0070                           _OSCTUNE 0098  
                         _SSP1ADD 0212                           _SSP1BUF 0211                         ?_audioOff 0070  
                      __stringtab 0026              __size_of_ufatExtRead 009E              __end_of_sdPrvSendCmd 0360  
                 _ufatGetNextClus 00C9                         ?_ufatInit 0070                         ?_ufatOpen 0072  
                 ??_sdPrvCardInit 007A             sdPrvSimpleCommand@cmd 0030             sdPrvSimpleCommand@ret 0031  
                         _gBuffer 2096   __size_of_ufatGetNextSectorRange 0075                        _byteStride 00D4  
                         ___aldiv 01AC                   __size_of___bmul 000C                   __size_of_eeRead 0008  
                 __size_of___lmul 0025                           ___lldiv 03CA                   __size_of___wmul 0015  
                      _secPerClus 00D5                           ___lwmod 0431                 ufatExtRead@curSec 00D7  
               ufatExtRead@curPos 00D2                   __size_of_sdCrc7 0024                           _eeWrite 0AA8  
                         _dataSec 00C8                   __size_of_sdInit 005B                 ufatExtRead@offset 003A  
               ufatExtRead@sector 0036              __end_of_secListWrite 0A40                 __end_of_sdPrvACMD 02F1  
               __end_of_sdNextSec 0872                   __size_of_spiCmp 0012                           _audioOn 0FD6  
                         _curClus 00DB                 __end_of_sdSpiByte 0E1D                 __end_of_sdSpiInit 04BC  
                   ufatGetU32@idx 0072                     ufatGetU16@idx 0072                      __size_of_log 000D  
                    __size_of_isr 001F                      __size_of_rnd 0060                   ??_sdPrvReadResp 0073  
                  _measureBattery 0141                  ___aldiv@dividend 0076                      secListRead@i 002C  
                         sdCrc7@a 0078                           sdCrc7@i 0077                           _rootSec 00CE  
                      ??_audioOff 0072             __size_of_sdClockSpeed 000F                           main@sec 00B5  
                         main@ret 00C2              end_of_initialization 042E                           log@addr 00D6  
                         sdInit@v 0045                        _ufatGetU32 0384                        _ufatGetU16 0F78  
               __end_of_ufatMount 0F78              _ufatExtReadTerminate 04A9                           play@sec 0041  
                         play@ret 003E             ufatGetNextClus@offset 0046                 ufatGetNthFile@buf 0048  
               ufatGetNthFile@sec 004C                   ___lldiv@divisor 0072                        ??_ufatInit 0072  
                 ___lldiv@counter 0024                        ??_ufatOpen 0074                           sleep@ms 0072  
                ___aldiv@quotient 0022            __end_of_measureBattery 01AC                       ?_hdrProcess 0070  
                    _sdClockSpeed 0FC7                        sdCrc7@Data 0076                    sdPrvReadResp@i 0073  
                  sdPrvReadResp@v 0074                         _TRISAbits 008C            _ufatGetNextSectorRange 002F  
         __end_of_ufatGetNextClus 011A                    play@secListIdx 0040             ?_ufatExtReadTerminate 0070  
                 secListWrite@len 0078                    __end_of___bmul 0EA2                    __end_of_eeRead 0AA8  
                  __end_of___lmul 00C9                    __end_of___wmul 047E                     __pidataCOMMON 0000  
                  __end_of_sdCrc7 0384                    __end_of_sdInit 0E81                   ?_measureBattery 0026  
                  __end_of_spiCmp 0EB4               start_initialization 0409           ufatGetNextSectorRange@t 0050  
                     __end_of_log 049D                       __end_of_isr 0023                       __end_of_rnd 0AA0  
                      sdNextSec@v 0073             __size_of_sdPrvSendCmd 0024                     ??_sdReadStart 007A  
                ??_ufatGetNthFile 007A     ufatParsePartitionTable@offset 0052     ufatParsePartitionTable@record 0042  
                     ?_ufatGetU32 0072                       ?_ufatGetU16 0072       __size_of_sdPrvSimpleCommand 0015  
             __size_of_hdrProcess 013F             __size_of_secListWrite 0031                          ??___bmul 0073  
     ufatGetNextSectorRange@first 004B                          ??___lmul 007A                          ??_eeRead 0072  
                        ??___wmul 0076                     ??_sdSpiResync 0072           sdPrvSimpleCommand@param 002B  
                        ??_sdCrc7 0074                       __pdataBANK1 00D7                          ??_sdInit 007A  
                        ??_spiCmp 0074                 _sdClockSpeed$3322 0073                     ??_secListRead 0020  
                    play@firstSec 0047                      _sdPrvSendCmd 033C                       __pbssBIGRAM 2096  
           __end_of_sdSecReadStop 0E26                       __pbssCOMMON 007A                     __pcstackBANK0 0020  
                   __pcstackBANK1 00A0            ??_ufatExtReadTerminate 007A                  ?_ufatGetNextClus 003E  
               __size_of_audioOff 0008                      _secListWrite 0A0F                     _sectorsPerFat 00D0  
             __end_of_sdReadStart 0EDB                        play@numSec 004A  __size_of_ufatParsePartitionTable 0062  
                       _main$2046 00AF                          ?___aldiv 0072                 __size_of_ufatInit 0006  
               __size_of_ufatOpen 0005                          ?___lldiv 0072                          ?___lwmod 0024  
                        ?_eeWrite 0072              ufatGetNthFile@offset 0050                         __pstrings 0026  
             __size_of_ufatGetU16 000F               __size_of_ufatGetU32 0046                          ?_audioOn 0070  
             __end_of_sdSpiResync 0469                        ufatOpen@id 0072                     sdSpiByte@byte 0072  
                       _sdPrvACMD 02D2                         _sdNextSec 0864                         _sdSpiByte 0E15  
                       _sdSpiInit 04B4                        spiCmp@with 0075                     ??_ufatExtRead 007A  
                  __size_of_fatal 0047               __end_of_secListRead 0864                    __size_of_sleep 004B  
              _sdPrvCardInit$3364 003B                   ___aldiv@divisor 0072                   ___aldiv@counter 0020  
                  ___wmul@product 0076                    secListRead@t16 0029                    secListRead@t24 0026  
                  secListRead@len 0076                         _ufatMount 0EDB                  ufatGetNthFile@id 0043  
                ufatGetNthFile@sz 0041                          _SSP1CON1 0215             __end_of_sdPrvCardInit 02D2  
                        _SSP1STAT 0214                         _tmrReload 007A                         sdCrc7@chr 0075  
                       sdCrc7@crc 0073                         sdCrc7@cnt 0072                        _ADCON0bits 009D  
                    ??_hdrProcess 0025                 ___wmul@multiplier 0072           ?_ufatGetNextSectorRange 0048  
                       main@flags 00C3                        ?_sdPrvACMD 0032                        ?_sdNextSec 0070  
                 sdPrvCardInit@sd 0038                         idloc_word 8000                        ?_sdSpiByte 0070  
                      ?_sdSpiInit 0070             __end_of_sdPrvReadResp 0490                 ___lmul@multiplier 0072  
                     _sdReadStart 0EB4                       eeWrite@addr 0073               __end_of_ufatExtRead 0CD4  
                     eeWrite@data 0072                   measureBattery@i 002F                   measureBattery@t 0030  
                      _EECON1bits 0195                      ufatMount@buf 005C                __end_of_hdrProcess 0E13  
                      ?_ufatMount 0070                  sdClockSpeed@fast 0072                  ??_measureBattery 0028  
                     _sdSpiResync 0451                  __size_of___aldiv 006C                  __size_of___lldiv 003F  
                __size_of___lwmod 0020    __end_of_ufatGetNextSectorRange 00A4                  __size_of_eeWrite 0012  
                __size_of_audioOn 0025                       _secListRead 0800                         play@start 003F  
                        _audioOff 04BC               ufatGetNthFile@flags 0042                      sleep@oldTris 0021  
                    ??_ufatGetU32 0020                      ??_ufatGetU16 0074                         spiCmp@len 0073  
                   __size_of_main 0156                     __size_of_byte 0002                     __size_of_play 009C  
       ufatGetNextSectorRange@len 0048           _ufatParsePartitionTable 0218                    _rootDirEntries 00CC  
                        fatal@val 0075                          clear_ram 049D                          _ufatInit 0F87  
             ufatGetNextClus@clus 003E                          _ufatOpen 0FFB                   ufatGetNthFile@i 0044  
                 ufatGetNthFile@n 003E                    hdrProcess@riff 0027                    hdrProcess@wave 002B  
                        audioOn@i 0075                     secListWrite@i 0021                      _SSP1STATbits 0214  
                        main@name 00A4                          sdInit@SD 0044                __end_of_ufatGetU16 0F87  
              __end_of_ufatGetU32 03CA                  secListRead@which 002B                        _INTCONbits 000B  
                secListRead@start 0075                       ??_sdPrvACMD 007A                       ??_sdNextSec 0073  
                     ??_sdSpiByte 0072                       ??_sdSpiInit 0072                       _ufatExtRead 0C36  
      __end_of_sdPrvSimpleCommand 0E96                          intlevel1 0000                  ___lwmod@dividend 0026  
                ___lldiv@dividend 0076                ufatGetNthFile@name 0040                       ??_ufatMount 0054  
                   hdrProcess@t32 0035                ufatGetNextClus@buf 0040                ufatGetNextClus@sec 0042  
                   hdrProcess@hdr 002D                     hdrProcess@csz 0033                        _OPTION_REG 0095  
                ___lldiv@quotient 0020                   ___lwmod@divisor 0024                    sdReadStart@sec 0032  
                 ___lwmod@counter 0028                      ___aldiv@sign 0021         ??_ufatParsePartitionTable 003E  
   __size_of_ufatExtReadTerminate 000B                       hdrProcess@i 0034                       hdrProcess@j 0039  
        __size_of_ufatGetNextClus 0051           __size_of_ufatGetNthFile 00E0            __size_of_sdSecReadStop 0009  
